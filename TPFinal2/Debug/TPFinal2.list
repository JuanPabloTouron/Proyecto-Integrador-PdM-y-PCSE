
TPFinal2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043fc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080045cc  080045cc  000055cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004694  08004694  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004694  08004694  00005694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800469c  0800469c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800469c  0800469c  0000569c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046a0  080046a0  000056a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080046a4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  2000005c  08004700  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08004700  00006404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bec2  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002141  00000000  00000000  00011f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  00014090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000894  00000000  00000000  00014bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022552  00000000  00000000  00015444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107de  00000000  00000000  00037996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb2c8  00000000  00000000  00048174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011343c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031a4  00000000  00000000  00113480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00116624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080045b4 	.word	0x080045b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080045b4 	.word	0x080045b4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 ffa2 	bl	8001528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f810 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_USART2_UART_Init();
 80005e8:	f000 f87a 	bl	80006e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  I2CInit();
 80005ec:	f000 ff0a 	bl	8001404 <I2CInit>
  buttonsInit();
 80005f0:	f000 fe3e 	bl	8001270 <buttonsInit>
  appInit();
 80005f4:	f000 fb4a 	bl	8000c8c <appInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  appUpdate();
 80005f8:	f000 fb70 	bl	8000cdc <appUpdate>
	  I2CDelay(200);
 80005fc:	20c8      	movs	r0, #200	@ 0xc8
 80005fe:	f000 ff51 	bl	80014a4 <I2CDelay>
	  appUpdate();
 8000602:	bf00      	nop
 8000604:	e7f8      	b.n	80005f8 <main+0x1c>
	...

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	@ 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	2234      	movs	r2, #52	@ 0x34
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f003 fb4e 	bl	8003cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b29      	ldr	r3, [pc, #164]	@ (80006d8 <SystemClock_Config+0xd0>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	4a28      	ldr	r2, [pc, #160]	@ (80006d8 <SystemClock_Config+0xd0>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	@ 0x40
 800063c:	4b26      	ldr	r3, [pc, #152]	@ (80006d8 <SystemClock_Config+0xd0>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000648:	2300      	movs	r3, #0
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	4b23      	ldr	r3, [pc, #140]	@ (80006dc <SystemClock_Config+0xd4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000654:	4a21      	ldr	r2, [pc, #132]	@ (80006dc <SystemClock_Config+0xd4>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <SystemClock_Config+0xd4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2310      	movs	r3, #16
 8000672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800067c:	2308      	movs	r3, #8
 800067e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000680:	2348      	movs	r3, #72	@ 0x48
 8000682:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800068c:	2302      	movs	r3, #2
 800068e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4618      	mov	r0, r3
 8000696:	f002 fd8b 	bl	80031b0 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006a0:	f000 f848 	bl	8000734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2102      	movs	r1, #2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 fab1 	bl	8002c28 <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006cc:	f000 f832 	bl	8000734 <Error_Handler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3750      	adds	r7, #80	@ 0x50
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e4:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	@ (8000730 <MX_USART2_UART_Init+0x50>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ea:	4b10      	ldr	r3, [pc, #64]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b09      	ldr	r3, [pc, #36]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b08      	ldr	r3, [pc, #32]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 8000718:	f002 ffe8 	bl	80036ec <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000722:	f000 f807 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000078 	.word	0x20000078
 8000730:	40004400 	.word	0x40004400

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1){
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <Error_Handler+0x8>

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <HAL_MspInit+0x4c>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800074e:	4a0f      	ldr	r2, [pc, #60]	@ (800078c <HAL_MspInit+0x4c>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6453      	str	r3, [r2, #68]	@ 0x44
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <HAL_MspInit+0x4c>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <HAL_MspInit+0x4c>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076a:	4a08      	ldr	r2, [pc, #32]	@ (800078c <HAL_MspInit+0x4c>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000770:	6413      	str	r3, [r2, #64]	@ 0x40
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <HAL_MspInit+0x4c>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	@ 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a19      	ldr	r2, [pc, #100]	@ (8000814 <HAL_I2C_MspInit+0x84>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d12c      	bne.n	800080c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b18      	ldr	r3, [pc, #96]	@ (8000818 <HAL_I2C_MspInit+0x88>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a17      	ldr	r2, [pc, #92]	@ (8000818 <HAL_I2C_MspInit+0x88>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <HAL_I2C_MspInit+0x88>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d4:	2312      	movs	r3, #18
 80007d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d8:	2301      	movs	r3, #1
 80007da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007dc:	2303      	movs	r3, #3
 80007de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007e0:	2304      	movs	r3, #4
 80007e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	480c      	ldr	r0, [pc, #48]	@ (800081c <HAL_I2C_MspInit+0x8c>)
 80007ec:	f001 f844 	bl	8001878 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <HAL_I2C_MspInit+0x88>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f8:	4a07      	ldr	r2, [pc, #28]	@ (8000818 <HAL_I2C_MspInit+0x88>)
 80007fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000800:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <HAL_I2C_MspInit+0x88>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000804:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800080c:	bf00      	nop
 800080e:	3728      	adds	r7, #40	@ 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40005400 	.word	0x40005400
 8000818:	40023800 	.word	0x40023800
 800081c:	40020400 	.word	0x40020400

08000820 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	@ 0x28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a19      	ldr	r2, [pc, #100]	@ (80008a4 <HAL_UART_MspInit+0x84>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d12b      	bne.n	800089a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	4b18      	ldr	r3, [pc, #96]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084a:	4a17      	ldr	r2, [pc, #92]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 800084c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000850:	6413      	str	r3, [r2, #64]	@ 0x40
 8000852:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a10      	ldr	r2, [pc, #64]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800087a:	230c      	movs	r3, #12
 800087c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800088a:	2307      	movs	r3, #7
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	@ (80008ac <HAL_UART_MspInit+0x8c>)
 8000896:	f000 ffef 	bl	8001878 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800089a:	bf00      	nop
 800089c:	3728      	adds	r7, #40	@ 0x28
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40004400 	.word	0x40004400
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020000 	.word	0x40020000

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <NMI_Handler+0x4>

080008b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <HardFault_Handler+0x4>

080008c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <MemManage_Handler+0x4>

080008c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000906:	f000 fe61 	bl	80015cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}

0800090e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000912:	2040      	movs	r0, #64	@ 0x40
 8000914:	f001 f95c 	bl	8001bd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000918:	2080      	movs	r0, #128	@ 0x80
 800091a:	f001 f959 	bl	8001bd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800091e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000922:	f001 f955 	bl	8001bd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000926:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800092a:	f001 f951 	bl	8001bd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800093c:	4a14      	ldr	r2, [pc, #80]	@ (8000990 <_sbrk+0x5c>)
 800093e:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <_sbrk+0x60>)
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000948:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <_sbrk+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d102      	bne.n	8000956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000950:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <_sbrk+0x64>)
 8000952:	4a12      	ldr	r2, [pc, #72]	@ (800099c <_sbrk+0x68>)
 8000954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <_sbrk+0x64>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	429a      	cmp	r2, r3
 8000962:	d207      	bcs.n	8000974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000964:	f003 f9b0 	bl	8003cc8 <__errno>
 8000968:	4603      	mov	r3, r0
 800096a:	220c      	movs	r2, #12
 800096c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800096e:	f04f 33ff 	mov.w	r3, #4294967295
 8000972:	e009      	b.n	8000988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000974:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <_sbrk+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800097a:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	4a05      	ldr	r2, [pc, #20]	@ (8000998 <_sbrk+0x64>)
 8000984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000986:	68fb      	ldr	r3, [r7, #12]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20020000 	.word	0x20020000
 8000994:	00000400 	.word	0x00000400
 8000998:	200000c0 	.word	0x200000c0
 800099c:	20000408 	.word	0x20000408

080009a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <SystemInit+0x20>)
 80009a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009aa:	4a05      	ldr	r2, [pc, #20]	@ (80009c0 <SystemInit+0x20>)
 80009ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009c8:	f7ff ffea 	bl	80009a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009cc:	480c      	ldr	r0, [pc, #48]	@ (8000a00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ce:	490d      	ldr	r1, [pc, #52]	@ (8000a04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a10 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009f2:	f003 f96f 	bl	8003cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009f6:	f7ff fdf1 	bl	80005dc <main>
  bx  lr    
 80009fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a08:	080046a4 	.word	0x080046a4
  ldr r2, =_sbss
 8000a0c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a10:	20000404 	.word	0x20000404

08000a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC_IRQHandler>

08000a16 <delayIsRunning>:
 * @brief Checks whether the delay is running or jot
 * @param delay: Pointer to the delay
 * @retval Boolean with the value of "running"
 * @author Juan Pablo Touron
 * */
static bool_t delayIsRunning(delay_t* delay){
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
	return delay->running;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	7a1b      	ldrb	r3, [r3, #8]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <delayInit>:
 * @param delay: Pointer to the delay
 * @param duration: Duration of the delay
 * @retval None
 * @author Juan Pablo Touron
 * */
void delayInit(delay_t* delay, tick_t duration){
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	6039      	str	r1, [r7, #0]
	delay->duration = duration;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	683a      	ldr	r2, [r7, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	721a      	strb	r2, [r3, #8]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <delayRead>:
 * @brief Checks whether the delay has ended or not. If not running, it starts the delay
 * @param delay: Pointer to the delay
 * @retval Boolean with the state of the delay (running -> true, not running -> false)
 * @author Juan Pablo Touron
 * */
bool_t delayRead(delay_t* delay){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	if (delayIsRunning(delay)){
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ffdc 	bl	8000a16 <delayIsRunning>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d00e      	beq.n	8000a82 <delayRead+0x32>
		if ((HAL_GetTick() - delay->startTime) >= delay->duration){
 8000a64:	f000 fdc6 	bl	80015f4 <HAL_GetTick>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	1ad2      	subs	r2, r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d30c      	bcc.n	8000a92 <delayRead+0x42>
			delay->running = false;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	721a      	strb	r2, [r3, #8]
			return true;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e008      	b.n	8000a94 <delayRead+0x44>
		}
	}
	else{
		delay->startTime = HAL_GetTick();
 8000a82:	f000 fdb7 	bl	80015f4 <HAL_GetTick>
 8000a86:	4602      	mov	r2, r0
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	721a      	strb	r2, [r3, #8]
	}
	return false;
 8000a92:	2300      	movs	r3, #0
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <enqueue>:
uint16_t buffer[MAX_BUFFER];
int head = 0;
int tail = 0;

//Agrego un valor al buffer
int enqueue(uint16_t value) {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	80fb      	strh	r3, [r7, #6]
    int next_tail = (tail + 1) % MAX_BUFFER;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	@ (8000af4 <enqueue+0x58>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	4a12      	ldr	r2, [pc, #72]	@ (8000af8 <enqueue+0x5c>)
 8000aae:	fb82 1203 	smull	r1, r2, r2, r3
 8000ab2:	1151      	asrs	r1, r2, #5
 8000ab4:	17da      	asrs	r2, r3, #31
 8000ab6:	1a8a      	subs	r2, r1, r2
 8000ab8:	2164      	movs	r1, #100	@ 0x64
 8000aba:	fb01 f202 	mul.w	r2, r1, r2
 8000abe:	1a9b      	subs	r3, r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]
    if (next_tail == head) {
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <enqueue+0x60>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d102      	bne.n	8000ad2 <enqueue+0x36>
        // Buffer full
        return -1;
 8000acc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad0:	e009      	b.n	8000ae6 <enqueue+0x4a>
    }
    buffer[tail] = value;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <enqueue+0x58>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	490a      	ldr	r1, [pc, #40]	@ (8000b00 <enqueue+0x64>)
 8000ad8:	88fa      	ldrh	r2, [r7, #6]
 8000ada:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    tail = next_tail;
 8000ade:	4a05      	ldr	r2, [pc, #20]	@ (8000af4 <enqueue+0x58>)
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	6013      	str	r3, [r2, #0]
    return 0;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	2000021c 	.word	0x2000021c
 8000af8:	51eb851f 	.word	0x51eb851f
 8000afc:	20000218 	.word	0x20000218
 8000b00:	20000150 	.word	0x20000150

08000b04 <pop>:

// Saco un valor de la fila
int pop(void) {
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
    if (head == tail) {
 8000b0a:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <pop+0x50>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <pop+0x54>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d102      	bne.n	8000b1c <pop+0x18>
        // Buffer empty
        return -1;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1a:	e015      	b.n	8000b48 <pop+0x44>
    }
    uint16_t val = buffer[head];
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b54 <pop+0x50>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0e      	ldr	r2, [pc, #56]	@ (8000b5c <pop+0x58>)
 8000b22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b26:	80fb      	strh	r3, [r7, #6]
    head = (head + 1) % MAX_BUFFER;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <pop+0x50>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	1c5a      	adds	r2, r3, #1
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <pop+0x5c>)
 8000b30:	fb83 1302 	smull	r1, r3, r3, r2
 8000b34:	1159      	asrs	r1, r3, #5
 8000b36:	17d3      	asrs	r3, r2, #31
 8000b38:	1acb      	subs	r3, r1, r3
 8000b3a:	2164      	movs	r1, #100	@ 0x64
 8000b3c:	fb01 f303 	mul.w	r3, r1, r3
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	4a04      	ldr	r2, [pc, #16]	@ (8000b54 <pop+0x50>)
 8000b44:	6013      	str	r3, [r2, #0]
    return val;
 8000b46:	88fb      	ldrh	r3, [r7, #6]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	20000218 	.word	0x20000218
 8000b58:	2000021c 	.word	0x2000021c
 8000b5c:	20000150 	.word	0x20000150
 8000b60:	51eb851f 	.word	0x51eb851f

08000b64 <peek>:

// Obtengo un valor de la fila
int peek(uint16_t* value) {
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
    if (head == tail) {
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <peek+0x38>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <peek+0x3c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d102      	bne.n	8000b7e <peek+0x1a>
        return -1; // empty
 8000b78:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7c:	e007      	b.n	8000b8e <peek+0x2a>
    }
    *value = buffer[head];
 8000b7e:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <peek+0x38>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a08      	ldr	r2, [pc, #32]	@ (8000ba4 <peek+0x40>)
 8000b84:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	801a      	strh	r2, [r3, #0]
    return 0;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000218 	.word	0x20000218
 8000ba0:	2000021c 	.word	0x2000021c
 8000ba4:	20000150 	.word	0x20000150

08000ba8 <menuInit>:


static void menuInit(){
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
	menu = SHOWTIME_M;
 8000bac:	4b03      	ldr	r3, [pc, #12]	@ (8000bbc <menuInit+0x14>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	200000c5 	.word	0x200000c5

08000bc0 <menuUpdate>:

static void menuUpdate(uint16_t button){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
	showOptions();
 8000bca:	f000 f985 	bl	8000ed8 <showOptions>
	switch(menu){
 8000bce:	4b2d      	ldr	r3, [pc, #180]	@ (8000c84 <menuUpdate+0xc4>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d034      	beq.n	8000c40 <menuUpdate+0x80>
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	dc49      	bgt.n	8000c6e <menuUpdate+0xae>
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d002      	beq.n	8000be4 <menuUpdate+0x24>
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d017      	beq.n	8000c12 <menuUpdate+0x52>
				}
			}
		}
		break;
	default:
		break;
 8000be2:	e044      	b.n	8000c6e <menuUpdate+0xae>
		if (button == rightButton){
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	2b40      	cmp	r3, #64	@ 0x40
 8000be8:	d103      	bne.n	8000bf2 <menuUpdate+0x32>
			menu = SETTIME_M;
 8000bea:	4b26      	ldr	r3, [pc, #152]	@ (8000c84 <menuUpdate+0xc4>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	701a      	strb	r2, [r3, #0]
		break;
 8000bf0:	e03f      	b.n	8000c72 <menuUpdate+0xb2>
			if (button == leftButton){
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000bf8:	d103      	bne.n	8000c02 <menuUpdate+0x42>
				menu = SETALARM_M;
 8000bfa:	4b22      	ldr	r3, [pc, #136]	@ (8000c84 <menuUpdate+0xc4>)
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	701a      	strb	r2, [r3, #0]
		break;
 8000c00:	e037      	b.n	8000c72 <menuUpdate+0xb2>
				if (button == enterButton){
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c08:	d133      	bne.n	8000c72 <menuUpdate+0xb2>
					app = SHOWTIME;
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c88 <menuUpdate+0xc8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
		break;
 8000c10:	e02f      	b.n	8000c72 <menuUpdate+0xb2>
		if (button == rightButton){
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	2b40      	cmp	r3, #64	@ 0x40
 8000c16:	d103      	bne.n	8000c20 <menuUpdate+0x60>
			menu = SETALARM_M;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <menuUpdate+0xc4>)
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	701a      	strb	r2, [r3, #0]
		break;
 8000c1e:	e02a      	b.n	8000c76 <menuUpdate+0xb6>
			if (button == leftButton){
 8000c20:	88fb      	ldrh	r3, [r7, #6]
 8000c22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c26:	d103      	bne.n	8000c30 <menuUpdate+0x70>
				menu = SHOWTIME_M;
 8000c28:	4b16      	ldr	r3, [pc, #88]	@ (8000c84 <menuUpdate+0xc4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
		break;
 8000c2e:	e022      	b.n	8000c76 <menuUpdate+0xb6>
				if (button == enterButton){
 8000c30:	88fb      	ldrh	r3, [r7, #6]
 8000c32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c36:	d11e      	bne.n	8000c76 <menuUpdate+0xb6>
					app = SETTIME;
 8000c38:	4b13      	ldr	r3, [pc, #76]	@ (8000c88 <menuUpdate+0xc8>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]
		break;
 8000c3e:	e01a      	b.n	8000c76 <menuUpdate+0xb6>
		if (button == rightButton){
 8000c40:	88fb      	ldrh	r3, [r7, #6]
 8000c42:	2b40      	cmp	r3, #64	@ 0x40
 8000c44:	d103      	bne.n	8000c4e <menuUpdate+0x8e>
			menu = SHOWTIME_M;
 8000c46:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <menuUpdate+0xc4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
		break;
 8000c4c:	e015      	b.n	8000c7a <menuUpdate+0xba>
			if (button == leftButton){
 8000c4e:	88fb      	ldrh	r3, [r7, #6]
 8000c50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c54:	d103      	bne.n	8000c5e <menuUpdate+0x9e>
				menu = SETTIME_M;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <menuUpdate+0xc4>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
		break;
 8000c5c:	e00d      	b.n	8000c7a <menuUpdate+0xba>
				if (button == enterButton){
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c64:	d109      	bne.n	8000c7a <menuUpdate+0xba>
					app = SETALARM;
 8000c66:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <menuUpdate+0xc8>)
 8000c68:	2202      	movs	r2, #2
 8000c6a:	701a      	strb	r2, [r3, #0]
		break;
 8000c6c:	e005      	b.n	8000c7a <menuUpdate+0xba>
		break;
 8000c6e:	bf00      	nop
 8000c70:	e004      	b.n	8000c7c <menuUpdate+0xbc>
		break;
 8000c72:	bf00      	nop
 8000c74:	e002      	b.n	8000c7c <menuUpdate+0xbc>
		break;
 8000c76:	bf00      	nop
 8000c78:	e000      	b.n	8000c7c <menuUpdate+0xbc>
		break;
 8000c7a:	bf00      	nop
	}
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200000c5 	.word	0x200000c5
 8000c88:	200000c4 	.word	0x200000c4

08000c8c <appInit>:



void appInit(){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0

	LCD_I2C_Init();
 8000c90:	f000 fa23 	bl	80010da <LCD_I2C_Init>
	HAL_Delay(1000);
 8000c94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c98:	f000 fcb8 	bl	800160c <HAL_Delay>

	LCD_Clear_Write("Bienvenido",0,3);
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	480b      	ldr	r0, [pc, #44]	@ (8000cd0 <appInit+0x44>)
 8000ca2:	f000 fa7b 	bl	800119c <LCD_Clear_Write>
	HAL_Delay(2000);
 8000ca6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000caa:	f000 fcaf 	bl	800160c <HAL_Delay>
	LCD_Clear_Write("",0,0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4808      	ldr	r0, [pc, #32]	@ (8000cd4 <appInit+0x48>)
 8000cb4:	f000 fa72 	bl	800119c <LCD_Clear_Write>
	LCD_Clear_Write("",1,0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2101      	movs	r1, #1
 8000cbc:	4805      	ldr	r0, [pc, #20]	@ (8000cd4 <appInit+0x48>)
 8000cbe:	f000 fa6d 	bl	800119c <LCD_Clear_Write>
	menuInit();
 8000cc2:	f7ff ff71 	bl	8000ba8 <menuInit>
	app = SHOWTIME;
 8000cc6:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <appInit+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	080045cc 	.word	0x080045cc
 8000cd4:	080045d8 	.word	0x080045d8
 8000cd8:	200000c4 	.word	0x200000c4

08000cdc <appUpdate>:

void appUpdate(){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
	uint16_t currentButton;
	if (peek(&currentButton)){
 8000ce2:	1dbb      	adds	r3, r7, #6
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff3d 	bl	8000b64 <peek>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <appUpdate+0x18>
		currentButton = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	80fb      	strh	r3, [r7, #6]
	}
	switch(app){
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d70 <appUpdate+0x94>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d832      	bhi.n	8000d62 <appUpdate+0x86>
 8000cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8000d04 <appUpdate+0x28>)
 8000cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d02:	bf00      	nop
 8000d04:	08000d15 	.word	0x08000d15
 8000d08:	08000d29 	.word	0x08000d29
 8000d0c:	08000d41 	.word	0x08000d41
 8000d10:	08000d59 	.word	0x08000d59
	case SHOWTIME:
		if (currentButton == menuButton){
 8000d14:	88fb      	ldrh	r3, [r7, #6]
 8000d16:	2b80      	cmp	r3, #128	@ 0x80
 8000d18:	d103      	bne.n	8000d22 <appUpdate+0x46>
			app = MENU;
 8000d1a:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <appUpdate+0x94>)
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	701a      	strb	r2, [r3, #0]
		}
		else{
			showTimeMode();
		}
		break;
 8000d20:	e020      	b.n	8000d64 <appUpdate+0x88>
			showTimeMode();
 8000d22:	f000 f827 	bl	8000d74 <showTimeMode>
		break;
 8000d26:	e01d      	b.n	8000d64 <appUpdate+0x88>
	case SETTIME:
		if (currentButton == menuButton){
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	2b80      	cmp	r3, #128	@ 0x80
 8000d2c:	d103      	bne.n	8000d36 <appUpdate+0x5a>
			app = MENU;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <appUpdate+0x94>)
 8000d30:	2203      	movs	r2, #3
 8000d32:	701a      	strb	r2, [r3, #0]
		}
		else{
			setTimeMode(currentButton);
		}
		break;
 8000d34:	e016      	b.n	8000d64 <appUpdate+0x88>
			setTimeMode(currentButton);
 8000d36:	88fb      	ldrh	r3, [r7, #6]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 f855 	bl	8000de8 <setTimeMode>
		break;
 8000d3e:	e011      	b.n	8000d64 <appUpdate+0x88>
	case SETALARM:
		if (currentButton == menuButton){
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	2b80      	cmp	r3, #128	@ 0x80
 8000d44:	d103      	bne.n	8000d4e <appUpdate+0x72>
			app = MENU;
 8000d46:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <appUpdate+0x94>)
 8000d48:	2203      	movs	r2, #3
 8000d4a:	701a      	strb	r2, [r3, #0]
		}
		else{
			setAlarmMode(currentButton);
		}
		break;
 8000d4c:	e00a      	b.n	8000d64 <appUpdate+0x88>
			setAlarmMode(currentButton);
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f885 	bl	8000e60 <setAlarmMode>
		break;
 8000d56:	e005      	b.n	8000d64 <appUpdate+0x88>
	case MENU:
		menuUpdate(currentButton);
 8000d58:	88fb      	ldrh	r3, [r7, #6]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff30 	bl	8000bc0 <menuUpdate>
		break;
 8000d60:	e000      	b.n	8000d64 <appUpdate+0x88>
	default:
		break;
 8000d62:	bf00      	nop
	}
	pop();
 8000d64:	f7ff fece 	bl	8000b04 <pop>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	200000c4 	.word	0x200000c4

08000d74 <showTimeMode>:

static void showTimeMode(){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af02      	add	r7, sp, #8
	  GetTime(&time);
 8000d7a:	4816      	ldr	r0, [pc, #88]	@ (8000dd4 <showTimeMode+0x60>)
 8000d7c:	f000 f910 	bl	8000fa0 <GetTime>


	  sprintf(timetext, "%02d:%02d:%02d",time.Hours, time.Minutes, time.Seconds);
 8000d80:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <showTimeMode+0x60>)
 8000d82:	789b      	ldrb	r3, [r3, #2]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b13      	ldr	r3, [pc, #76]	@ (8000dd4 <showTimeMode+0x60>)
 8000d88:	785b      	ldrb	r3, [r3, #1]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <showTimeMode+0x60>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	460b      	mov	r3, r1
 8000d94:	4910      	ldr	r1, [pc, #64]	@ (8000dd8 <showTimeMode+0x64>)
 8000d96:	4811      	ldr	r0, [pc, #68]	@ (8000ddc <showTimeMode+0x68>)
 8000d98:	f002 ff6c 	bl	8003c74 <siprintf>
	  sprintf(datetext, "%02d/%02d/%04d",time.Date, time.Month, time.Year);
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd4 <showTimeMode+0x60>)
 8000d9e:	791b      	ldrb	r3, [r3, #4]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <showTimeMode+0x60>)
 8000da4:	795b      	ldrb	r3, [r3, #5]
 8000da6:	4619      	mov	r1, r3
 8000da8:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd4 <showTimeMode+0x60>)
 8000daa:	88db      	ldrh	r3, [r3, #6]
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	460b      	mov	r3, r1
 8000db0:	490b      	ldr	r1, [pc, #44]	@ (8000de0 <showTimeMode+0x6c>)
 8000db2:	480c      	ldr	r0, [pc, #48]	@ (8000de4 <showTimeMode+0x70>)
 8000db4:	f002 ff5e 	bl	8003c74 <siprintf>

	  LCD_Clear_Write(timetext,0,4);
 8000db8:	2204      	movs	r2, #4
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4807      	ldr	r0, [pc, #28]	@ (8000ddc <showTimeMode+0x68>)
 8000dbe:	f000 f9ed 	bl	800119c <LCD_Clear_Write>
	  LCD_Clear_Write(datetext,1,3);
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	4807      	ldr	r0, [pc, #28]	@ (8000de4 <showTimeMode+0x70>)
 8000dc8:	f000 f9e8 	bl	800119c <LCD_Clear_Write>
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000148 	.word	0x20000148
 8000dd8:	080045dc 	.word	0x080045dc
 8000ddc:	20000108 	.word	0x20000108
 8000de0:	080045ec 	.word	0x080045ec
 8000de4:	200000c8 	.word	0x200000c8

08000de8 <setTimeMode>:

static void setTimeMode(uint16_t currentButton){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af02      	add	r7, sp, #8
 8000dee:	4603      	mov	r3, r0
 8000df0:	80fb      	strh	r3, [r7, #6]
	  GetTime(&time);
 8000df2:	4816      	ldr	r0, [pc, #88]	@ (8000e4c <setTimeMode+0x64>)
 8000df4:	f000 f8d4 	bl	8000fa0 <GetTime>


	  sprintf(timetext, "%02d:%02d:%02d", time.Seconds, time.Hours, time.Minutes);
 8000df8:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <setTimeMode+0x64>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <setTimeMode+0x64>)
 8000e00:	789b      	ldrb	r3, [r3, #2]
 8000e02:	4619      	mov	r1, r3
 8000e04:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <setTimeMode+0x64>)
 8000e06:	785b      	ldrb	r3, [r3, #1]
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4910      	ldr	r1, [pc, #64]	@ (8000e50 <setTimeMode+0x68>)
 8000e0e:	4811      	ldr	r0, [pc, #68]	@ (8000e54 <setTimeMode+0x6c>)
 8000e10:	f002 ff30 	bl	8003c74 <siprintf>
	  sprintf(datetext, "%02d/%02d/%04d",time.Date, time.Month, time.Year);
 8000e14:	4b0d      	ldr	r3, [pc, #52]	@ (8000e4c <setTimeMode+0x64>)
 8000e16:	791b      	ldrb	r3, [r3, #4]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <setTimeMode+0x64>)
 8000e1c:	795b      	ldrb	r3, [r3, #5]
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4b0a      	ldr	r3, [pc, #40]	@ (8000e4c <setTimeMode+0x64>)
 8000e22:	88db      	ldrh	r3, [r3, #6]
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	460b      	mov	r3, r1
 8000e28:	490b      	ldr	r1, [pc, #44]	@ (8000e58 <setTimeMode+0x70>)
 8000e2a:	480c      	ldr	r0, [pc, #48]	@ (8000e5c <setTimeMode+0x74>)
 8000e2c:	f002 ff22 	bl	8003c74 <siprintf>

	  LCD_Clear_Write(timetext,0,4);
 8000e30:	2204      	movs	r2, #4
 8000e32:	2100      	movs	r1, #0
 8000e34:	4807      	ldr	r0, [pc, #28]	@ (8000e54 <setTimeMode+0x6c>)
 8000e36:	f000 f9b1 	bl	800119c <LCD_Clear_Write>
	  LCD_Clear_Write(datetext,1,3);
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	4807      	ldr	r0, [pc, #28]	@ (8000e5c <setTimeMode+0x74>)
 8000e40:	f000 f9ac 	bl	800119c <LCD_Clear_Write>
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000148 	.word	0x20000148
 8000e50:	080045dc 	.word	0x080045dc
 8000e54:	20000108 	.word	0x20000108
 8000e58:	080045ec 	.word	0x080045ec
 8000e5c:	200000c8 	.word	0x200000c8

08000e60 <setAlarmMode>:

static void setAlarmMode(uint16_t currentButton){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af02      	add	r7, sp, #8
 8000e66:	4603      	mov	r3, r0
 8000e68:	80fb      	strh	r3, [r7, #6]
	  GetTime(&time);
 8000e6a:	4816      	ldr	r0, [pc, #88]	@ (8000ec4 <setAlarmMode+0x64>)
 8000e6c:	f000 f898 	bl	8000fa0 <GetTime>


	  sprintf(timetext, "%02d:%02d:%02d", time.Minutes, time.Seconds, time.Hours);
 8000e70:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <setAlarmMode+0x64>)
 8000e72:	785b      	ldrb	r3, [r3, #1]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <setAlarmMode+0x64>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <setAlarmMode+0x64>)
 8000e7e:	789b      	ldrb	r3, [r3, #2]
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	460b      	mov	r3, r1
 8000e84:	4910      	ldr	r1, [pc, #64]	@ (8000ec8 <setAlarmMode+0x68>)
 8000e86:	4811      	ldr	r0, [pc, #68]	@ (8000ecc <setAlarmMode+0x6c>)
 8000e88:	f002 fef4 	bl	8003c74 <siprintf>
	  sprintf(datetext, "%02d/%02d/%04d",time.Date, time.Month, time.Year);
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <setAlarmMode+0x64>)
 8000e8e:	791b      	ldrb	r3, [r3, #4]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <setAlarmMode+0x64>)
 8000e94:	795b      	ldrb	r3, [r3, #5]
 8000e96:	4619      	mov	r1, r3
 8000e98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <setAlarmMode+0x64>)
 8000e9a:	88db      	ldrh	r3, [r3, #6]
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	490b      	ldr	r1, [pc, #44]	@ (8000ed0 <setAlarmMode+0x70>)
 8000ea2:	480c      	ldr	r0, [pc, #48]	@ (8000ed4 <setAlarmMode+0x74>)
 8000ea4:	f002 fee6 	bl	8003c74 <siprintf>

	  LCD_Clear_Write(timetext,0,4);
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4807      	ldr	r0, [pc, #28]	@ (8000ecc <setAlarmMode+0x6c>)
 8000eae:	f000 f975 	bl	800119c <LCD_Clear_Write>
	  LCD_Clear_Write(datetext,1,3);
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	4807      	ldr	r0, [pc, #28]	@ (8000ed4 <setAlarmMode+0x74>)
 8000eb8:	f000 f970 	bl	800119c <LCD_Clear_Write>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000148 	.word	0x20000148
 8000ec8:	080045dc 	.word	0x080045dc
 8000ecc:	20000108 	.word	0x20000108
 8000ed0:	080045ec 	.word	0x080045ec
 8000ed4:	200000c8 	.word	0x200000c8

08000ed8 <showOptions>:

static void showOptions(){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	switch(menu){
 8000edc:	4b17      	ldr	r3, [pc, #92]	@ (8000f3c <showOptions+0x64>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d01c      	beq.n	8000f1e <showOptions+0x46>
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	dc25      	bgt.n	8000f34 <showOptions+0x5c>
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d002      	beq.n	8000ef2 <showOptions+0x1a>
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d00b      	beq.n	8000f08 <showOptions+0x30>
	case SETALARM_M:
		LCD_Clear_Write("3) Poner",0,4);
		LCD_Clear_Write("alarma",1,5);
		break;
	default:
		break;
 8000ef0:	e020      	b.n	8000f34 <showOptions+0x5c>
		LCD_Clear_Write("1) Ver",0,5);
 8000ef2:	2205      	movs	r2, #5
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4812      	ldr	r0, [pc, #72]	@ (8000f40 <showOptions+0x68>)
 8000ef8:	f000 f950 	bl	800119c <LCD_Clear_Write>
		LCD_Clear_Write("fecha y hora",1,2);
 8000efc:	2202      	movs	r2, #2
 8000efe:	2101      	movs	r1, #1
 8000f00:	4810      	ldr	r0, [pc, #64]	@ (8000f44 <showOptions+0x6c>)
 8000f02:	f000 f94b 	bl	800119c <LCD_Clear_Write>
		break;
 8000f06:	e016      	b.n	8000f36 <showOptions+0x5e>
		LCD_Clear_Write("2) Ajsutar",1,2);
 8000f08:	2202      	movs	r2, #2
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	480e      	ldr	r0, [pc, #56]	@ (8000f48 <showOptions+0x70>)
 8000f0e:	f000 f945 	bl	800119c <LCD_Clear_Write>
		LCD_Clear_Write("fecha y hora",1,2);
 8000f12:	2202      	movs	r2, #2
 8000f14:	2101      	movs	r1, #1
 8000f16:	480b      	ldr	r0, [pc, #44]	@ (8000f44 <showOptions+0x6c>)
 8000f18:	f000 f940 	bl	800119c <LCD_Clear_Write>
		break;
 8000f1c:	e00b      	b.n	8000f36 <showOptions+0x5e>
		LCD_Clear_Write("3) Poner",0,4);
 8000f1e:	2204      	movs	r2, #4
 8000f20:	2100      	movs	r1, #0
 8000f22:	480a      	ldr	r0, [pc, #40]	@ (8000f4c <showOptions+0x74>)
 8000f24:	f000 f93a 	bl	800119c <LCD_Clear_Write>
		LCD_Clear_Write("alarma",1,5);
 8000f28:	2205      	movs	r2, #5
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	4808      	ldr	r0, [pc, #32]	@ (8000f50 <showOptions+0x78>)
 8000f2e:	f000 f935 	bl	800119c <LCD_Clear_Write>
		break;
 8000f32:	e000      	b.n	8000f36 <showOptions+0x5e>
		break;
 8000f34:	bf00      	nop
	}
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200000c5 	.word	0x200000c5
 8000f40:	080045fc 	.word	0x080045fc
 8000f44:	08004604 	.word	0x08004604
 8000f48:	08004614 	.word	0x08004614
 8000f4c:	08004620 	.word	0x08004620
 8000f50:	0800462c 	.word	0x0800462c

08000f54 <buttonPressed>:

void buttonPressed(uint16_t GPIO_Pin){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80fb      	strh	r3, [r7, #6]
	enqueue(GPIO_Pin);
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fd9b 	bl	8000a9c <enqueue>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <BcdToDec>:
 * @brief Includes the header file of this library.
 */
#include "ds3231.h"

/*Convert a BCD-encoded value to decimal. Declared in header file*/
uint8_t BcdToDec(uint8_t val) {
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	71fb      	strb	r3, [r7, #7]
    return ((val >> NIBBLE_SIZE) * 10) + (val & LOW_NIBBLE_MASK);
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	091b      	lsrs	r3, r3, #4
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	461a      	mov	r2, r3
 8000f80:	0092      	lsls	r2, r2, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	4413      	add	r3, r2
 8000f92:	b2db      	uxtb	r3, r3
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <GetTime>:

    I2CMasterTransmit(DS3231_ADDR, buffer, BUFFER_SIZE);
}

/*Gets the time from the DS3231 RTC. Declared in header file*/
void GetTime(DS3231_DateTime *time) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
    uint8_t buffer[BUFFER_SIZE-1];
    I2CReadMemory(START_REGISTER,DS3231_ADDR,buffer,BUFFER_SIZE-1);
 8000fa8:	f107 0208 	add.w	r2, r7, #8
 8000fac:	2307      	movs	r3, #7
 8000fae:	21d0      	movs	r1, #208	@ 0xd0
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f000 fa9b 	bl	80014ec <I2CReadMemory>

    time->Seconds = BcdToDec(buffer[0]);
 8000fb6:	7a3b      	ldrb	r3, [r7, #8]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ffd8 	bl	8000f6e <BcdToDec>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	701a      	strb	r2, [r3, #0]
    time->Minutes = BcdToDec(buffer[1]);
 8000fc6:	7a7b      	ldrb	r3, [r7, #9]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ffd0 	bl	8000f6e <BcdToDec>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	705a      	strb	r2, [r3, #1]
    time->Hours   = BcdToDec(buffer[2] & MODE24_MASK);
 8000fd6:	7abb      	ldrb	r3, [r7, #10]
 8000fd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff ffc5 	bl	8000f6e <BcdToDec>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	709a      	strb	r2, [r3, #2]
    time->Day     = BcdToDec(buffer[3]);
 8000fec:	7afb      	ldrb	r3, [r7, #11]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ffbd 	bl	8000f6e <BcdToDec>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	70da      	strb	r2, [r3, #3]
    time->Date    = BcdToDec(buffer[4]);
 8000ffc:	7b3b      	ldrb	r3, [r7, #12]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ffb5 	bl	8000f6e <BcdToDec>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	711a      	strb	r2, [r3, #4]
    time->Month   = BcdToDec(buffer[5] & CENTURY_MASK);
 800100c:	7b7b      	ldrb	r3, [r7, #13]
 800100e:	f003 031f 	and.w	r3, r3, #31
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ffaa 	bl	8000f6e <BcdToDec>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	715a      	strb	r2, [r3, #5]
    time->Year    = YEAR_CORRECTION + BcdToDec(buffer[6]);
 8001022:	7bbb      	ldrb	r3, [r7, #14]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ffa2 	bl	8000f6e <BcdToDec>
 800102a:	4603      	mov	r3, r0
 800102c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001030:	b29a      	uxth	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	80da      	strh	r2, [r3, #6]
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <LCD_I2C_Send>:
 * @brief Includes the header file of this library.
 */
#include "lcd_i2c.h"

/*Send one 8-bit byte to the display. Declared in header file*/
void LCD_I2C_Send(uint8_t data, uint8_t rs) {
 800103e:	b580      	push	{r7, lr}
 8001040:	b084      	sub	sp, #16
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	460a      	mov	r2, r1
 8001048:	71fb      	strb	r3, [r7, #7]
 800104a:	4613      	mov	r3, r2
 800104c:	71bb      	strb	r3, [r7, #6]
    uint8_t data_u, data_l;
    uint8_t data_t[BYTES_PER_BYTE];
    data_u = (data&HIGH_NIBBLE_MASK)|rs|BL; /* masking the upper nibble and adding the control command */
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	f023 030f 	bic.w	r3, r3, #15
 8001056:	b25a      	sxtb	r2, r3
 8001058:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800105c:	4313      	orrs	r3, r2
 800105e:	b25b      	sxtb	r3, r3
 8001060:	f043 0308 	orr.w	r3, r3, #8
 8001064:	b25b      	sxtb	r3, r3
 8001066:	73fb      	strb	r3, [r7, #15]
    data_l = ((data<<4)&HIGH_NIBBLE_MASK)|rs|BL;  /* masking the lower nibble and adding the control command */
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	011b      	lsls	r3, r3, #4
 800106e:	b25a      	sxtb	r2, r3
 8001070:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001074:	4313      	orrs	r3, r2
 8001076:	b25b      	sxtb	r3, r3
 8001078:	f043 0308 	orr.w	r3, r3, #8
 800107c:	b25b      	sxtb	r3, r3
 800107e:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u|EN;  /* include the Enable pulse */
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	f043 0304 	orr.w	r3, r3, #4
 8001086:	b2db      	uxtb	r3, r3
 8001088:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u & ~EN;  /* Turn off the Enable pulse */
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	f023 0304 	bic.w	r3, r3, #4
 8001090:	b2db      	uxtb	r3, r3
 8001092:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l|EN;  /* include the Enable pulse */
 8001094:	7bbb      	ldrb	r3, [r7, #14]
 8001096:	f043 0304 	orr.w	r3, r3, #4
 800109a:	b2db      	uxtb	r3, r3
 800109c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l & ~EN;  /* Turn off the Enable pulse */
 800109e:	7bbb      	ldrb	r3, [r7, #14]
 80010a0:	f023 0304 	bic.w	r3, r3, #4
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	72fb      	strb	r3, [r7, #11]
    I2CMasterTransmit(LCD_ADDR, data_t, BYTES_PER_BYTE);
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	2204      	movs	r2, #4
 80010ae:	4619      	mov	r1, r3
 80010b0:	204e      	movs	r0, #78	@ 0x4e
 80010b2:	f000 fa03 	bl	80014bc <I2CMasterTransmit>
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <LCD_I2C_SendControlByte>:

/*Send one 8-bit instruction byte to the display. Declared in header file*/
void LCD_I2C_SendControlByte(uint8_t data) {
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	71fb      	strb	r3, [r7, #7]
    LCD_I2C_Send(data,0);
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ffb6 	bl	800103e <LCD_I2C_Send>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <LCD_I2C_Init>:

/*Initializes the LCD. Declared in header file*/
void LCD_I2C_Init() {
 80010da:	b580      	push	{r7, lr}
 80010dc:	af00      	add	r7, sp, #0
    I2CDelay(50);  // Wait for power-up (adjust if needed)
 80010de:	2032      	movs	r0, #50	@ 0x32
 80010e0:	f000 f9e0 	bl	80014a4 <I2CDelay>

    // Initialization sequence (adapted for 4-bit mode)
    LCD_I2C_SendControlByte(0x30);  // Function set: 8-bit mode (initialization)
 80010e4:	2030      	movs	r0, #48	@ 0x30
 80010e6:	f7ff ffea 	bl	80010be <LCD_I2C_SendControlByte>
    I2CDelay(5);
 80010ea:	2005      	movs	r0, #5
 80010ec:	f000 f9da 	bl	80014a4 <I2CDelay>
    LCD_I2C_SendControlByte(0x30);  // Function set: 8-bit mode (initialization)
 80010f0:	2030      	movs	r0, #48	@ 0x30
 80010f2:	f7ff ffe4 	bl	80010be <LCD_I2C_SendControlByte>
    I2CDelay(1);
 80010f6:	2001      	movs	r0, #1
 80010f8:	f000 f9d4 	bl	80014a4 <I2CDelay>
    LCD_I2C_SendControlByte(0x30);  // Function set: 8-bit mode (initialization)
 80010fc:	2030      	movs	r0, #48	@ 0x30
 80010fe:	f7ff ffde 	bl	80010be <LCD_I2C_SendControlByte>
    I2CDelay(1);
 8001102:	2001      	movs	r0, #1
 8001104:	f000 f9ce 	bl	80014a4 <I2CDelay>
    LCD_I2C_SendControlByte(0x20);  // Function set: 4-bit mode
 8001108:	2020      	movs	r0, #32
 800110a:	f7ff ffd8 	bl	80010be <LCD_I2C_SendControlByte>
    I2CDelay(1);
 800110e:	2001      	movs	r0, #1
 8001110:	f000 f9c8 	bl	80014a4 <I2CDelay>

    LCD_I2C_SendControlByte(0x20);  // Function set: 4-bit, 2 lines, 5x8 font
 8001114:	2020      	movs	r0, #32
 8001116:	f7ff ffd2 	bl	80010be <LCD_I2C_SendControlByte>
    LCD_I2C_SendControlByte(0x80);
 800111a:	2080      	movs	r0, #128	@ 0x80
 800111c:	f7ff ffcf 	bl	80010be <LCD_I2C_SendControlByte>
    I2CDelay(1);
 8001120:	2001      	movs	r0, #1
 8001122:	f000 f9bf 	bl	80014a4 <I2CDelay>

    LCD_I2C_SendControlByte(0x00);  // Display control: Display off, Cursor off, Blink off
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff ffc9 	bl	80010be <LCD_I2C_SendControlByte>
    LCD_I2C_SendControlByte(0xF0);
 800112c:	20f0      	movs	r0, #240	@ 0xf0
 800112e:	f7ff ffc6 	bl	80010be <LCD_I2C_SendControlByte>
    I2CDelay(1);
 8001132:	2001      	movs	r0, #1
 8001134:	f000 f9b6 	bl	80014a4 <I2CDelay>

    LCD_I2C_SendControlByte(0x00);  // Entry mode set: Increment, no shift
 8001138:	2000      	movs	r0, #0
 800113a:	f7ff ffc0 	bl	80010be <LCD_I2C_SendControlByte>
    LCD_I2C_SendControlByte(0x60);
 800113e:	2060      	movs	r0, #96	@ 0x60
 8001140:	f7ff ffbd 	bl	80010be <LCD_I2C_SendControlByte>
    I2CDelay(1);
 8001144:	2001      	movs	r0, #1
 8001146:	f000 f9ad 	bl	80014a4 <I2CDelay>

    LCD_I2C_Clear(); // Clear the display
 800114a:	f000 f802 	bl	8001152 <LCD_I2C_Clear>
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}

08001152 <LCD_I2C_Clear>:

/*Clears the display. Declared in header file*/
void LCD_I2C_Clear() {
 8001152:	b580      	push	{r7, lr}
 8001154:	af00      	add	r7, sp, #0
    LCD_I2C_SendControlByte(0x00); // Clear display command
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff ffb1 	bl	80010be <LCD_I2C_SendControlByte>
    LCD_I2C_SendControlByte(0x10);
 800115c:	2010      	movs	r0, #16
 800115e:	f7ff ffae 	bl	80010be <LCD_I2C_SendControlByte>
    I2CDelay(20);
 8001162:	2014      	movs	r0, #20
 8001164:	f000 f99e 	bl	80014a4 <I2CDelay>
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <LCD_I2C_WriteString>:

/*Writes a string in the display. Declared in header file*/
void LCD_I2C_WriteString(char *str) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001174:	e008      	b.n	8001188 <LCD_I2C_WriteString+0x1c>
        LCD_I2C_Send(*str, RS);  // Send character with RS=1 (data)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2101      	movs	r1, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff5e 	bl	800103e <LCD_I2C_Send>
        str++;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3301      	adds	r3, #1
 8001186:	607b      	str	r3, [r7, #4]
    while (*str) {
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1f2      	bne.n	8001176 <LCD_I2C_WriteString+0xa>
    }
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <LCD_Clear_Write>:

void LCD_Clear_Write(char *str,uint8_t row, uint8_t col){
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
 80011a8:	4613      	mov	r3, r2
 80011aa:	70bb      	strb	r3, [r7, #2]
	LCD_I2C_SetCursor(row, 0);
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 f813 	bl	80011dc <LCD_I2C_SetCursor>
	LCD_I2C_WriteString("                ");
 80011b6:	4808      	ldr	r0, [pc, #32]	@ (80011d8 <LCD_Clear_Write+0x3c>)
 80011b8:	f7ff ffd8 	bl	800116c <LCD_I2C_WriteString>
	LCD_I2C_SetCursor(row,col);
 80011bc:	78ba      	ldrb	r2, [r7, #2]
 80011be:	78fb      	ldrb	r3, [r7, #3]
 80011c0:	4611      	mov	r1, r2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f80a 	bl	80011dc <LCD_I2C_SetCursor>
	LCD_I2C_WriteString(str);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ffcf 	bl	800116c <LCD_I2C_WriteString>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	08004634 	.word	0x08004634

080011dc <LCD_I2C_SetCursor>:

/*Sets the cursor. Declared in header file*/
void LCD_I2C_SetCursor(uint8_t row, uint8_t col) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	460a      	mov	r2, r1
 80011e6:	71fb      	strb	r3, [r7, #7]
 80011e8:	4613      	mov	r3, r2
 80011ea:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    if (row == 0) {
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d102      	bne.n	80011f8 <LCD_I2C_SetCursor+0x1c>
        address = 0x00 + col;
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	73fb      	strb	r3, [r7, #15]
 80011f6:	e002      	b.n	80011fe <LCD_I2C_SetCursor+0x22>
    } else {
        address = 0x40 + col;
 80011f8:	79bb      	ldrb	r3, [r7, #6]
 80011fa:	3340      	adds	r3, #64	@ 0x40
 80011fc:	73fb      	strb	r3, [r7, #15]
    }
    LCD_I2C_SendControlByte(0x80|(address)); // Set DDRAM address command
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001204:	b2db      	uxtb	r3, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff59 	bl	80010be <LCD_I2C_SendControlByte>
}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <buttonReset>:
static buttonDebounce buttons[NUMBER_OF_BUTTONS];
static tick_t pos = 0;

static void buttonReset(tick_t buttonNumber);

static void buttonReset(tick_t buttonNumber){
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	buttons[buttonNumber].pressed = false;
 800121c:	4a09      	ldr	r2, [pc, #36]	@ (8001244 <buttonReset+0x30>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	4413      	add	r3, r2
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
	delayInit(&(buttons[buttonNumber].delay),DELAY);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	011b      	lsls	r3, r3, #4
 800122c:	4a05      	ldr	r2, [pc, #20]	@ (8001244 <buttonReset+0x30>)
 800122e:	4413      	add	r3, r2
 8001230:	3304      	adds	r3, #4
 8001232:	2128      	movs	r1, #40	@ 0x28
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fbfa 	bl	8000a2e <delayInit>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000220 	.word	0x20000220

08001248 <buttonsReset>:

static void buttonsReset(void){
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
	for (tick_t i = 0;i<NUMBER_OF_BUTTONS;i++){
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	e005      	b.n	8001260 <buttonsReset+0x18>
		buttonReset(i);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff ffdd 	bl	8001214 <buttonReset>
	for (tick_t i = 0;i<NUMBER_OF_BUTTONS;i++){
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3301      	adds	r3, #1
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d9f6      	bls.n	8001254 <buttonsReset+0xc>
	}
}
 8001266:	bf00      	nop
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <buttonsInit>:



void buttonsInit(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	@ 0x28
 8001274:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	4b29      	ldr	r3, [pc, #164]	@ (8001330 <buttonsInit+0xc0>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a28      	ldr	r2, [pc, #160]	@ (8001330 <buttonsInit+0xc0>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b26      	ldr	r3, [pc, #152]	@ (8001330 <buttonsInit+0xc0>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b22      	ldr	r3, [pc, #136]	@ (8001330 <buttonsInit+0xc0>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a21      	ldr	r2, [pc, #132]	@ (8001330 <buttonsInit+0xc0>)
 80012ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001330 <buttonsInit+0xc0>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <buttonsInit+0xc0>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a1a      	ldr	r2, [pc, #104]	@ (8001330 <buttonsInit+0xc0>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <buttonsInit+0xc0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	4b14      	ldr	r3, [pc, #80]	@ (8001330 <buttonsInit+0xc0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	4a13      	ldr	r2, [pc, #76]	@ (8001330 <buttonsInit+0xc0>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ea:	4b11      	ldr	r3, [pc, #68]	@ (8001330 <buttonsInit+0xc0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA6 PA7 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80012f6:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80012fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012fc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001302:	2301      	movs	r3, #1
 8001304:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4809      	ldr	r0, [pc, #36]	@ (8001334 <buttonsInit+0xc4>)
 800130e:	f000 fab3 	bl	8001878 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	2017      	movs	r0, #23
 8001318:	f000 fa77 	bl	800180a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800131c:	2017      	movs	r0, #23
 800131e:	f000 fa90 	bl	8001842 <HAL_NVIC_EnableIRQ>

  buttonsReset();
 8001322:	f7ff ff91 	bl	8001248 <buttonsReset>
}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	@ 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	40020000 	.word	0x40020000

08001338 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	80fb      	strh	r3, [r7, #6]
    // Map GPIO_Pin to index
    if (GPIO_Pin == GPIO_PIN_6) pos = 0;
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	2b40      	cmp	r3, #64	@ 0x40
 8001346:	d103      	bne.n	8001350 <HAL_GPIO_EXTI_Callback+0x18>
 8001348:	4b2b      	ldr	r3, [pc, #172]	@ (80013f8 <HAL_GPIO_EXTI_Callback+0xc0>)
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	e015      	b.n	800137c <HAL_GPIO_EXTI_Callback+0x44>
    else if (GPIO_Pin == GPIO_PIN_7) pos = 1;
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	2b80      	cmp	r3, #128	@ 0x80
 8001354:	d103      	bne.n	800135e <HAL_GPIO_EXTI_Callback+0x26>
 8001356:	4b28      	ldr	r3, [pc, #160]	@ (80013f8 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001358:	2201      	movs	r2, #1
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	e00e      	b.n	800137c <HAL_GPIO_EXTI_Callback+0x44>
    else if (GPIO_Pin == GPIO_PIN_8) pos = 2;
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001364:	d103      	bne.n	800136e <HAL_GPIO_EXTI_Callback+0x36>
 8001366:	4b24      	ldr	r3, [pc, #144]	@ (80013f8 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001368:	2202      	movs	r2, #2
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	e006      	b.n	800137c <HAL_GPIO_EXTI_Callback+0x44>
    else if (GPIO_Pin == GPIO_PIN_9) pos = 3;
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001374:	d13c      	bne.n	80013f0 <HAL_GPIO_EXTI_Callback+0xb8>
 8001376:	4b20      	ldr	r3, [pc, #128]	@ (80013f8 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001378:	2203      	movs	r2, #3
 800137a:	601a      	str	r2, [r3, #0]
    else return; // Not one of our buttons

    // If button not already marked as pressed, start debounce timer
    if (!buttons[pos].pressed) {
 800137c:	4b1e      	ldr	r3, [pc, #120]	@ (80013f8 <HAL_GPIO_EXTI_Callback+0xc0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a1e      	ldr	r2, [pc, #120]	@ (80013fc <HAL_GPIO_EXTI_Callback+0xc4>)
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	4413      	add	r3, r2
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	f083 0301 	eor.w	r3, r3, #1
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d010      	beq.n	80013b4 <HAL_GPIO_EXTI_Callback+0x7c>
        buttons[pos].pressed = true; // Prevent re-triggering
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a19      	ldr	r2, [pc, #100]	@ (80013fc <HAL_GPIO_EXTI_Callback+0xc4>)
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	4413      	add	r3, r2
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
        delayRead(&(buttons[pos].delay)); // Start 20-50ms debounce timer
 80013a0:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <HAL_GPIO_EXTI_Callback+0xc0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	4a15      	ldr	r2, [pc, #84]	@ (80013fc <HAL_GPIO_EXTI_Callback+0xc4>)
 80013a8:	4413      	add	r3, r2
 80013aa:	3304      	adds	r3, #4
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fb4f 	bl	8000a50 <delayRead>
        return; // Wait for debounce to expire
 80013b2:	e01e      	b.n	80013f2 <HAL_GPIO_EXTI_Callback+0xba>
    }

    // When the callback fires again, check if debounce time elapsed
    if (delayRead(&(buttons[pos].delay))) {
 80013b4:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <HAL_GPIO_EXTI_Callback+0xc0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	011b      	lsls	r3, r3, #4
 80013ba:	4a10      	ldr	r2, [pc, #64]	@ (80013fc <HAL_GPIO_EXTI_Callback+0xc4>)
 80013bc:	4413      	add	r3, r2
 80013be:	3304      	adds	r3, #4
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fb45 	bl	8000a50 <delayRead>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d012      	beq.n	80013f2 <HAL_GPIO_EXTI_Callback+0xba>
        // Example: assuming all on GPIOA
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET) {
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	4619      	mov	r1, r3
 80013d0:	480b      	ldr	r0, [pc, #44]	@ (8001400 <HAL_GPIO_EXTI_Callback+0xc8>)
 80013d2:	f000 fbe5 	bl	8001ba0 <HAL_GPIO_ReadPin>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d103      	bne.n	80013e4 <HAL_GPIO_EXTI_Callback+0xac>
            buttonPressed(GPIO_Pin); // Confirmed button press
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fdb8 	bl	8000f54 <buttonPressed>
        }

        // Reset for next event
        buttonReset(pos);
 80013e4:	4b04      	ldr	r3, [pc, #16]	@ (80013f8 <HAL_GPIO_EXTI_Callback+0xc0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff13 	bl	8001214 <buttonReset>
 80013ee:	e000      	b.n	80013f2 <HAL_GPIO_EXTI_Callback+0xba>
    else return; // Not one of our buttons
 80013f0:	bf00      	nop
    }
}
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000260 	.word	0x20000260
 80013fc:	20000220 	.word	0x20000220
 8001400:	40020000 	.word	0x40020000

08001404 <I2CInit>:

/* Declaration of the I2C external handle. Declared in the main */
I2C_HandleTypeDef hi2c1;

/*Initialize the I2C protocol handle. Declared in header file*/
void I2CInit(){
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0

  __HAL_RCC_I2C1_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	4b21      	ldr	r3, [pc, #132]	@ (8001494 <I2CInit+0x90>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001412:	4a20      	ldr	r2, [pc, #128]	@ (8001494 <I2CInit+0x90>)
 8001414:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001418:	6413      	str	r3, [r2, #64]	@ 0x40
 800141a:	4b1e      	ldr	r3, [pc, #120]	@ (8001494 <I2CInit+0x90>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <I2CInit+0x90>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	4a19      	ldr	r2, [pc, #100]	@ (8001494 <I2CInit+0x90>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	@ 0x30
 8001436:	4b17      	ldr	r3, [pc, #92]	@ (8001494 <I2CInit+0x90>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]
  hi2c1.Instance = I2C1;
 8001442:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <I2CInit+0x94>)
 8001444:	4a15      	ldr	r2, [pc, #84]	@ (800149c <I2CInit+0x98>)
 8001446:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001448:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <I2CInit+0x94>)
 800144a:	4a15      	ldr	r2, [pc, #84]	@ (80014a0 <I2CInit+0x9c>)
 800144c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800144e:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <I2CInit+0x94>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001454:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <I2CInit+0x94>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800145a:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <I2CInit+0x94>)
 800145c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001460:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001462:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <I2CInit+0x94>)
 8001464:	2200      	movs	r2, #0
 8001466:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001468:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <I2CInit+0x94>)
 800146a:	2200      	movs	r2, #0
 800146c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800146e:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <I2CInit+0x94>)
 8001470:	2200      	movs	r2, #0
 8001472:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001474:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <I2CInit+0x94>)
 8001476:	2200      	movs	r2, #0
 8001478:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800147a:	4807      	ldr	r0, [pc, #28]	@ (8001498 <I2CInit+0x94>)
 800147c:	f000 fbc0 	bl	8001c00 <HAL_I2C_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <I2CInit+0x86>
  {
    Error_Handler();
 8001486:	f7ff f955 	bl	8000734 <Error_Handler>
  }
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800
 8001498:	20000264 	.word	0x20000264
 800149c:	40005400 	.word	0x40005400
 80014a0:	000186a0 	.word	0x000186a0

080014a4 <I2CDelay>:

/*Delays the app for delayTime miliseconds. Declared in header file*/
void I2CDelay(uint32_t delayTime){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	HAL_Delay(delayTime);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 f8ad 	bl	800160c <HAL_Delay>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <I2CMasterTransmit>:

/*Writes the data buffer to the slave. Declared in header file*/
void I2CMasterTransmit(uint16_t devAddr, uint8_t *buffer, uint16_t size){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af02      	add	r7, sp, #8
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	80fb      	strh	r3, [r7, #6]
 80014c8:	4613      	mov	r3, r2
 80014ca:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, devAddr, buffer, size, TIMEOUT);
 80014cc:	88bb      	ldrh	r3, [r7, #4]
 80014ce:	88f9      	ldrh	r1, [r7, #6]
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295
 80014d4:	9200      	str	r2, [sp, #0]
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	4803      	ldr	r0, [pc, #12]	@ (80014e8 <I2CMasterTransmit+0x2c>)
 80014da:	f000 fcd5 	bl	8001e88 <HAL_I2C_Master_Transmit>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000264 	.word	0x20000264

080014ec <I2CReadMemory>:

/*Reads specific memory registers from a given IC. Declared in header file*/
void I2CReadMemory(uint16_t startReg, uint16_t devAddr, uint8_t *buffer, uint16_t size){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af04      	add	r7, sp, #16
 80014f2:	60ba      	str	r2, [r7, #8]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4603      	mov	r3, r0
 80014f8:	81fb      	strh	r3, [r7, #14]
 80014fa:	460b      	mov	r3, r1
 80014fc:	81bb      	strh	r3, [r7, #12]
 80014fe:	4613      	mov	r3, r2
 8001500:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, devAddr, startReg, REG_SIZE, buffer, size, TIMEOUT);
 8001502:	89fa      	ldrh	r2, [r7, #14]
 8001504:	89b9      	ldrh	r1, [r7, #12]
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
 800150a:	9302      	str	r3, [sp, #8]
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	9301      	str	r3, [sp, #4]
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2301      	movs	r3, #1
 8001516:	4803      	ldr	r0, [pc, #12]	@ (8001524 <I2CReadMemory+0x38>)
 8001518:	f000 fdb4 	bl	8002084 <HAL_I2C_Mem_Read>
}
 800151c:	bf00      	nop
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000264 	.word	0x20000264

08001528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800152c:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0d      	ldr	r2, [pc, #52]	@ (8001568 <HAL_Init+0x40>)
 8001532:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001538:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <HAL_Init+0x40>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <HAL_Init+0x40>)
 800153e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001544:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <HAL_Init+0x40>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a07      	ldr	r2, [pc, #28]	@ (8001568 <HAL_Init+0x40>)
 800154a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800154e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 f94f 	bl	80017f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001556:	200f      	movs	r0, #15
 8001558:	f000 f808 	bl	800156c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800155c:	f7ff f8f0 	bl	8000740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023c00 	.word	0x40023c00

0800156c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001574:	4b12      	ldr	r3, [pc, #72]	@ (80015c0 <HAL_InitTick+0x54>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <HAL_InitTick+0x58>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001582:	fbb3 f3f1 	udiv	r3, r3, r1
 8001586:	fbb2 f3f3 	udiv	r3, r2, r3
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f967 	bl	800185e <HAL_SYSTICK_Config>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e00e      	b.n	80015b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b0f      	cmp	r3, #15
 800159e:	d80a      	bhi.n	80015b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a0:	2200      	movs	r2, #0
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f000 f92f 	bl	800180a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ac:	4a06      	ldr	r2, [pc, #24]	@ (80015c8 <HAL_InitTick+0x5c>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e000      	b.n	80015b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20000008 	.word	0x20000008
 80015c8:	20000004 	.word	0x20000004

080015cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <HAL_IncTick+0x20>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <HAL_IncTick+0x24>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	4a04      	ldr	r2, [pc, #16]	@ (80015f0 <HAL_IncTick+0x24>)
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20000008 	.word	0x20000008
 80015f0:	200002b8 	.word	0x200002b8

080015f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return uwTick;
 80015f8:	4b03      	ldr	r3, [pc, #12]	@ (8001608 <HAL_GetTick+0x14>)
 80015fa:	681b      	ldr	r3, [r3, #0]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	200002b8 	.word	0x200002b8

0800160c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001614:	f7ff ffee 	bl	80015f4 <HAL_GetTick>
 8001618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001624:	d005      	beq.n	8001632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001626:	4b0a      	ldr	r3, [pc, #40]	@ (8001650 <HAL_Delay+0x44>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4413      	add	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001632:	bf00      	nop
 8001634:	f7ff ffde 	bl	80015f4 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	429a      	cmp	r2, r3
 8001642:	d8f7      	bhi.n	8001634 <HAL_Delay+0x28>
  {
  }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000008 	.word	0x20000008

08001654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001664:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001670:	4013      	ands	r3, r2
 8001672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800167c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001680:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001686:	4a04      	ldr	r2, [pc, #16]	@ (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	60d3      	str	r3, [r2, #12]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a0:	4b04      	ldr	r3, [pc, #16]	@ (80016b4 <__NVIC_GetPriorityGrouping+0x18>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	f003 0307 	and.w	r3, r3, #7
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	db0b      	blt.n	80016e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	f003 021f 	and.w	r2, r3, #31
 80016d0:	4907      	ldr	r1, [pc, #28]	@ (80016f0 <__NVIC_EnableIRQ+0x38>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	2001      	movs	r0, #1
 80016da:	fa00 f202 	lsl.w	r2, r0, r2
 80016de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000e100 	.word	0xe000e100

080016f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	6039      	str	r1, [r7, #0]
 80016fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001704:	2b00      	cmp	r3, #0
 8001706:	db0a      	blt.n	800171e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	b2da      	uxtb	r2, r3
 800170c:	490c      	ldr	r1, [pc, #48]	@ (8001740 <__NVIC_SetPriority+0x4c>)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	0112      	lsls	r2, r2, #4
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	440b      	add	r3, r1
 8001718:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800171c:	e00a      	b.n	8001734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4908      	ldr	r1, [pc, #32]	@ (8001744 <__NVIC_SetPriority+0x50>)
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	3b04      	subs	r3, #4
 800172c:	0112      	lsls	r2, r2, #4
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	440b      	add	r3, r1
 8001732:	761a      	strb	r2, [r3, #24]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000e100 	.word	0xe000e100
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001748:	b480      	push	{r7}
 800174a:	b089      	sub	sp, #36	@ 0x24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f1c3 0307 	rsb	r3, r3, #7
 8001762:	2b04      	cmp	r3, #4
 8001764:	bf28      	it	cs
 8001766:	2304      	movcs	r3, #4
 8001768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3304      	adds	r3, #4
 800176e:	2b06      	cmp	r3, #6
 8001770:	d902      	bls.n	8001778 <NVIC_EncodePriority+0x30>
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3b03      	subs	r3, #3
 8001776:	e000      	b.n	800177a <NVIC_EncodePriority+0x32>
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	f04f 32ff 	mov.w	r2, #4294967295
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43da      	mvns	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	401a      	ands	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001790:	f04f 31ff 	mov.w	r1, #4294967295
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	43d9      	mvns	r1, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	4313      	orrs	r3, r2
         );
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3724      	adds	r7, #36	@ 0x24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017c0:	d301      	bcc.n	80017c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017c2:	2301      	movs	r3, #1
 80017c4:	e00f      	b.n	80017e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c6:	4a0a      	ldr	r2, [pc, #40]	@ (80017f0 <SysTick_Config+0x40>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ce:	210f      	movs	r1, #15
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	f7ff ff8e 	bl	80016f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d8:	4b05      	ldr	r3, [pc, #20]	@ (80017f0 <SysTick_Config+0x40>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017de:	4b04      	ldr	r3, [pc, #16]	@ (80017f0 <SysTick_Config+0x40>)
 80017e0:	2207      	movs	r2, #7
 80017e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	e000e010 	.word	0xe000e010

080017f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff ff29 	bl	8001654 <__NVIC_SetPriorityGrouping>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800180a:	b580      	push	{r7, lr}
 800180c:	b086      	sub	sp, #24
 800180e:	af00      	add	r7, sp, #0
 8001810:	4603      	mov	r3, r0
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800181c:	f7ff ff3e 	bl	800169c <__NVIC_GetPriorityGrouping>
 8001820:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	68b9      	ldr	r1, [r7, #8]
 8001826:	6978      	ldr	r0, [r7, #20]
 8001828:	f7ff ff8e 	bl	8001748 <NVIC_EncodePriority>
 800182c:	4602      	mov	r2, r0
 800182e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001832:	4611      	mov	r1, r2
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff5d 	bl	80016f4 <__NVIC_SetPriority>
}
 800183a:	bf00      	nop
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff31 	bl	80016b8 <__NVIC_EnableIRQ>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff ffa2 	bl	80017b0 <SysTick_Config>
 800186c:	4603      	mov	r3, r0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	@ 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	e165      	b.n	8001b60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001894:	2201      	movs	r2, #1
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	f040 8154 	bne.w	8001b5a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d005      	beq.n	80018ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d130      	bne.n	800192c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	68da      	ldr	r2, [r3, #12]
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001900:	2201      	movs	r2, #1
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	091b      	lsrs	r3, r3, #4
 8001916:	f003 0201 	and.w	r2, r3, #1
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b03      	cmp	r3, #3
 8001936:	d017      	beq.n	8001968 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	2203      	movs	r2, #3
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d123      	bne.n	80019bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	08da      	lsrs	r2, r3, #3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3208      	adds	r2, #8
 800197c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001980:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	220f      	movs	r2, #15
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	691a      	ldr	r2, [r3, #16]
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	08da      	lsrs	r2, r3, #3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3208      	adds	r2, #8
 80019b6:	69b9      	ldr	r1, [r7, #24]
 80019b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	2203      	movs	r2, #3
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 0203 	and.w	r2, r3, #3
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 80ae 	beq.w	8001b5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b5d      	ldr	r3, [pc, #372]	@ (8001b78 <HAL_GPIO_Init+0x300>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a06:	4a5c      	ldr	r2, [pc, #368]	@ (8001b78 <HAL_GPIO_Init+0x300>)
 8001a08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a0e:	4b5a      	ldr	r3, [pc, #360]	@ (8001b78 <HAL_GPIO_Init+0x300>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a1a:	4a58      	ldr	r2, [pc, #352]	@ (8001b7c <HAL_GPIO_Init+0x304>)
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	089b      	lsrs	r3, r3, #2
 8001a20:	3302      	adds	r3, #2
 8001a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	220f      	movs	r2, #15
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a4f      	ldr	r2, [pc, #316]	@ (8001b80 <HAL_GPIO_Init+0x308>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d025      	beq.n	8001a92 <HAL_GPIO_Init+0x21a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4e      	ldr	r2, [pc, #312]	@ (8001b84 <HAL_GPIO_Init+0x30c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d01f      	beq.n	8001a8e <HAL_GPIO_Init+0x216>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4d      	ldr	r2, [pc, #308]	@ (8001b88 <HAL_GPIO_Init+0x310>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d019      	beq.n	8001a8a <HAL_GPIO_Init+0x212>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4c      	ldr	r2, [pc, #304]	@ (8001b8c <HAL_GPIO_Init+0x314>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d013      	beq.n	8001a86 <HAL_GPIO_Init+0x20e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4b      	ldr	r2, [pc, #300]	@ (8001b90 <HAL_GPIO_Init+0x318>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d00d      	beq.n	8001a82 <HAL_GPIO_Init+0x20a>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4a      	ldr	r2, [pc, #296]	@ (8001b94 <HAL_GPIO_Init+0x31c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d007      	beq.n	8001a7e <HAL_GPIO_Init+0x206>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a49      	ldr	r2, [pc, #292]	@ (8001b98 <HAL_GPIO_Init+0x320>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d101      	bne.n	8001a7a <HAL_GPIO_Init+0x202>
 8001a76:	2306      	movs	r3, #6
 8001a78:	e00c      	b.n	8001a94 <HAL_GPIO_Init+0x21c>
 8001a7a:	2307      	movs	r3, #7
 8001a7c:	e00a      	b.n	8001a94 <HAL_GPIO_Init+0x21c>
 8001a7e:	2305      	movs	r3, #5
 8001a80:	e008      	b.n	8001a94 <HAL_GPIO_Init+0x21c>
 8001a82:	2304      	movs	r3, #4
 8001a84:	e006      	b.n	8001a94 <HAL_GPIO_Init+0x21c>
 8001a86:	2303      	movs	r3, #3
 8001a88:	e004      	b.n	8001a94 <HAL_GPIO_Init+0x21c>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e002      	b.n	8001a94 <HAL_GPIO_Init+0x21c>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <HAL_GPIO_Init+0x21c>
 8001a92:	2300      	movs	r3, #0
 8001a94:	69fa      	ldr	r2, [r7, #28]
 8001a96:	f002 0203 	and.w	r2, r2, #3
 8001a9a:	0092      	lsls	r2, r2, #2
 8001a9c:	4093      	lsls	r3, r2
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa4:	4935      	ldr	r1, [pc, #212]	@ (8001b7c <HAL_GPIO_Init+0x304>)
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	3302      	adds	r3, #2
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab2:	4b3a      	ldr	r3, [pc, #232]	@ (8001b9c <HAL_GPIO_Init+0x324>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ad6:	4a31      	ldr	r2, [pc, #196]	@ (8001b9c <HAL_GPIO_Init+0x324>)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001adc:	4b2f      	ldr	r3, [pc, #188]	@ (8001b9c <HAL_GPIO_Init+0x324>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b00:	4a26      	ldr	r2, [pc, #152]	@ (8001b9c <HAL_GPIO_Init+0x324>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b06:	4b25      	ldr	r3, [pc, #148]	@ (8001b9c <HAL_GPIO_Init+0x324>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8001b9c <HAL_GPIO_Init+0x324>)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b30:	4b1a      	ldr	r3, [pc, #104]	@ (8001b9c <HAL_GPIO_Init+0x324>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b54:	4a11      	ldr	r2, [pc, #68]	@ (8001b9c <HAL_GPIO_Init+0x324>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	61fb      	str	r3, [r7, #28]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	2b0f      	cmp	r3, #15
 8001b64:	f67f ae96 	bls.w	8001894 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	3724      	adds	r7, #36	@ 0x24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40013800 	.word	0x40013800
 8001b80:	40020000 	.word	0x40020000
 8001b84:	40020400 	.word	0x40020400
 8001b88:	40020800 	.word	0x40020800
 8001b8c:	40020c00 	.word	0x40020c00
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40021400 	.word	0x40021400
 8001b98:	40021800 	.word	0x40021800
 8001b9c:	40013c00 	.word	0x40013c00

08001ba0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	887b      	ldrh	r3, [r7, #2]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d002      	beq.n	8001bbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	73fb      	strb	r3, [r7, #15]
 8001bbc:	e001      	b.n	8001bc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001bda:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bdc:	695a      	ldr	r2, [r3, #20]
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d006      	beq.n	8001bf4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001be6:	4a05      	ldr	r2, [pc, #20]	@ (8001bfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bec:	88fb      	ldrh	r3, [r7, #6]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fba2 	bl	8001338 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40013c00 	.word	0x40013c00

08001c00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e12b      	b.n	8001e6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d106      	bne.n	8001c2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7fe fdb2 	bl	8000790 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2224      	movs	r2, #36	@ 0x24
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0201 	bic.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c64:	f001 f8d2 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 8001c68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	4a81      	ldr	r2, [pc, #516]	@ (8001e74 <HAL_I2C_Init+0x274>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d807      	bhi.n	8001c84 <HAL_I2C_Init+0x84>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4a80      	ldr	r2, [pc, #512]	@ (8001e78 <HAL_I2C_Init+0x278>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	bf94      	ite	ls
 8001c7c:	2301      	movls	r3, #1
 8001c7e:	2300      	movhi	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	e006      	b.n	8001c92 <HAL_I2C_Init+0x92>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4a7d      	ldr	r2, [pc, #500]	@ (8001e7c <HAL_I2C_Init+0x27c>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	bf94      	ite	ls
 8001c8c:	2301      	movls	r3, #1
 8001c8e:	2300      	movhi	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e0e7      	b.n	8001e6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4a78      	ldr	r2, [pc, #480]	@ (8001e80 <HAL_I2C_Init+0x280>)
 8001c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca2:	0c9b      	lsrs	r3, r3, #18
 8001ca4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	4a6a      	ldr	r2, [pc, #424]	@ (8001e74 <HAL_I2C_Init+0x274>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d802      	bhi.n	8001cd4 <HAL_I2C_Init+0xd4>
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	e009      	b.n	8001ce8 <HAL_I2C_Init+0xe8>
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001cda:	fb02 f303 	mul.w	r3, r2, r3
 8001cde:	4a69      	ldr	r2, [pc, #420]	@ (8001e84 <HAL_I2C_Init+0x284>)
 8001ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce4:	099b      	lsrs	r3, r3, #6
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	430b      	orrs	r3, r1
 8001cee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001cfa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	495c      	ldr	r1, [pc, #368]	@ (8001e74 <HAL_I2C_Init+0x274>)
 8001d04:	428b      	cmp	r3, r1
 8001d06:	d819      	bhi.n	8001d3c <HAL_I2C_Init+0x13c>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	1e59      	subs	r1, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d16:	1c59      	adds	r1, r3, #1
 8001d18:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d1c:	400b      	ands	r3, r1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00a      	beq.n	8001d38 <HAL_I2C_Init+0x138>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1e59      	subs	r1, r3, #1
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d30:	3301      	adds	r3, #1
 8001d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d36:	e051      	b.n	8001ddc <HAL_I2C_Init+0x1dc>
 8001d38:	2304      	movs	r3, #4
 8001d3a:	e04f      	b.n	8001ddc <HAL_I2C_Init+0x1dc>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d111      	bne.n	8001d68 <HAL_I2C_Init+0x168>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1e58      	subs	r0, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	440b      	add	r3, r1
 8001d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d56:	3301      	adds	r3, #1
 8001d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	bf0c      	ite	eq
 8001d60:	2301      	moveq	r3, #1
 8001d62:	2300      	movne	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	e012      	b.n	8001d8e <HAL_I2C_Init+0x18e>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	1e58      	subs	r0, r3, #1
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6859      	ldr	r1, [r3, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	0099      	lsls	r1, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	bf0c      	ite	eq
 8001d88:	2301      	moveq	r3, #1
 8001d8a:	2300      	movne	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_I2C_Init+0x196>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e022      	b.n	8001ddc <HAL_I2C_Init+0x1dc>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10e      	bne.n	8001dbc <HAL_I2C_Init+0x1bc>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	1e58      	subs	r0, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6859      	ldr	r1, [r3, #4]
 8001da6:	460b      	mov	r3, r1
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	440b      	add	r3, r1
 8001dac:	fbb0 f3f3 	udiv	r3, r0, r3
 8001db0:	3301      	adds	r3, #1
 8001db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dba:	e00f      	b.n	8001ddc <HAL_I2C_Init+0x1dc>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	1e58      	subs	r0, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6859      	ldr	r1, [r3, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	0099      	lsls	r1, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	6809      	ldr	r1, [r1, #0]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69da      	ldr	r2, [r3, #28]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6911      	ldr	r1, [r2, #16]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	68d2      	ldr	r2, [r2, #12]
 8001e16:	4311      	orrs	r1, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0201 	orr.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2220      	movs	r2, #32
 8001e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	000186a0 	.word	0x000186a0
 8001e78:	001e847f 	.word	0x001e847f
 8001e7c:	003d08ff 	.word	0x003d08ff
 8001e80:	431bde83 	.word	0x431bde83
 8001e84:	10624dd3 	.word	0x10624dd3

08001e88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af02      	add	r7, sp, #8
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	461a      	mov	r2, r3
 8001e94:	460b      	mov	r3, r1
 8001e96:	817b      	strh	r3, [r7, #10]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e9c:	f7ff fbaa 	bl	80015f4 <HAL_GetTick>
 8001ea0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b20      	cmp	r3, #32
 8001eac:	f040 80e0 	bne.w	8002070 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	2319      	movs	r3, #25
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	4970      	ldr	r1, [pc, #448]	@ (800207c <HAL_I2C_Master_Transmit+0x1f4>)
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 fc7e 	bl	80027bc <I2C_WaitOnFlagUntilTimeout>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e0d3      	b.n	8002072 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_I2C_Master_Transmit+0x50>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e0cc      	b.n	8002072 <HAL_I2C_Master_Transmit+0x1ea>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d007      	beq.n	8001efe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0201 	orr.w	r2, r2, #1
 8001efc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2221      	movs	r2, #33	@ 0x21
 8001f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2210      	movs	r2, #16
 8001f1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	893a      	ldrh	r2, [r7, #8]
 8001f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4a50      	ldr	r2, [pc, #320]	@ (8002080 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f3e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f40:	8979      	ldrh	r1, [r7, #10]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	6a3a      	ldr	r2, [r7, #32]
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 face 	bl	80024e8 <I2C_MasterRequestWrite>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e08d      	b.n	8002072 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f6c:	e066      	b.n	800203c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	6a39      	ldr	r1, [r7, #32]
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 fd3c 	bl	80029f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00d      	beq.n	8001f9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d107      	bne.n	8001f96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e06b      	b.n	8002072 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9e:	781a      	ldrb	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d11b      	bne.n	8002010 <HAL_I2C_Master_Transmit+0x188>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d017      	beq.n	8002010 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe4:	781a      	ldrb	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	6a39      	ldr	r1, [r7, #32]
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 fd33 	bl	8002a80 <I2C_WaitOnBTFFlagUntilTimeout>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00d      	beq.n	800203c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	2b04      	cmp	r3, #4
 8002026:	d107      	bne.n	8002038 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002036:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e01a      	b.n	8002072 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002040:	2b00      	cmp	r3, #0
 8002042:	d194      	bne.n	8001f6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002052:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2220      	movs	r2, #32
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	e000      	b.n	8002072 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002070:	2302      	movs	r3, #2
  }
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	00100002 	.word	0x00100002
 8002080:	ffff0000 	.word	0xffff0000

08002084 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08c      	sub	sp, #48	@ 0x30
 8002088:	af02      	add	r7, sp, #8
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	4608      	mov	r0, r1
 800208e:	4611      	mov	r1, r2
 8002090:	461a      	mov	r2, r3
 8002092:	4603      	mov	r3, r0
 8002094:	817b      	strh	r3, [r7, #10]
 8002096:	460b      	mov	r3, r1
 8002098:	813b      	strh	r3, [r7, #8]
 800209a:	4613      	mov	r3, r2
 800209c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800209e:	f7ff faa9 	bl	80015f4 <HAL_GetTick>
 80020a2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b20      	cmp	r3, #32
 80020ae:	f040 8214 	bne.w	80024da <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	2319      	movs	r3, #25
 80020b8:	2201      	movs	r2, #1
 80020ba:	497b      	ldr	r1, [pc, #492]	@ (80022a8 <HAL_I2C_Mem_Read+0x224>)
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 fb7d 	bl	80027bc <I2C_WaitOnFlagUntilTimeout>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80020c8:	2302      	movs	r3, #2
 80020ca:	e207      	b.n	80024dc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_I2C_Mem_Read+0x56>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e200      	b.n	80024dc <HAL_I2C_Mem_Read+0x458>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d007      	beq.n	8002100 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800210e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2222      	movs	r2, #34	@ 0x22
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2240      	movs	r2, #64	@ 0x40
 800211c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800212a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002130:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4a5b      	ldr	r2, [pc, #364]	@ (80022ac <HAL_I2C_Mem_Read+0x228>)
 8002140:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002142:	88f8      	ldrh	r0, [r7, #6]
 8002144:	893a      	ldrh	r2, [r7, #8]
 8002146:	8979      	ldrh	r1, [r7, #10]
 8002148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	4603      	mov	r3, r0
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f000 fa4a 	bl	80025ec <I2C_RequestMemoryRead>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e1bc      	b.n	80024dc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002166:	2b00      	cmp	r3, #0
 8002168:	d113      	bne.n	8002192 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800216a:	2300      	movs	r3, #0
 800216c:	623b      	str	r3, [r7, #32]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	623b      	str	r3, [r7, #32]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	623b      	str	r3, [r7, #32]
 800217e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	e190      	b.n	80024b4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002196:	2b01      	cmp	r3, #1
 8002198:	d11b      	bne.n	80021d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	61fb      	str	r3, [r7, #28]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	61fb      	str	r3, [r7, #28]
 80021be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	e170      	b.n	80024b4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d11b      	bne.n	8002212 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fa:	2300      	movs	r3, #0
 80021fc:	61bb      	str	r3, [r7, #24]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	e150      	b.n	80024b4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002228:	e144      	b.n	80024b4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800222e:	2b03      	cmp	r3, #3
 8002230:	f200 80f1 	bhi.w	8002416 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002238:	2b01      	cmp	r3, #1
 800223a:	d123      	bne.n	8002284 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800223c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800223e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 fc65 	bl	8002b10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e145      	b.n	80024dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691a      	ldr	r2, [r3, #16]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800226c:	3b01      	subs	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002278:	b29b      	uxth	r3, r3
 800227a:	3b01      	subs	r3, #1
 800227c:	b29a      	uxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002282:	e117      	b.n	80024b4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002288:	2b02      	cmp	r3, #2
 800228a:	d14e      	bne.n	800232a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800228c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002292:	2200      	movs	r2, #0
 8002294:	4906      	ldr	r1, [pc, #24]	@ (80022b0 <HAL_I2C_Mem_Read+0x22c>)
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 fa90 	bl	80027bc <I2C_WaitOnFlagUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d008      	beq.n	80022b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e11a      	b.n	80024dc <HAL_I2C_Mem_Read+0x458>
 80022a6:	bf00      	nop
 80022a8:	00100002 	.word	0x00100002
 80022ac:	ffff0000 	.word	0xffff0000
 80022b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002312:	3b01      	subs	r3, #1
 8002314:	b29a      	uxth	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002328:	e0c4      	b.n	80024b4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002330:	2200      	movs	r2, #0
 8002332:	496c      	ldr	r1, [pc, #432]	@ (80024e4 <HAL_I2C_Mem_Read+0x460>)
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 fa41 	bl	80027bc <I2C_WaitOnFlagUntilTimeout>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0cb      	b.n	80024dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002352:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800237c:	b29b      	uxth	r3, r3
 800237e:	3b01      	subs	r3, #1
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800238c:	2200      	movs	r2, #0
 800238e:	4955      	ldr	r1, [pc, #340]	@ (80024e4 <HAL_I2C_Mem_Read+0x460>)
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 fa13 	bl	80027bc <I2C_WaitOnFlagUntilTimeout>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e09d      	b.n	80024dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d8:	b29b      	uxth	r3, r3
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240a:	b29b      	uxth	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002414:	e04e      	b.n	80024b4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002418:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 fb78 	bl	8002b10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e058      	b.n	80024dc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002452:	b29b      	uxth	r3, r3
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	2b04      	cmp	r3, #4
 8002468:	d124      	bne.n	80024b4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246e:	2b03      	cmp	r3, #3
 8002470:	d107      	bne.n	8002482 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002480:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f47f aeb6 	bne.w	800222a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e000      	b.n	80024dc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80024da:	2302      	movs	r3, #2
  }
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3728      	adds	r7, #40	@ 0x28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	00010004 	.word	0x00010004

080024e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	603b      	str	r3, [r7, #0]
 80024f4:	460b      	mov	r3, r1
 80024f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b08      	cmp	r3, #8
 8002502:	d006      	beq.n	8002512 <I2C_MasterRequestWrite+0x2a>
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d003      	beq.n	8002512 <I2C_MasterRequestWrite+0x2a>
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002510:	d108      	bne.n	8002524 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	e00b      	b.n	800253c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002528:	2b12      	cmp	r3, #18
 800252a:	d107      	bne.n	800253c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800253a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 f937 	bl	80027bc <I2C_WaitOnFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00d      	beq.n	8002570 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002562:	d103      	bne.n	800256c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800256a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e035      	b.n	80025dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002578:	d108      	bne.n	800258c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800257a:	897b      	ldrh	r3, [r7, #10]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002588:	611a      	str	r2, [r3, #16]
 800258a:	e01b      	b.n	80025c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800258c:	897b      	ldrh	r3, [r7, #10]
 800258e:	11db      	asrs	r3, r3, #7
 8002590:	b2db      	uxtb	r3, r3
 8002592:	f003 0306 	and.w	r3, r3, #6
 8002596:	b2db      	uxtb	r3, r3
 8002598:	f063 030f 	orn	r3, r3, #15
 800259c:	b2da      	uxtb	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	490e      	ldr	r1, [pc, #56]	@ (80025e4 <I2C_MasterRequestWrite+0xfc>)
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 f980 	bl	80028b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e010      	b.n	80025dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025ba:	897b      	ldrh	r3, [r7, #10]
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	4907      	ldr	r1, [pc, #28]	@ (80025e8 <I2C_MasterRequestWrite+0x100>)
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 f970 	bl	80028b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	00010008 	.word	0x00010008
 80025e8:	00010002 	.word	0x00010002

080025ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	4608      	mov	r0, r1
 80025f6:	4611      	mov	r1, r2
 80025f8:	461a      	mov	r2, r3
 80025fa:	4603      	mov	r3, r0
 80025fc:	817b      	strh	r3, [r7, #10]
 80025fe:	460b      	mov	r3, r1
 8002600:	813b      	strh	r3, [r7, #8]
 8002602:	4613      	mov	r3, r2
 8002604:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002614:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002624:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	2200      	movs	r2, #0
 800262e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f8c2 	bl	80027bc <I2C_WaitOnFlagUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00d      	beq.n	800265a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002648:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800264c:	d103      	bne.n	8002656 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002654:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e0aa      	b.n	80027b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800265a:	897b      	ldrh	r3, [r7, #10]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002668:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	6a3a      	ldr	r2, [r7, #32]
 800266e:	4952      	ldr	r1, [pc, #328]	@ (80027b8 <I2C_RequestMemoryRead+0x1cc>)
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f91d 	bl	80028b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e097      	b.n	80027b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002698:	6a39      	ldr	r1, [r7, #32]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f9a8 	bl	80029f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00d      	beq.n	80026c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d107      	bne.n	80026be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e076      	b.n	80027b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026c2:	88fb      	ldrh	r3, [r7, #6]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d105      	bne.n	80026d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026c8:	893b      	ldrh	r3, [r7, #8]
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	611a      	str	r2, [r3, #16]
 80026d2:	e021      	b.n	8002718 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026d4:	893b      	ldrh	r3, [r7, #8]
 80026d6:	0a1b      	lsrs	r3, r3, #8
 80026d8:	b29b      	uxth	r3, r3
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026e4:	6a39      	ldr	r1, [r7, #32]
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f982 	bl	80029f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00d      	beq.n	800270e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d107      	bne.n	800270a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002708:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e050      	b.n	80027b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800270e:	893b      	ldrh	r3, [r7, #8]
 8002710:	b2da      	uxtb	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002718:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800271a:	6a39      	ldr	r1, [r7, #32]
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 f967 	bl	80029f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00d      	beq.n	8002744 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272c:	2b04      	cmp	r3, #4
 800272e:	d107      	bne.n	8002740 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800273e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e035      	b.n	80027b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002752:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	2200      	movs	r2, #0
 800275c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 f82b 	bl	80027bc <I2C_WaitOnFlagUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00d      	beq.n	8002788 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800277a:	d103      	bne.n	8002784 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002782:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e013      	b.n	80027b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002788:	897b      	ldrh	r3, [r7, #10]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	b2da      	uxtb	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279a:	6a3a      	ldr	r2, [r7, #32]
 800279c:	4906      	ldr	r1, [pc, #24]	@ (80027b8 <I2C_RequestMemoryRead+0x1cc>)
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f886 	bl	80028b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	00010002 	.word	0x00010002

080027bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	4613      	mov	r3, r2
 80027ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027cc:	e048      	b.n	8002860 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d4:	d044      	beq.n	8002860 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d6:	f7fe ff0d 	bl	80015f4 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d302      	bcc.n	80027ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d139      	bne.n	8002860 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	0c1b      	lsrs	r3, r3, #16
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d10d      	bne.n	8002812 <I2C_WaitOnFlagUntilTimeout+0x56>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	43da      	mvns	r2, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	4013      	ands	r3, r2
 8002802:	b29b      	uxth	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	bf0c      	ite	eq
 8002808:	2301      	moveq	r3, #1
 800280a:	2300      	movne	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	e00c      	b.n	800282c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	43da      	mvns	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	4013      	ands	r3, r2
 800281e:	b29b      	uxth	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	bf0c      	ite	eq
 8002824:	2301      	moveq	r3, #1
 8002826:	2300      	movne	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	429a      	cmp	r2, r3
 8002830:	d116      	bne.n	8002860 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284c:	f043 0220 	orr.w	r2, r3, #32
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e023      	b.n	80028a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	0c1b      	lsrs	r3, r3, #16
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b01      	cmp	r3, #1
 8002868:	d10d      	bne.n	8002886 <I2C_WaitOnFlagUntilTimeout+0xca>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	43da      	mvns	r2, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	4013      	ands	r3, r2
 8002876:	b29b      	uxth	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	e00c      	b.n	80028a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	43da      	mvns	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	4013      	ands	r3, r2
 8002892:	b29b      	uxth	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	bf0c      	ite	eq
 8002898:	2301      	moveq	r3, #1
 800289a:	2300      	movne	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	461a      	mov	r2, r3
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d093      	beq.n	80027ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028be:	e071      	b.n	80029a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028ce:	d123      	bne.n	8002918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2220      	movs	r2, #32
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002904:	f043 0204 	orr.w	r2, r3, #4
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e067      	b.n	80029e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291e:	d041      	beq.n	80029a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002920:	f7fe fe68 	bl	80015f4 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	429a      	cmp	r2, r3
 800292e:	d302      	bcc.n	8002936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d136      	bne.n	80029a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	0c1b      	lsrs	r3, r3, #16
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b01      	cmp	r3, #1
 800293e:	d10c      	bne.n	800295a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	43da      	mvns	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	4013      	ands	r3, r2
 800294c:	b29b      	uxth	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	bf14      	ite	ne
 8002952:	2301      	movne	r3, #1
 8002954:	2300      	moveq	r3, #0
 8002956:	b2db      	uxtb	r3, r3
 8002958:	e00b      	b.n	8002972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	43da      	mvns	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	4013      	ands	r3, r2
 8002966:	b29b      	uxth	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	bf14      	ite	ne
 800296c:	2301      	movne	r3, #1
 800296e:	2300      	moveq	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d016      	beq.n	80029a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002990:	f043 0220 	orr.w	r2, r3, #32
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e021      	b.n	80029e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	0c1b      	lsrs	r3, r3, #16
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d10c      	bne.n	80029c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	43da      	mvns	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	4013      	ands	r3, r2
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf14      	ite	ne
 80029c0:	2301      	movne	r3, #1
 80029c2:	2300      	moveq	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	e00b      	b.n	80029e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	43da      	mvns	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	4013      	ands	r3, r2
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	bf14      	ite	ne
 80029da:	2301      	movne	r3, #1
 80029dc:	2300      	moveq	r3, #0
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f47f af6d 	bne.w	80028c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029fc:	e034      	b.n	8002a68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 f8e3 	bl	8002bca <I2C_IsAcknowledgeFailed>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e034      	b.n	8002a78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a14:	d028      	beq.n	8002a68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a16:	f7fe fded 	bl	80015f4 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d302      	bcc.n	8002a2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d11d      	bne.n	8002a68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a36:	2b80      	cmp	r3, #128	@ 0x80
 8002a38:	d016      	beq.n	8002a68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a54:	f043 0220 	orr.w	r2, r3, #32
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e007      	b.n	8002a78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a72:	2b80      	cmp	r3, #128	@ 0x80
 8002a74:	d1c3      	bne.n	80029fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a8c:	e034      	b.n	8002af8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f89b 	bl	8002bca <I2C_IsAcknowledgeFailed>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e034      	b.n	8002b08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa4:	d028      	beq.n	8002af8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa6:	f7fe fda5 	bl	80015f4 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d302      	bcc.n	8002abc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d11d      	bne.n	8002af8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d016      	beq.n	8002af8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	f043 0220 	orr.w	r2, r3, #32
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e007      	b.n	8002b08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d1c3      	bne.n	8002a8e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b1c:	e049      	b.n	8002bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	f003 0310 	and.w	r3, r3, #16
 8002b28:	2b10      	cmp	r3, #16
 8002b2a:	d119      	bne.n	8002b60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0210 	mvn.w	r2, #16
 8002b34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e030      	b.n	8002bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b60:	f7fe fd48 	bl	80015f4 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d302      	bcc.n	8002b76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d11d      	bne.n	8002bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b80:	2b40      	cmp	r3, #64	@ 0x40
 8002b82:	d016      	beq.n	8002bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9e:	f043 0220 	orr.w	r2, r3, #32
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e007      	b.n	8002bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bbc:	2b40      	cmp	r3, #64	@ 0x40
 8002bbe:	d1ae      	bne.n	8002b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002be0:	d11b      	bne.n	8002c1a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002bea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	f043 0204 	orr.w	r2, r3, #4
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0cc      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c3c:	4b68      	ldr	r3, [pc, #416]	@ (8002de0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 030f 	and.w	r3, r3, #15
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d90c      	bls.n	8002c64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4a:	4b65      	ldr	r3, [pc, #404]	@ (8002de0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c52:	4b63      	ldr	r3, [pc, #396]	@ (8002de0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0b8      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d020      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c7c:	4b59      	ldr	r3, [pc, #356]	@ (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	4a58      	ldr	r2, [pc, #352]	@ (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c94:	4b53      	ldr	r3, [pc, #332]	@ (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	4a52      	ldr	r2, [pc, #328]	@ (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca0:	4b50      	ldr	r3, [pc, #320]	@ (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	494d      	ldr	r1, [pc, #308]	@ (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d044      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d107      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc6:	4b47      	ldr	r3, [pc, #284]	@ (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d119      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e07f      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d003      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ce2:	2b03      	cmp	r3, #3
 8002ce4:	d107      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce6:	4b3f      	ldr	r3, [pc, #252]	@ (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d109      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e06f      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e067      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d06:	4b37      	ldr	r3, [pc, #220]	@ (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f023 0203 	bic.w	r2, r3, #3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	4934      	ldr	r1, [pc, #208]	@ (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d18:	f7fe fc6c 	bl	80015f4 <HAL_GetTick>
 8002d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1e:	e00a      	b.n	8002d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d20:	f7fe fc68 	bl	80015f4 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e04f      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d36:	4b2b      	ldr	r3, [pc, #172]	@ (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 020c 	and.w	r2, r3, #12
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d1eb      	bne.n	8002d20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d48:	4b25      	ldr	r3, [pc, #148]	@ (8002de0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d20c      	bcs.n	8002d70 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d56:	4b22      	ldr	r3, [pc, #136]	@ (8002de0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5e:	4b20      	ldr	r3, [pc, #128]	@ (8002de0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e032      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d7c:	4b19      	ldr	r3, [pc, #100]	@ (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	4916      	ldr	r1, [pc, #88]	@ (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d009      	beq.n	8002dae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d9a:	4b12      	ldr	r3, [pc, #72]	@ (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	490e      	ldr	r1, [pc, #56]	@ (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dae:	f000 f855 	bl	8002e5c <HAL_RCC_GetSysClockFreq>
 8002db2:	4602      	mov	r2, r0
 8002db4:	4b0b      	ldr	r3, [pc, #44]	@ (8002de4 <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	091b      	lsrs	r3, r3, #4
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	490a      	ldr	r1, [pc, #40]	@ (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc0:	5ccb      	ldrb	r3, [r1, r3]
 8002dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc6:	4a09      	ldr	r2, [pc, #36]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002dc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002dca:	4b09      	ldr	r3, [pc, #36]	@ (8002df0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe fbcc 	bl	800156c <HAL_InitTick>

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40023c00 	.word	0x40023c00
 8002de4:	40023800 	.word	0x40023800
 8002de8:	08004648 	.word	0x08004648
 8002dec:	20000000 	.word	0x20000000
 8002df0:	20000004 	.word	0x20000004

08002df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df8:	4b03      	ldr	r3, [pc, #12]	@ (8002e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	20000000 	.word	0x20000000

08002e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e10:	f7ff fff0 	bl	8002df4 <HAL_RCC_GetHCLKFreq>
 8002e14:	4602      	mov	r2, r0
 8002e16:	4b05      	ldr	r3, [pc, #20]	@ (8002e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	0a9b      	lsrs	r3, r3, #10
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	4903      	ldr	r1, [pc, #12]	@ (8002e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e22:	5ccb      	ldrb	r3, [r1, r3]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	08004658 	.word	0x08004658

08002e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e38:	f7ff ffdc 	bl	8002df4 <HAL_RCC_GetHCLKFreq>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	4b05      	ldr	r3, [pc, #20]	@ (8002e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	0b5b      	lsrs	r3, r3, #13
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	4903      	ldr	r1, [pc, #12]	@ (8002e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e4a:	5ccb      	ldrb	r3, [r1, r3]
 8002e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40023800 	.word	0x40023800
 8002e58:	08004658 	.word	0x08004658

08002e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e60:	b0a6      	sub	sp, #152	@ 0x98
 8002e62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e82:	4bc8      	ldr	r3, [pc, #800]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	f200 817e 	bhi.w	800318c <HAL_RCC_GetSysClockFreq+0x330>
 8002e90:	a201      	add	r2, pc, #4	@ (adr r2, 8002e98 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e96:	bf00      	nop
 8002e98:	08002ecd 	.word	0x08002ecd
 8002e9c:	0800318d 	.word	0x0800318d
 8002ea0:	0800318d 	.word	0x0800318d
 8002ea4:	0800318d 	.word	0x0800318d
 8002ea8:	08002ed5 	.word	0x08002ed5
 8002eac:	0800318d 	.word	0x0800318d
 8002eb0:	0800318d 	.word	0x0800318d
 8002eb4:	0800318d 	.word	0x0800318d
 8002eb8:	08002edd 	.word	0x08002edd
 8002ebc:	0800318d 	.word	0x0800318d
 8002ec0:	0800318d 	.word	0x0800318d
 8002ec4:	0800318d 	.word	0x0800318d
 8002ec8:	08003047 	.word	0x08003047
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ecc:	4bb6      	ldr	r3, [pc, #728]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002ece:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002ed2:	e15f      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ed4:	4bb5      	ldr	r3, [pc, #724]	@ (80031ac <HAL_RCC_GetSysClockFreq+0x350>)
 8002ed6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002eda:	e15b      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002edc:	4bb1      	ldr	r3, [pc, #708]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ee4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ee8:	4bae      	ldr	r3, [pc, #696]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d031      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef4:	4bab      	ldr	r3, [pc, #684]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	099b      	lsrs	r3, r3, #6
 8002efa:	2200      	movs	r2, #0
 8002efc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002efe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f06:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f08:	2300      	movs	r3, #0
 8002f0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f0c:	4ba7      	ldr	r3, [pc, #668]	@ (80031ac <HAL_RCC_GetSysClockFreq+0x350>)
 8002f0e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002f12:	462a      	mov	r2, r5
 8002f14:	fb03 f202 	mul.w	r2, r3, r2
 8002f18:	2300      	movs	r3, #0
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	4aa2      	ldr	r2, [pc, #648]	@ (80031ac <HAL_RCC_GetSysClockFreq+0x350>)
 8002f24:	4621      	mov	r1, r4
 8002f26:	fba1 1202 	umull	r1, r2, r1, r2
 8002f2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002f2c:	460a      	mov	r2, r1
 8002f2e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002f30:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002f32:	4413      	add	r3, r2
 8002f34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002f36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f3e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002f40:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f44:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002f48:	f7fd f9b2 	bl	80002b0 <__aeabi_uldivmod>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4613      	mov	r3, r2
 8002f52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f56:	e064      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f58:	4b92      	ldr	r3, [pc, #584]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	099b      	lsrs	r3, r3, #6
 8002f5e:	2200      	movs	r2, #0
 8002f60:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f62:	657a      	str	r2, [r7, #84]	@ 0x54
 8002f64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f70:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002f74:	4622      	mov	r2, r4
 8002f76:	462b      	mov	r3, r5
 8002f78:	f04f 0000 	mov.w	r0, #0
 8002f7c:	f04f 0100 	mov.w	r1, #0
 8002f80:	0159      	lsls	r1, r3, #5
 8002f82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f86:	0150      	lsls	r0, r2, #5
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	1a51      	subs	r1, r2, r1
 8002f90:	6139      	str	r1, [r7, #16]
 8002f92:	4629      	mov	r1, r5
 8002f94:	eb63 0301 	sbc.w	r3, r3, r1
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fa6:	4659      	mov	r1, fp
 8002fa8:	018b      	lsls	r3, r1, #6
 8002faa:	4651      	mov	r1, sl
 8002fac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fb0:	4651      	mov	r1, sl
 8002fb2:	018a      	lsls	r2, r1, #6
 8002fb4:	4651      	mov	r1, sl
 8002fb6:	ebb2 0801 	subs.w	r8, r2, r1
 8002fba:	4659      	mov	r1, fp
 8002fbc:	eb63 0901 	sbc.w	r9, r3, r1
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fcc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fd0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fd4:	4690      	mov	r8, r2
 8002fd6:	4699      	mov	r9, r3
 8002fd8:	4623      	mov	r3, r4
 8002fda:	eb18 0303 	adds.w	r3, r8, r3
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	462b      	mov	r3, r5
 8002fe2:	eb49 0303 	adc.w	r3, r9, r3
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	028b      	lsls	r3, r1, #10
 8002ff8:	4621      	mov	r1, r4
 8002ffa:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ffe:	4621      	mov	r1, r4
 8003000:	028a      	lsls	r2, r1, #10
 8003002:	4610      	mov	r0, r2
 8003004:	4619      	mov	r1, r3
 8003006:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800300a:	2200      	movs	r2, #0
 800300c:	643b      	str	r3, [r7, #64]	@ 0x40
 800300e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003010:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003014:	f7fd f94c 	bl	80002b0 <__aeabi_uldivmod>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4613      	mov	r3, r2
 800301e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003022:	4b60      	ldr	r3, [pc, #384]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	0c1b      	lsrs	r3, r3, #16
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	3301      	adds	r3, #1
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003034:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003038:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800303c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003040:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003044:	e0a6      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003046:	4b57      	ldr	r3, [pc, #348]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800304e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003052:	4b54      	ldr	r3, [pc, #336]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d02a      	beq.n	80030b4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800305e:	4b51      	ldr	r3, [pc, #324]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	099b      	lsrs	r3, r3, #6
 8003064:	2200      	movs	r2, #0
 8003066:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003068:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800306a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800306c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003070:	2100      	movs	r1, #0
 8003072:	4b4e      	ldr	r3, [pc, #312]	@ (80031ac <HAL_RCC_GetSysClockFreq+0x350>)
 8003074:	fb03 f201 	mul.w	r2, r3, r1
 8003078:	2300      	movs	r3, #0
 800307a:	fb00 f303 	mul.w	r3, r0, r3
 800307e:	4413      	add	r3, r2
 8003080:	4a4a      	ldr	r2, [pc, #296]	@ (80031ac <HAL_RCC_GetSysClockFreq+0x350>)
 8003082:	fba0 1202 	umull	r1, r2, r0, r2
 8003086:	677a      	str	r2, [r7, #116]	@ 0x74
 8003088:	460a      	mov	r2, r1
 800308a:	673a      	str	r2, [r7, #112]	@ 0x70
 800308c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800308e:	4413      	add	r3, r2
 8003090:	677b      	str	r3, [r7, #116]	@ 0x74
 8003092:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003096:	2200      	movs	r2, #0
 8003098:	633b      	str	r3, [r7, #48]	@ 0x30
 800309a:	637a      	str	r2, [r7, #52]	@ 0x34
 800309c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80030a0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80030a4:	f7fd f904 	bl	80002b0 <__aeabi_uldivmod>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4613      	mov	r3, r2
 80030ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80030b2:	e05b      	b.n	800316c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b4:	4b3b      	ldr	r3, [pc, #236]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x348>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	099b      	lsrs	r3, r3, #6
 80030ba:	2200      	movs	r2, #0
 80030bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c6:	623b      	str	r3, [r7, #32]
 80030c8:	2300      	movs	r3, #0
 80030ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80030cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030d0:	4642      	mov	r2, r8
 80030d2:	464b      	mov	r3, r9
 80030d4:	f04f 0000 	mov.w	r0, #0
 80030d8:	f04f 0100 	mov.w	r1, #0
 80030dc:	0159      	lsls	r1, r3, #5
 80030de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030e2:	0150      	lsls	r0, r2, #5
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4641      	mov	r1, r8
 80030ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80030ee:	4649      	mov	r1, r9
 80030f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003100:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003104:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003108:	ebb2 040a 	subs.w	r4, r2, sl
 800310c:	eb63 050b 	sbc.w	r5, r3, fp
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	00eb      	lsls	r3, r5, #3
 800311a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800311e:	00e2      	lsls	r2, r4, #3
 8003120:	4614      	mov	r4, r2
 8003122:	461d      	mov	r5, r3
 8003124:	4643      	mov	r3, r8
 8003126:	18e3      	adds	r3, r4, r3
 8003128:	603b      	str	r3, [r7, #0]
 800312a:	464b      	mov	r3, r9
 800312c:	eb45 0303 	adc.w	r3, r5, r3
 8003130:	607b      	str	r3, [r7, #4]
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800313e:	4629      	mov	r1, r5
 8003140:	028b      	lsls	r3, r1, #10
 8003142:	4621      	mov	r1, r4
 8003144:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003148:	4621      	mov	r1, r4
 800314a:	028a      	lsls	r2, r1, #10
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003154:	2200      	movs	r2, #0
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	61fa      	str	r2, [r7, #28]
 800315a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800315e:	f7fd f8a7 	bl	80002b0 <__aeabi_uldivmod>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4613      	mov	r3, r2
 8003168:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800316c:	4b0d      	ldr	r3, [pc, #52]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x348>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	0f1b      	lsrs	r3, r3, #28
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800317a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800317e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003182:	fbb2 f3f3 	udiv	r3, r2, r3
 8003186:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800318a:	e003      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800318c:	4b06      	ldr	r3, [pc, #24]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x34c>)
 800318e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003192:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003194:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003198:	4618      	mov	r0, r3
 800319a:	3798      	adds	r7, #152	@ 0x98
 800319c:	46bd      	mov	sp, r7
 800319e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031a2:	bf00      	nop
 80031a4:	40023800 	.word	0x40023800
 80031a8:	00f42400 	.word	0x00f42400
 80031ac:	017d7840 	.word	0x017d7840

080031b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e28d      	b.n	80036de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 8083 	beq.w	80032d6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80031d0:	4b94      	ldr	r3, [pc, #592]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 030c 	and.w	r3, r3, #12
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d019      	beq.n	8003210 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80031dc:	4b91      	ldr	r3, [pc, #580]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 030c 	and.w	r3, r3, #12
        || \
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d106      	bne.n	80031f6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80031e8:	4b8e      	ldr	r3, [pc, #568]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031f4:	d00c      	beq.n	8003210 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f6:	4b8b      	ldr	r3, [pc, #556]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80031fe:	2b0c      	cmp	r3, #12
 8003200:	d112      	bne.n	8003228 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003202:	4b88      	ldr	r3, [pc, #544]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800320a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800320e:	d10b      	bne.n	8003228 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003210:	4b84      	ldr	r3, [pc, #528]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d05b      	beq.n	80032d4 <HAL_RCC_OscConfig+0x124>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d157      	bne.n	80032d4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e25a      	b.n	80036de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003230:	d106      	bne.n	8003240 <HAL_RCC_OscConfig+0x90>
 8003232:	4b7c      	ldr	r3, [pc, #496]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a7b      	ldr	r2, [pc, #492]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 8003238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	e01d      	b.n	800327c <HAL_RCC_OscConfig+0xcc>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0xb4>
 800324a:	4b76      	ldr	r3, [pc, #472]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a75      	ldr	r2, [pc, #468]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 8003250:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	4b73      	ldr	r3, [pc, #460]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a72      	ldr	r2, [pc, #456]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 800325c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e00b      	b.n	800327c <HAL_RCC_OscConfig+0xcc>
 8003264:	4b6f      	ldr	r3, [pc, #444]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a6e      	ldr	r2, [pc, #440]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 800326a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	4b6c      	ldr	r3, [pc, #432]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a6b      	ldr	r2, [pc, #428]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 8003276:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800327a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d013      	beq.n	80032ac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003284:	f7fe f9b6 	bl	80015f4 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800328c:	f7fe f9b2 	bl	80015f4 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b64      	cmp	r3, #100	@ 0x64
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e21f      	b.n	80036de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	4b61      	ldr	r3, [pc, #388]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0xdc>
 80032aa:	e014      	b.n	80032d6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ac:	f7fe f9a2 	bl	80015f4 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b4:	f7fe f99e 	bl	80015f4 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b64      	cmp	r3, #100	@ 0x64
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e20b      	b.n	80036de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c6:	4b57      	ldr	r3, [pc, #348]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0x104>
 80032d2:	e000      	b.n	80032d6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d06f      	beq.n	80033c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80032e2:	4b50      	ldr	r3, [pc, #320]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d017      	beq.n	800331e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80032ee:	4b4d      	ldr	r3, [pc, #308]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
        || \
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d105      	bne.n	8003306 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80032fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00b      	beq.n	800331e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003306:	4b47      	ldr	r3, [pc, #284]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800330e:	2b0c      	cmp	r3, #12
 8003310:	d11c      	bne.n	800334c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003312:	4b44      	ldr	r3, [pc, #272]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d116      	bne.n	800334c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331e:	4b41      	ldr	r3, [pc, #260]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <HAL_RCC_OscConfig+0x186>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d001      	beq.n	8003336 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e1d3      	b.n	80036de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003336:	4b3b      	ldr	r3, [pc, #236]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4937      	ldr	r1, [pc, #220]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 8003346:	4313      	orrs	r3, r2
 8003348:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334a:	e03a      	b.n	80033c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d020      	beq.n	8003396 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003354:	4b34      	ldr	r3, [pc, #208]	@ (8003428 <HAL_RCC_OscConfig+0x278>)
 8003356:	2201      	movs	r2, #1
 8003358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335a:	f7fe f94b 	bl	80015f4 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003362:	f7fe f947 	bl	80015f4 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e1b4      	b.n	80036de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003374:	4b2b      	ldr	r3, [pc, #172]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0f0      	beq.n	8003362 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003380:	4b28      	ldr	r3, [pc, #160]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4925      	ldr	r1, [pc, #148]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 8003390:	4313      	orrs	r3, r2
 8003392:	600b      	str	r3, [r1, #0]
 8003394:	e015      	b.n	80033c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003396:	4b24      	ldr	r3, [pc, #144]	@ (8003428 <HAL_RCC_OscConfig+0x278>)
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fe f92a 	bl	80015f4 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a4:	f7fe f926 	bl	80015f4 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e193      	b.n	80036de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d036      	beq.n	800343c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d016      	beq.n	8003404 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d6:	4b15      	ldr	r3, [pc, #84]	@ (800342c <HAL_RCC_OscConfig+0x27c>)
 80033d8:	2201      	movs	r2, #1
 80033da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033dc:	f7fe f90a 	bl	80015f4 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e4:	f7fe f906 	bl	80015f4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e173      	b.n	80036de <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003424 <HAL_RCC_OscConfig+0x274>)
 80033f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0x234>
 8003402:	e01b      	b.n	800343c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003404:	4b09      	ldr	r3, [pc, #36]	@ (800342c <HAL_RCC_OscConfig+0x27c>)
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340a:	f7fe f8f3 	bl	80015f4 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003410:	e00e      	b.n	8003430 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003412:	f7fe f8ef 	bl	80015f4 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d907      	bls.n	8003430 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e15c      	b.n	80036de <HAL_RCC_OscConfig+0x52e>
 8003424:	40023800 	.word	0x40023800
 8003428:	42470000 	.word	0x42470000
 800342c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003430:	4b8a      	ldr	r3, [pc, #552]	@ (800365c <HAL_RCC_OscConfig+0x4ac>)
 8003432:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1ea      	bne.n	8003412 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8097 	beq.w	8003578 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800344a:	2300      	movs	r3, #0
 800344c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800344e:	4b83      	ldr	r3, [pc, #524]	@ (800365c <HAL_RCC_OscConfig+0x4ac>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10f      	bne.n	800347a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	4b7f      	ldr	r3, [pc, #508]	@ (800365c <HAL_RCC_OscConfig+0x4ac>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003462:	4a7e      	ldr	r2, [pc, #504]	@ (800365c <HAL_RCC_OscConfig+0x4ac>)
 8003464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003468:	6413      	str	r3, [r2, #64]	@ 0x40
 800346a:	4b7c      	ldr	r3, [pc, #496]	@ (800365c <HAL_RCC_OscConfig+0x4ac>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003476:	2301      	movs	r3, #1
 8003478:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347a:	4b79      	ldr	r3, [pc, #484]	@ (8003660 <HAL_RCC_OscConfig+0x4b0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003482:	2b00      	cmp	r3, #0
 8003484:	d118      	bne.n	80034b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003486:	4b76      	ldr	r3, [pc, #472]	@ (8003660 <HAL_RCC_OscConfig+0x4b0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a75      	ldr	r2, [pc, #468]	@ (8003660 <HAL_RCC_OscConfig+0x4b0>)
 800348c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003492:	f7fe f8af 	bl	80015f4 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349a:	f7fe f8ab 	bl	80015f4 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e118      	b.n	80036de <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ac:	4b6c      	ldr	r3, [pc, #432]	@ (8003660 <HAL_RCC_OscConfig+0x4b0>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f0      	beq.n	800349a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d106      	bne.n	80034ce <HAL_RCC_OscConfig+0x31e>
 80034c0:	4b66      	ldr	r3, [pc, #408]	@ (800365c <HAL_RCC_OscConfig+0x4ac>)
 80034c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c4:	4a65      	ldr	r2, [pc, #404]	@ (800365c <HAL_RCC_OscConfig+0x4ac>)
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80034cc:	e01c      	b.n	8003508 <HAL_RCC_OscConfig+0x358>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b05      	cmp	r3, #5
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCC_OscConfig+0x340>
 80034d6:	4b61      	ldr	r3, [pc, #388]	@ (800365c <HAL_RCC_OscConfig+0x4ac>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034da:	4a60      	ldr	r2, [pc, #384]	@ (800365c <HAL_RCC_OscConfig+0x4ac>)
 80034dc:	f043 0304 	orr.w	r3, r3, #4
 80034e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80034e2:	4b5e      	ldr	r3, [pc, #376]	@ (800365c <HAL_RCC_OscConfig+0x4ac>)
 80034e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e6:	4a5d      	ldr	r2, [pc, #372]	@ (800365c <HAL_RCC_OscConfig+0x4ac>)
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ee:	e00b      	b.n	8003508 <HAL_RCC_OscConfig+0x358>
 80034f0:	4b5a      	ldr	r3, [pc, #360]	@ (800365c <HAL_RCC_OscConfig+0x4ac>)
 80034f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f4:	4a59      	ldr	r2, [pc, #356]	@ (800365c <HAL_RCC_OscConfig+0x4ac>)
 80034f6:	f023 0301 	bic.w	r3, r3, #1
 80034fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80034fc:	4b57      	ldr	r3, [pc, #348]	@ (800365c <HAL_RCC_OscConfig+0x4ac>)
 80034fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003500:	4a56      	ldr	r2, [pc, #344]	@ (800365c <HAL_RCC_OscConfig+0x4ac>)
 8003502:	f023 0304 	bic.w	r3, r3, #4
 8003506:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d015      	beq.n	800353c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003510:	f7fe f870 	bl	80015f4 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003516:	e00a      	b.n	800352e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003518:	f7fe f86c 	bl	80015f4 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e0d7      	b.n	80036de <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352e:	4b4b      	ldr	r3, [pc, #300]	@ (800365c <HAL_RCC_OscConfig+0x4ac>)
 8003530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0ee      	beq.n	8003518 <HAL_RCC_OscConfig+0x368>
 800353a:	e014      	b.n	8003566 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353c:	f7fe f85a 	bl	80015f4 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003542:	e00a      	b.n	800355a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003544:	f7fe f856 	bl	80015f4 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003552:	4293      	cmp	r3, r2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e0c1      	b.n	80036de <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800355a:	4b40      	ldr	r3, [pc, #256]	@ (800365c <HAL_RCC_OscConfig+0x4ac>)
 800355c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1ee      	bne.n	8003544 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003566:	7dfb      	ldrb	r3, [r7, #23]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d105      	bne.n	8003578 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800356c:	4b3b      	ldr	r3, [pc, #236]	@ (800365c <HAL_RCC_OscConfig+0x4ac>)
 800356e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003570:	4a3a      	ldr	r2, [pc, #232]	@ (800365c <HAL_RCC_OscConfig+0x4ac>)
 8003572:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003576:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 80ad 	beq.w	80036dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003582:	4b36      	ldr	r3, [pc, #216]	@ (800365c <HAL_RCC_OscConfig+0x4ac>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 030c 	and.w	r3, r3, #12
 800358a:	2b08      	cmp	r3, #8
 800358c:	d060      	beq.n	8003650 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	2b02      	cmp	r3, #2
 8003594:	d145      	bne.n	8003622 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003596:	4b33      	ldr	r3, [pc, #204]	@ (8003664 <HAL_RCC_OscConfig+0x4b4>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fe f82a 	bl	80015f4 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a4:	f7fe f826 	bl	80015f4 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e093      	b.n	80036de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b6:	4b29      	ldr	r3, [pc, #164]	@ (800365c <HAL_RCC_OscConfig+0x4ac>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69da      	ldr	r2, [r3, #28]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d0:	019b      	lsls	r3, r3, #6
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d8:	085b      	lsrs	r3, r3, #1
 80035da:	3b01      	subs	r3, #1
 80035dc:	041b      	lsls	r3, r3, #16
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e4:	061b      	lsls	r3, r3, #24
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ec:	071b      	lsls	r3, r3, #28
 80035ee:	491b      	ldr	r1, [pc, #108]	@ (800365c <HAL_RCC_OscConfig+0x4ac>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003664 <HAL_RCC_OscConfig+0x4b4>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fa:	f7fd fffb 	bl	80015f4 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003602:	f7fd fff7 	bl	80015f4 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e064      	b.n	80036de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003614:	4b11      	ldr	r3, [pc, #68]	@ (800365c <HAL_RCC_OscConfig+0x4ac>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0f0      	beq.n	8003602 <HAL_RCC_OscConfig+0x452>
 8003620:	e05c      	b.n	80036dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003622:	4b10      	ldr	r3, [pc, #64]	@ (8003664 <HAL_RCC_OscConfig+0x4b4>)
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003628:	f7fd ffe4 	bl	80015f4 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003630:	f7fd ffe0 	bl	80015f4 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e04d      	b.n	80036de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003642:	4b06      	ldr	r3, [pc, #24]	@ (800365c <HAL_RCC_OscConfig+0x4ac>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x480>
 800364e:	e045      	b.n	80036dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d107      	bne.n	8003668 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e040      	b.n	80036de <HAL_RCC_OscConfig+0x52e>
 800365c:	40023800 	.word	0x40023800
 8003660:	40007000 	.word	0x40007000
 8003664:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003668:	4b1f      	ldr	r3, [pc, #124]	@ (80036e8 <HAL_RCC_OscConfig+0x538>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d030      	beq.n	80036d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003680:	429a      	cmp	r2, r3
 8003682:	d129      	bne.n	80036d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368e:	429a      	cmp	r2, r3
 8003690:	d122      	bne.n	80036d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003698:	4013      	ands	r3, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800369e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d119      	bne.n	80036d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ae:	085b      	lsrs	r3, r3, #1
 80036b0:	3b01      	subs	r3, #1
 80036b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d10f      	bne.n	80036d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d107      	bne.n	80036d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d001      	beq.n	80036dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40023800 	.word	0x40023800

080036ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e042      	b.n	8003784 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fd f884 	bl	8000820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2224      	movs	r2, #36	@ 0x24
 800371c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800372e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f82b 	bl	800378c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800378c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003790:	b0c0      	sub	sp, #256	@ 0x100
 8003792:	af00      	add	r7, sp, #0
 8003794:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80037a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a8:	68d9      	ldr	r1, [r3, #12]
 80037aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	ea40 0301 	orr.w	r3, r0, r1
 80037b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	431a      	orrs	r2, r3
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80037e4:	f021 010c 	bic.w	r1, r1, #12
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80037f2:	430b      	orrs	r3, r1
 80037f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003806:	6999      	ldr	r1, [r3, #24]
 8003808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	ea40 0301 	orr.w	r3, r0, r1
 8003812:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4b8f      	ldr	r3, [pc, #572]	@ (8003a58 <UART_SetConfig+0x2cc>)
 800381c:	429a      	cmp	r2, r3
 800381e:	d005      	beq.n	800382c <UART_SetConfig+0xa0>
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	4b8d      	ldr	r3, [pc, #564]	@ (8003a5c <UART_SetConfig+0x2d0>)
 8003828:	429a      	cmp	r2, r3
 800382a:	d104      	bne.n	8003836 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800382c:	f7ff fb02 	bl	8002e34 <HAL_RCC_GetPCLK2Freq>
 8003830:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003834:	e003      	b.n	800383e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003836:	f7ff fae9 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 800383a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800383e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003848:	f040 810c 	bne.w	8003a64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800384c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003850:	2200      	movs	r2, #0
 8003852:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003856:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800385a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800385e:	4622      	mov	r2, r4
 8003860:	462b      	mov	r3, r5
 8003862:	1891      	adds	r1, r2, r2
 8003864:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003866:	415b      	adcs	r3, r3
 8003868:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800386a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800386e:	4621      	mov	r1, r4
 8003870:	eb12 0801 	adds.w	r8, r2, r1
 8003874:	4629      	mov	r1, r5
 8003876:	eb43 0901 	adc.w	r9, r3, r1
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003886:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800388a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800388e:	4690      	mov	r8, r2
 8003890:	4699      	mov	r9, r3
 8003892:	4623      	mov	r3, r4
 8003894:	eb18 0303 	adds.w	r3, r8, r3
 8003898:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800389c:	462b      	mov	r3, r5
 800389e:	eb49 0303 	adc.w	r3, r9, r3
 80038a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80038b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038ba:	460b      	mov	r3, r1
 80038bc:	18db      	adds	r3, r3, r3
 80038be:	653b      	str	r3, [r7, #80]	@ 0x50
 80038c0:	4613      	mov	r3, r2
 80038c2:	eb42 0303 	adc.w	r3, r2, r3
 80038c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80038c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80038cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80038d0:	f7fc fcee 	bl	80002b0 <__aeabi_uldivmod>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4b61      	ldr	r3, [pc, #388]	@ (8003a60 <UART_SetConfig+0x2d4>)
 80038da:	fba3 2302 	umull	r2, r3, r3, r2
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	011c      	lsls	r4, r3, #4
 80038e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038e6:	2200      	movs	r2, #0
 80038e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80038f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80038f4:	4642      	mov	r2, r8
 80038f6:	464b      	mov	r3, r9
 80038f8:	1891      	adds	r1, r2, r2
 80038fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80038fc:	415b      	adcs	r3, r3
 80038fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003900:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003904:	4641      	mov	r1, r8
 8003906:	eb12 0a01 	adds.w	sl, r2, r1
 800390a:	4649      	mov	r1, r9
 800390c:	eb43 0b01 	adc.w	fp, r3, r1
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800391c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003920:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003924:	4692      	mov	sl, r2
 8003926:	469b      	mov	fp, r3
 8003928:	4643      	mov	r3, r8
 800392a:	eb1a 0303 	adds.w	r3, sl, r3
 800392e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003932:	464b      	mov	r3, r9
 8003934:	eb4b 0303 	adc.w	r3, fp, r3
 8003938:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003948:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800394c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003950:	460b      	mov	r3, r1
 8003952:	18db      	adds	r3, r3, r3
 8003954:	643b      	str	r3, [r7, #64]	@ 0x40
 8003956:	4613      	mov	r3, r2
 8003958:	eb42 0303 	adc.w	r3, r2, r3
 800395c:	647b      	str	r3, [r7, #68]	@ 0x44
 800395e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003962:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003966:	f7fc fca3 	bl	80002b0 <__aeabi_uldivmod>
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	4611      	mov	r1, r2
 8003970:	4b3b      	ldr	r3, [pc, #236]	@ (8003a60 <UART_SetConfig+0x2d4>)
 8003972:	fba3 2301 	umull	r2, r3, r3, r1
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	2264      	movs	r2, #100	@ 0x64
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	1acb      	subs	r3, r1, r3
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003986:	4b36      	ldr	r3, [pc, #216]	@ (8003a60 <UART_SetConfig+0x2d4>)
 8003988:	fba3 2302 	umull	r2, r3, r3, r2
 800398c:	095b      	lsrs	r3, r3, #5
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003994:	441c      	add	r4, r3
 8003996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800399a:	2200      	movs	r2, #0
 800399c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80039a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80039a8:	4642      	mov	r2, r8
 80039aa:	464b      	mov	r3, r9
 80039ac:	1891      	adds	r1, r2, r2
 80039ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039b0:	415b      	adcs	r3, r3
 80039b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80039b8:	4641      	mov	r1, r8
 80039ba:	1851      	adds	r1, r2, r1
 80039bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80039be:	4649      	mov	r1, r9
 80039c0:	414b      	adcs	r3, r1
 80039c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80039c4:	f04f 0200 	mov.w	r2, #0
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80039d0:	4659      	mov	r1, fp
 80039d2:	00cb      	lsls	r3, r1, #3
 80039d4:	4651      	mov	r1, sl
 80039d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039da:	4651      	mov	r1, sl
 80039dc:	00ca      	lsls	r2, r1, #3
 80039de:	4610      	mov	r0, r2
 80039e0:	4619      	mov	r1, r3
 80039e2:	4603      	mov	r3, r0
 80039e4:	4642      	mov	r2, r8
 80039e6:	189b      	adds	r3, r3, r2
 80039e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039ec:	464b      	mov	r3, r9
 80039ee:	460a      	mov	r2, r1
 80039f0:	eb42 0303 	adc.w	r3, r2, r3
 80039f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	18db      	adds	r3, r3, r3
 8003a10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a12:	4613      	mov	r3, r2
 8003a14:	eb42 0303 	adc.w	r3, r2, r3
 8003a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a22:	f7fc fc45 	bl	80002b0 <__aeabi_uldivmod>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a60 <UART_SetConfig+0x2d4>)
 8003a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a30:	095b      	lsrs	r3, r3, #5
 8003a32:	2164      	movs	r1, #100	@ 0x64
 8003a34:	fb01 f303 	mul.w	r3, r1, r3
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	3332      	adds	r3, #50	@ 0x32
 8003a3e:	4a08      	ldr	r2, [pc, #32]	@ (8003a60 <UART_SetConfig+0x2d4>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	095b      	lsrs	r3, r3, #5
 8003a46:	f003 0207 	and.w	r2, r3, #7
 8003a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4422      	add	r2, r4
 8003a52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a54:	e106      	b.n	8003c64 <UART_SetConfig+0x4d8>
 8003a56:	bf00      	nop
 8003a58:	40011000 	.word	0x40011000
 8003a5c:	40011400 	.word	0x40011400
 8003a60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a76:	4642      	mov	r2, r8
 8003a78:	464b      	mov	r3, r9
 8003a7a:	1891      	adds	r1, r2, r2
 8003a7c:	6239      	str	r1, [r7, #32]
 8003a7e:	415b      	adcs	r3, r3
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a86:	4641      	mov	r1, r8
 8003a88:	1854      	adds	r4, r2, r1
 8003a8a:	4649      	mov	r1, r9
 8003a8c:	eb43 0501 	adc.w	r5, r3, r1
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	00eb      	lsls	r3, r5, #3
 8003a9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a9e:	00e2      	lsls	r2, r4, #3
 8003aa0:	4614      	mov	r4, r2
 8003aa2:	461d      	mov	r5, r3
 8003aa4:	4643      	mov	r3, r8
 8003aa6:	18e3      	adds	r3, r4, r3
 8003aa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003aac:	464b      	mov	r3, r9
 8003aae:	eb45 0303 	adc.w	r3, r5, r3
 8003ab2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ac2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	f04f 0300 	mov.w	r3, #0
 8003ace:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	008b      	lsls	r3, r1, #2
 8003ad6:	4621      	mov	r1, r4
 8003ad8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003adc:	4621      	mov	r1, r4
 8003ade:	008a      	lsls	r2, r1, #2
 8003ae0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ae4:	f7fc fbe4 	bl	80002b0 <__aeabi_uldivmod>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4b60      	ldr	r3, [pc, #384]	@ (8003c70 <UART_SetConfig+0x4e4>)
 8003aee:	fba3 2302 	umull	r2, r3, r3, r2
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	011c      	lsls	r4, r3, #4
 8003af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003afa:	2200      	movs	r2, #0
 8003afc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b08:	4642      	mov	r2, r8
 8003b0a:	464b      	mov	r3, r9
 8003b0c:	1891      	adds	r1, r2, r2
 8003b0e:	61b9      	str	r1, [r7, #24]
 8003b10:	415b      	adcs	r3, r3
 8003b12:	61fb      	str	r3, [r7, #28]
 8003b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b18:	4641      	mov	r1, r8
 8003b1a:	1851      	adds	r1, r2, r1
 8003b1c:	6139      	str	r1, [r7, #16]
 8003b1e:	4649      	mov	r1, r9
 8003b20:	414b      	adcs	r3, r1
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b30:	4659      	mov	r1, fp
 8003b32:	00cb      	lsls	r3, r1, #3
 8003b34:	4651      	mov	r1, sl
 8003b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b3a:	4651      	mov	r1, sl
 8003b3c:	00ca      	lsls	r2, r1, #3
 8003b3e:	4610      	mov	r0, r2
 8003b40:	4619      	mov	r1, r3
 8003b42:	4603      	mov	r3, r0
 8003b44:	4642      	mov	r2, r8
 8003b46:	189b      	adds	r3, r3, r2
 8003b48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b4c:	464b      	mov	r3, r9
 8003b4e:	460a      	mov	r2, r1
 8003b50:	eb42 0303 	adc.w	r3, r2, r3
 8003b54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b62:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b70:	4649      	mov	r1, r9
 8003b72:	008b      	lsls	r3, r1, #2
 8003b74:	4641      	mov	r1, r8
 8003b76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b7a:	4641      	mov	r1, r8
 8003b7c:	008a      	lsls	r2, r1, #2
 8003b7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b82:	f7fc fb95 	bl	80002b0 <__aeabi_uldivmod>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4b38      	ldr	r3, [pc, #224]	@ (8003c70 <UART_SetConfig+0x4e4>)
 8003b8e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	2264      	movs	r2, #100	@ 0x64
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	1acb      	subs	r3, r1, r3
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	3332      	adds	r3, #50	@ 0x32
 8003ba0:	4a33      	ldr	r2, [pc, #204]	@ (8003c70 <UART_SetConfig+0x4e4>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bac:	441c      	add	r4, r3
 8003bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bb6:	677a      	str	r2, [r7, #116]	@ 0x74
 8003bb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003bbc:	4642      	mov	r2, r8
 8003bbe:	464b      	mov	r3, r9
 8003bc0:	1891      	adds	r1, r2, r2
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	415b      	adcs	r3, r3
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bcc:	4641      	mov	r1, r8
 8003bce:	1851      	adds	r1, r2, r1
 8003bd0:	6039      	str	r1, [r7, #0]
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	414b      	adcs	r3, r1
 8003bd6:	607b      	str	r3, [r7, #4]
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003be4:	4659      	mov	r1, fp
 8003be6:	00cb      	lsls	r3, r1, #3
 8003be8:	4651      	mov	r1, sl
 8003bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bee:	4651      	mov	r1, sl
 8003bf0:	00ca      	lsls	r2, r1, #3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	4642      	mov	r2, r8
 8003bfa:	189b      	adds	r3, r3, r2
 8003bfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bfe:	464b      	mov	r3, r9
 8003c00:	460a      	mov	r2, r1
 8003c02:	eb42 0303 	adc.w	r3, r2, r3
 8003c06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c12:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c20:	4649      	mov	r1, r9
 8003c22:	008b      	lsls	r3, r1, #2
 8003c24:	4641      	mov	r1, r8
 8003c26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c2a:	4641      	mov	r1, r8
 8003c2c:	008a      	lsls	r2, r1, #2
 8003c2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c32:	f7fc fb3d 	bl	80002b0 <__aeabi_uldivmod>
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c70 <UART_SetConfig+0x4e4>)
 8003c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c40:	095b      	lsrs	r3, r3, #5
 8003c42:	2164      	movs	r1, #100	@ 0x64
 8003c44:	fb01 f303 	mul.w	r3, r1, r3
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	3332      	adds	r3, #50	@ 0x32
 8003c4e:	4a08      	ldr	r2, [pc, #32]	@ (8003c70 <UART_SetConfig+0x4e4>)
 8003c50:	fba2 2303 	umull	r2, r3, r2, r3
 8003c54:	095b      	lsrs	r3, r3, #5
 8003c56:	f003 020f 	and.w	r2, r3, #15
 8003c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4422      	add	r2, r4
 8003c62:	609a      	str	r2, [r3, #8]
}
 8003c64:	bf00      	nop
 8003c66:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c70:	51eb851f 	.word	0x51eb851f

08003c74 <siprintf>:
 8003c74:	b40e      	push	{r1, r2, r3}
 8003c76:	b510      	push	{r4, lr}
 8003c78:	b09d      	sub	sp, #116	@ 0x74
 8003c7a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003c7c:	9002      	str	r0, [sp, #8]
 8003c7e:	9006      	str	r0, [sp, #24]
 8003c80:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003c84:	480a      	ldr	r0, [pc, #40]	@ (8003cb0 <siprintf+0x3c>)
 8003c86:	9107      	str	r1, [sp, #28]
 8003c88:	9104      	str	r1, [sp, #16]
 8003c8a:	490a      	ldr	r1, [pc, #40]	@ (8003cb4 <siprintf+0x40>)
 8003c8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c90:	9105      	str	r1, [sp, #20]
 8003c92:	2400      	movs	r4, #0
 8003c94:	a902      	add	r1, sp, #8
 8003c96:	6800      	ldr	r0, [r0, #0]
 8003c98:	9301      	str	r3, [sp, #4]
 8003c9a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003c9c:	f000 f994 	bl	8003fc8 <_svfiprintf_r>
 8003ca0:	9b02      	ldr	r3, [sp, #8]
 8003ca2:	701c      	strb	r4, [r3, #0]
 8003ca4:	b01d      	add	sp, #116	@ 0x74
 8003ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003caa:	b003      	add	sp, #12
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	2000000c 	.word	0x2000000c
 8003cb4:	ffff0208 	.word	0xffff0208

08003cb8 <memset>:
 8003cb8:	4402      	add	r2, r0
 8003cba:	4603      	mov	r3, r0
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d100      	bne.n	8003cc2 <memset+0xa>
 8003cc0:	4770      	bx	lr
 8003cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8003cc6:	e7f9      	b.n	8003cbc <memset+0x4>

08003cc8 <__errno>:
 8003cc8:	4b01      	ldr	r3, [pc, #4]	@ (8003cd0 <__errno+0x8>)
 8003cca:	6818      	ldr	r0, [r3, #0]
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	2000000c 	.word	0x2000000c

08003cd4 <__libc_init_array>:
 8003cd4:	b570      	push	{r4, r5, r6, lr}
 8003cd6:	4d0d      	ldr	r5, [pc, #52]	@ (8003d0c <__libc_init_array+0x38>)
 8003cd8:	4c0d      	ldr	r4, [pc, #52]	@ (8003d10 <__libc_init_array+0x3c>)
 8003cda:	1b64      	subs	r4, r4, r5
 8003cdc:	10a4      	asrs	r4, r4, #2
 8003cde:	2600      	movs	r6, #0
 8003ce0:	42a6      	cmp	r6, r4
 8003ce2:	d109      	bne.n	8003cf8 <__libc_init_array+0x24>
 8003ce4:	4d0b      	ldr	r5, [pc, #44]	@ (8003d14 <__libc_init_array+0x40>)
 8003ce6:	4c0c      	ldr	r4, [pc, #48]	@ (8003d18 <__libc_init_array+0x44>)
 8003ce8:	f000 fc64 	bl	80045b4 <_init>
 8003cec:	1b64      	subs	r4, r4, r5
 8003cee:	10a4      	asrs	r4, r4, #2
 8003cf0:	2600      	movs	r6, #0
 8003cf2:	42a6      	cmp	r6, r4
 8003cf4:	d105      	bne.n	8003d02 <__libc_init_array+0x2e>
 8003cf6:	bd70      	pop	{r4, r5, r6, pc}
 8003cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cfc:	4798      	blx	r3
 8003cfe:	3601      	adds	r6, #1
 8003d00:	e7ee      	b.n	8003ce0 <__libc_init_array+0xc>
 8003d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d06:	4798      	blx	r3
 8003d08:	3601      	adds	r6, #1
 8003d0a:	e7f2      	b.n	8003cf2 <__libc_init_array+0x1e>
 8003d0c:	0800469c 	.word	0x0800469c
 8003d10:	0800469c 	.word	0x0800469c
 8003d14:	0800469c 	.word	0x0800469c
 8003d18:	080046a0 	.word	0x080046a0

08003d1c <__retarget_lock_acquire_recursive>:
 8003d1c:	4770      	bx	lr

08003d1e <__retarget_lock_release_recursive>:
 8003d1e:	4770      	bx	lr

08003d20 <_free_r>:
 8003d20:	b538      	push	{r3, r4, r5, lr}
 8003d22:	4605      	mov	r5, r0
 8003d24:	2900      	cmp	r1, #0
 8003d26:	d041      	beq.n	8003dac <_free_r+0x8c>
 8003d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d2c:	1f0c      	subs	r4, r1, #4
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	bfb8      	it	lt
 8003d32:	18e4      	addlt	r4, r4, r3
 8003d34:	f000 f8e0 	bl	8003ef8 <__malloc_lock>
 8003d38:	4a1d      	ldr	r2, [pc, #116]	@ (8003db0 <_free_r+0x90>)
 8003d3a:	6813      	ldr	r3, [r2, #0]
 8003d3c:	b933      	cbnz	r3, 8003d4c <_free_r+0x2c>
 8003d3e:	6063      	str	r3, [r4, #4]
 8003d40:	6014      	str	r4, [r2, #0]
 8003d42:	4628      	mov	r0, r5
 8003d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d48:	f000 b8dc 	b.w	8003f04 <__malloc_unlock>
 8003d4c:	42a3      	cmp	r3, r4
 8003d4e:	d908      	bls.n	8003d62 <_free_r+0x42>
 8003d50:	6820      	ldr	r0, [r4, #0]
 8003d52:	1821      	adds	r1, r4, r0
 8003d54:	428b      	cmp	r3, r1
 8003d56:	bf01      	itttt	eq
 8003d58:	6819      	ldreq	r1, [r3, #0]
 8003d5a:	685b      	ldreq	r3, [r3, #4]
 8003d5c:	1809      	addeq	r1, r1, r0
 8003d5e:	6021      	streq	r1, [r4, #0]
 8003d60:	e7ed      	b.n	8003d3e <_free_r+0x1e>
 8003d62:	461a      	mov	r2, r3
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	b10b      	cbz	r3, 8003d6c <_free_r+0x4c>
 8003d68:	42a3      	cmp	r3, r4
 8003d6a:	d9fa      	bls.n	8003d62 <_free_r+0x42>
 8003d6c:	6811      	ldr	r1, [r2, #0]
 8003d6e:	1850      	adds	r0, r2, r1
 8003d70:	42a0      	cmp	r0, r4
 8003d72:	d10b      	bne.n	8003d8c <_free_r+0x6c>
 8003d74:	6820      	ldr	r0, [r4, #0]
 8003d76:	4401      	add	r1, r0
 8003d78:	1850      	adds	r0, r2, r1
 8003d7a:	4283      	cmp	r3, r0
 8003d7c:	6011      	str	r1, [r2, #0]
 8003d7e:	d1e0      	bne.n	8003d42 <_free_r+0x22>
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	6053      	str	r3, [r2, #4]
 8003d86:	4408      	add	r0, r1
 8003d88:	6010      	str	r0, [r2, #0]
 8003d8a:	e7da      	b.n	8003d42 <_free_r+0x22>
 8003d8c:	d902      	bls.n	8003d94 <_free_r+0x74>
 8003d8e:	230c      	movs	r3, #12
 8003d90:	602b      	str	r3, [r5, #0]
 8003d92:	e7d6      	b.n	8003d42 <_free_r+0x22>
 8003d94:	6820      	ldr	r0, [r4, #0]
 8003d96:	1821      	adds	r1, r4, r0
 8003d98:	428b      	cmp	r3, r1
 8003d9a:	bf04      	itt	eq
 8003d9c:	6819      	ldreq	r1, [r3, #0]
 8003d9e:	685b      	ldreq	r3, [r3, #4]
 8003da0:	6063      	str	r3, [r4, #4]
 8003da2:	bf04      	itt	eq
 8003da4:	1809      	addeq	r1, r1, r0
 8003da6:	6021      	streq	r1, [r4, #0]
 8003da8:	6054      	str	r4, [r2, #4]
 8003daa:	e7ca      	b.n	8003d42 <_free_r+0x22>
 8003dac:	bd38      	pop	{r3, r4, r5, pc}
 8003dae:	bf00      	nop
 8003db0:	20000400 	.word	0x20000400

08003db4 <sbrk_aligned>:
 8003db4:	b570      	push	{r4, r5, r6, lr}
 8003db6:	4e0f      	ldr	r6, [pc, #60]	@ (8003df4 <sbrk_aligned+0x40>)
 8003db8:	460c      	mov	r4, r1
 8003dba:	6831      	ldr	r1, [r6, #0]
 8003dbc:	4605      	mov	r5, r0
 8003dbe:	b911      	cbnz	r1, 8003dc6 <sbrk_aligned+0x12>
 8003dc0:	f000 fba4 	bl	800450c <_sbrk_r>
 8003dc4:	6030      	str	r0, [r6, #0]
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	4628      	mov	r0, r5
 8003dca:	f000 fb9f 	bl	800450c <_sbrk_r>
 8003dce:	1c43      	adds	r3, r0, #1
 8003dd0:	d103      	bne.n	8003dda <sbrk_aligned+0x26>
 8003dd2:	f04f 34ff 	mov.w	r4, #4294967295
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	bd70      	pop	{r4, r5, r6, pc}
 8003dda:	1cc4      	adds	r4, r0, #3
 8003ddc:	f024 0403 	bic.w	r4, r4, #3
 8003de0:	42a0      	cmp	r0, r4
 8003de2:	d0f8      	beq.n	8003dd6 <sbrk_aligned+0x22>
 8003de4:	1a21      	subs	r1, r4, r0
 8003de6:	4628      	mov	r0, r5
 8003de8:	f000 fb90 	bl	800450c <_sbrk_r>
 8003dec:	3001      	adds	r0, #1
 8003dee:	d1f2      	bne.n	8003dd6 <sbrk_aligned+0x22>
 8003df0:	e7ef      	b.n	8003dd2 <sbrk_aligned+0x1e>
 8003df2:	bf00      	nop
 8003df4:	200003fc 	.word	0x200003fc

08003df8 <_malloc_r>:
 8003df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dfc:	1ccd      	adds	r5, r1, #3
 8003dfe:	f025 0503 	bic.w	r5, r5, #3
 8003e02:	3508      	adds	r5, #8
 8003e04:	2d0c      	cmp	r5, #12
 8003e06:	bf38      	it	cc
 8003e08:	250c      	movcc	r5, #12
 8003e0a:	2d00      	cmp	r5, #0
 8003e0c:	4606      	mov	r6, r0
 8003e0e:	db01      	blt.n	8003e14 <_malloc_r+0x1c>
 8003e10:	42a9      	cmp	r1, r5
 8003e12:	d904      	bls.n	8003e1e <_malloc_r+0x26>
 8003e14:	230c      	movs	r3, #12
 8003e16:	6033      	str	r3, [r6, #0]
 8003e18:	2000      	movs	r0, #0
 8003e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ef4 <_malloc_r+0xfc>
 8003e22:	f000 f869 	bl	8003ef8 <__malloc_lock>
 8003e26:	f8d8 3000 	ldr.w	r3, [r8]
 8003e2a:	461c      	mov	r4, r3
 8003e2c:	bb44      	cbnz	r4, 8003e80 <_malloc_r+0x88>
 8003e2e:	4629      	mov	r1, r5
 8003e30:	4630      	mov	r0, r6
 8003e32:	f7ff ffbf 	bl	8003db4 <sbrk_aligned>
 8003e36:	1c43      	adds	r3, r0, #1
 8003e38:	4604      	mov	r4, r0
 8003e3a:	d158      	bne.n	8003eee <_malloc_r+0xf6>
 8003e3c:	f8d8 4000 	ldr.w	r4, [r8]
 8003e40:	4627      	mov	r7, r4
 8003e42:	2f00      	cmp	r7, #0
 8003e44:	d143      	bne.n	8003ece <_malloc_r+0xd6>
 8003e46:	2c00      	cmp	r4, #0
 8003e48:	d04b      	beq.n	8003ee2 <_malloc_r+0xea>
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	4639      	mov	r1, r7
 8003e4e:	4630      	mov	r0, r6
 8003e50:	eb04 0903 	add.w	r9, r4, r3
 8003e54:	f000 fb5a 	bl	800450c <_sbrk_r>
 8003e58:	4581      	cmp	r9, r0
 8003e5a:	d142      	bne.n	8003ee2 <_malloc_r+0xea>
 8003e5c:	6821      	ldr	r1, [r4, #0]
 8003e5e:	1a6d      	subs	r5, r5, r1
 8003e60:	4629      	mov	r1, r5
 8003e62:	4630      	mov	r0, r6
 8003e64:	f7ff ffa6 	bl	8003db4 <sbrk_aligned>
 8003e68:	3001      	adds	r0, #1
 8003e6a:	d03a      	beq.n	8003ee2 <_malloc_r+0xea>
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	442b      	add	r3, r5
 8003e70:	6023      	str	r3, [r4, #0]
 8003e72:	f8d8 3000 	ldr.w	r3, [r8]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	bb62      	cbnz	r2, 8003ed4 <_malloc_r+0xdc>
 8003e7a:	f8c8 7000 	str.w	r7, [r8]
 8003e7e:	e00f      	b.n	8003ea0 <_malloc_r+0xa8>
 8003e80:	6822      	ldr	r2, [r4, #0]
 8003e82:	1b52      	subs	r2, r2, r5
 8003e84:	d420      	bmi.n	8003ec8 <_malloc_r+0xd0>
 8003e86:	2a0b      	cmp	r2, #11
 8003e88:	d917      	bls.n	8003eba <_malloc_r+0xc2>
 8003e8a:	1961      	adds	r1, r4, r5
 8003e8c:	42a3      	cmp	r3, r4
 8003e8e:	6025      	str	r5, [r4, #0]
 8003e90:	bf18      	it	ne
 8003e92:	6059      	strne	r1, [r3, #4]
 8003e94:	6863      	ldr	r3, [r4, #4]
 8003e96:	bf08      	it	eq
 8003e98:	f8c8 1000 	streq.w	r1, [r8]
 8003e9c:	5162      	str	r2, [r4, r5]
 8003e9e:	604b      	str	r3, [r1, #4]
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	f000 f82f 	bl	8003f04 <__malloc_unlock>
 8003ea6:	f104 000b 	add.w	r0, r4, #11
 8003eaa:	1d23      	adds	r3, r4, #4
 8003eac:	f020 0007 	bic.w	r0, r0, #7
 8003eb0:	1ac2      	subs	r2, r0, r3
 8003eb2:	bf1c      	itt	ne
 8003eb4:	1a1b      	subne	r3, r3, r0
 8003eb6:	50a3      	strne	r3, [r4, r2]
 8003eb8:	e7af      	b.n	8003e1a <_malloc_r+0x22>
 8003eba:	6862      	ldr	r2, [r4, #4]
 8003ebc:	42a3      	cmp	r3, r4
 8003ebe:	bf0c      	ite	eq
 8003ec0:	f8c8 2000 	streq.w	r2, [r8]
 8003ec4:	605a      	strne	r2, [r3, #4]
 8003ec6:	e7eb      	b.n	8003ea0 <_malloc_r+0xa8>
 8003ec8:	4623      	mov	r3, r4
 8003eca:	6864      	ldr	r4, [r4, #4]
 8003ecc:	e7ae      	b.n	8003e2c <_malloc_r+0x34>
 8003ece:	463c      	mov	r4, r7
 8003ed0:	687f      	ldr	r7, [r7, #4]
 8003ed2:	e7b6      	b.n	8003e42 <_malloc_r+0x4a>
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	42a3      	cmp	r3, r4
 8003eda:	d1fb      	bne.n	8003ed4 <_malloc_r+0xdc>
 8003edc:	2300      	movs	r3, #0
 8003ede:	6053      	str	r3, [r2, #4]
 8003ee0:	e7de      	b.n	8003ea0 <_malloc_r+0xa8>
 8003ee2:	230c      	movs	r3, #12
 8003ee4:	6033      	str	r3, [r6, #0]
 8003ee6:	4630      	mov	r0, r6
 8003ee8:	f000 f80c 	bl	8003f04 <__malloc_unlock>
 8003eec:	e794      	b.n	8003e18 <_malloc_r+0x20>
 8003eee:	6005      	str	r5, [r0, #0]
 8003ef0:	e7d6      	b.n	8003ea0 <_malloc_r+0xa8>
 8003ef2:	bf00      	nop
 8003ef4:	20000400 	.word	0x20000400

08003ef8 <__malloc_lock>:
 8003ef8:	4801      	ldr	r0, [pc, #4]	@ (8003f00 <__malloc_lock+0x8>)
 8003efa:	f7ff bf0f 	b.w	8003d1c <__retarget_lock_acquire_recursive>
 8003efe:	bf00      	nop
 8003f00:	200003f8 	.word	0x200003f8

08003f04 <__malloc_unlock>:
 8003f04:	4801      	ldr	r0, [pc, #4]	@ (8003f0c <__malloc_unlock+0x8>)
 8003f06:	f7ff bf0a 	b.w	8003d1e <__retarget_lock_release_recursive>
 8003f0a:	bf00      	nop
 8003f0c:	200003f8 	.word	0x200003f8

08003f10 <__ssputs_r>:
 8003f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f14:	688e      	ldr	r6, [r1, #8]
 8003f16:	461f      	mov	r7, r3
 8003f18:	42be      	cmp	r6, r7
 8003f1a:	680b      	ldr	r3, [r1, #0]
 8003f1c:	4682      	mov	sl, r0
 8003f1e:	460c      	mov	r4, r1
 8003f20:	4690      	mov	r8, r2
 8003f22:	d82d      	bhi.n	8003f80 <__ssputs_r+0x70>
 8003f24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f2c:	d026      	beq.n	8003f7c <__ssputs_r+0x6c>
 8003f2e:	6965      	ldr	r5, [r4, #20]
 8003f30:	6909      	ldr	r1, [r1, #16]
 8003f32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f36:	eba3 0901 	sub.w	r9, r3, r1
 8003f3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f3e:	1c7b      	adds	r3, r7, #1
 8003f40:	444b      	add	r3, r9
 8003f42:	106d      	asrs	r5, r5, #1
 8003f44:	429d      	cmp	r5, r3
 8003f46:	bf38      	it	cc
 8003f48:	461d      	movcc	r5, r3
 8003f4a:	0553      	lsls	r3, r2, #21
 8003f4c:	d527      	bpl.n	8003f9e <__ssputs_r+0x8e>
 8003f4e:	4629      	mov	r1, r5
 8003f50:	f7ff ff52 	bl	8003df8 <_malloc_r>
 8003f54:	4606      	mov	r6, r0
 8003f56:	b360      	cbz	r0, 8003fb2 <__ssputs_r+0xa2>
 8003f58:	6921      	ldr	r1, [r4, #16]
 8003f5a:	464a      	mov	r2, r9
 8003f5c:	f000 fae6 	bl	800452c <memcpy>
 8003f60:	89a3      	ldrh	r3, [r4, #12]
 8003f62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f6a:	81a3      	strh	r3, [r4, #12]
 8003f6c:	6126      	str	r6, [r4, #16]
 8003f6e:	6165      	str	r5, [r4, #20]
 8003f70:	444e      	add	r6, r9
 8003f72:	eba5 0509 	sub.w	r5, r5, r9
 8003f76:	6026      	str	r6, [r4, #0]
 8003f78:	60a5      	str	r5, [r4, #8]
 8003f7a:	463e      	mov	r6, r7
 8003f7c:	42be      	cmp	r6, r7
 8003f7e:	d900      	bls.n	8003f82 <__ssputs_r+0x72>
 8003f80:	463e      	mov	r6, r7
 8003f82:	6820      	ldr	r0, [r4, #0]
 8003f84:	4632      	mov	r2, r6
 8003f86:	4641      	mov	r1, r8
 8003f88:	f000 faa6 	bl	80044d8 <memmove>
 8003f8c:	68a3      	ldr	r3, [r4, #8]
 8003f8e:	1b9b      	subs	r3, r3, r6
 8003f90:	60a3      	str	r3, [r4, #8]
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	4433      	add	r3, r6
 8003f96:	6023      	str	r3, [r4, #0]
 8003f98:	2000      	movs	r0, #0
 8003f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f9e:	462a      	mov	r2, r5
 8003fa0:	f000 fad2 	bl	8004548 <_realloc_r>
 8003fa4:	4606      	mov	r6, r0
 8003fa6:	2800      	cmp	r0, #0
 8003fa8:	d1e0      	bne.n	8003f6c <__ssputs_r+0x5c>
 8003faa:	6921      	ldr	r1, [r4, #16]
 8003fac:	4650      	mov	r0, sl
 8003fae:	f7ff feb7 	bl	8003d20 <_free_r>
 8003fb2:	230c      	movs	r3, #12
 8003fb4:	f8ca 3000 	str.w	r3, [sl]
 8003fb8:	89a3      	ldrh	r3, [r4, #12]
 8003fba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fbe:	81a3      	strh	r3, [r4, #12]
 8003fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc4:	e7e9      	b.n	8003f9a <__ssputs_r+0x8a>
	...

08003fc8 <_svfiprintf_r>:
 8003fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fcc:	4698      	mov	r8, r3
 8003fce:	898b      	ldrh	r3, [r1, #12]
 8003fd0:	061b      	lsls	r3, r3, #24
 8003fd2:	b09d      	sub	sp, #116	@ 0x74
 8003fd4:	4607      	mov	r7, r0
 8003fd6:	460d      	mov	r5, r1
 8003fd8:	4614      	mov	r4, r2
 8003fda:	d510      	bpl.n	8003ffe <_svfiprintf_r+0x36>
 8003fdc:	690b      	ldr	r3, [r1, #16]
 8003fde:	b973      	cbnz	r3, 8003ffe <_svfiprintf_r+0x36>
 8003fe0:	2140      	movs	r1, #64	@ 0x40
 8003fe2:	f7ff ff09 	bl	8003df8 <_malloc_r>
 8003fe6:	6028      	str	r0, [r5, #0]
 8003fe8:	6128      	str	r0, [r5, #16]
 8003fea:	b930      	cbnz	r0, 8003ffa <_svfiprintf_r+0x32>
 8003fec:	230c      	movs	r3, #12
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff4:	b01d      	add	sp, #116	@ 0x74
 8003ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ffa:	2340      	movs	r3, #64	@ 0x40
 8003ffc:	616b      	str	r3, [r5, #20]
 8003ffe:	2300      	movs	r3, #0
 8004000:	9309      	str	r3, [sp, #36]	@ 0x24
 8004002:	2320      	movs	r3, #32
 8004004:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004008:	f8cd 800c 	str.w	r8, [sp, #12]
 800400c:	2330      	movs	r3, #48	@ 0x30
 800400e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80041ac <_svfiprintf_r+0x1e4>
 8004012:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004016:	f04f 0901 	mov.w	r9, #1
 800401a:	4623      	mov	r3, r4
 800401c:	469a      	mov	sl, r3
 800401e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004022:	b10a      	cbz	r2, 8004028 <_svfiprintf_r+0x60>
 8004024:	2a25      	cmp	r2, #37	@ 0x25
 8004026:	d1f9      	bne.n	800401c <_svfiprintf_r+0x54>
 8004028:	ebba 0b04 	subs.w	fp, sl, r4
 800402c:	d00b      	beq.n	8004046 <_svfiprintf_r+0x7e>
 800402e:	465b      	mov	r3, fp
 8004030:	4622      	mov	r2, r4
 8004032:	4629      	mov	r1, r5
 8004034:	4638      	mov	r0, r7
 8004036:	f7ff ff6b 	bl	8003f10 <__ssputs_r>
 800403a:	3001      	adds	r0, #1
 800403c:	f000 80a7 	beq.w	800418e <_svfiprintf_r+0x1c6>
 8004040:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004042:	445a      	add	r2, fp
 8004044:	9209      	str	r2, [sp, #36]	@ 0x24
 8004046:	f89a 3000 	ldrb.w	r3, [sl]
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 809f 	beq.w	800418e <_svfiprintf_r+0x1c6>
 8004050:	2300      	movs	r3, #0
 8004052:	f04f 32ff 	mov.w	r2, #4294967295
 8004056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800405a:	f10a 0a01 	add.w	sl, sl, #1
 800405e:	9304      	str	r3, [sp, #16]
 8004060:	9307      	str	r3, [sp, #28]
 8004062:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004066:	931a      	str	r3, [sp, #104]	@ 0x68
 8004068:	4654      	mov	r4, sl
 800406a:	2205      	movs	r2, #5
 800406c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004070:	484e      	ldr	r0, [pc, #312]	@ (80041ac <_svfiprintf_r+0x1e4>)
 8004072:	f7fc f8cd 	bl	8000210 <memchr>
 8004076:	9a04      	ldr	r2, [sp, #16]
 8004078:	b9d8      	cbnz	r0, 80040b2 <_svfiprintf_r+0xea>
 800407a:	06d0      	lsls	r0, r2, #27
 800407c:	bf44      	itt	mi
 800407e:	2320      	movmi	r3, #32
 8004080:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004084:	0711      	lsls	r1, r2, #28
 8004086:	bf44      	itt	mi
 8004088:	232b      	movmi	r3, #43	@ 0x2b
 800408a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800408e:	f89a 3000 	ldrb.w	r3, [sl]
 8004092:	2b2a      	cmp	r3, #42	@ 0x2a
 8004094:	d015      	beq.n	80040c2 <_svfiprintf_r+0xfa>
 8004096:	9a07      	ldr	r2, [sp, #28]
 8004098:	4654      	mov	r4, sl
 800409a:	2000      	movs	r0, #0
 800409c:	f04f 0c0a 	mov.w	ip, #10
 80040a0:	4621      	mov	r1, r4
 80040a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040a6:	3b30      	subs	r3, #48	@ 0x30
 80040a8:	2b09      	cmp	r3, #9
 80040aa:	d94b      	bls.n	8004144 <_svfiprintf_r+0x17c>
 80040ac:	b1b0      	cbz	r0, 80040dc <_svfiprintf_r+0x114>
 80040ae:	9207      	str	r2, [sp, #28]
 80040b0:	e014      	b.n	80040dc <_svfiprintf_r+0x114>
 80040b2:	eba0 0308 	sub.w	r3, r0, r8
 80040b6:	fa09 f303 	lsl.w	r3, r9, r3
 80040ba:	4313      	orrs	r3, r2
 80040bc:	9304      	str	r3, [sp, #16]
 80040be:	46a2      	mov	sl, r4
 80040c0:	e7d2      	b.n	8004068 <_svfiprintf_r+0xa0>
 80040c2:	9b03      	ldr	r3, [sp, #12]
 80040c4:	1d19      	adds	r1, r3, #4
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	9103      	str	r1, [sp, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	bfbb      	ittet	lt
 80040ce:	425b      	neglt	r3, r3
 80040d0:	f042 0202 	orrlt.w	r2, r2, #2
 80040d4:	9307      	strge	r3, [sp, #28]
 80040d6:	9307      	strlt	r3, [sp, #28]
 80040d8:	bfb8      	it	lt
 80040da:	9204      	strlt	r2, [sp, #16]
 80040dc:	7823      	ldrb	r3, [r4, #0]
 80040de:	2b2e      	cmp	r3, #46	@ 0x2e
 80040e0:	d10a      	bne.n	80040f8 <_svfiprintf_r+0x130>
 80040e2:	7863      	ldrb	r3, [r4, #1]
 80040e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80040e6:	d132      	bne.n	800414e <_svfiprintf_r+0x186>
 80040e8:	9b03      	ldr	r3, [sp, #12]
 80040ea:	1d1a      	adds	r2, r3, #4
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	9203      	str	r2, [sp, #12]
 80040f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80040f4:	3402      	adds	r4, #2
 80040f6:	9305      	str	r3, [sp, #20]
 80040f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80041bc <_svfiprintf_r+0x1f4>
 80040fc:	7821      	ldrb	r1, [r4, #0]
 80040fe:	2203      	movs	r2, #3
 8004100:	4650      	mov	r0, sl
 8004102:	f7fc f885 	bl	8000210 <memchr>
 8004106:	b138      	cbz	r0, 8004118 <_svfiprintf_r+0x150>
 8004108:	9b04      	ldr	r3, [sp, #16]
 800410a:	eba0 000a 	sub.w	r0, r0, sl
 800410e:	2240      	movs	r2, #64	@ 0x40
 8004110:	4082      	lsls	r2, r0
 8004112:	4313      	orrs	r3, r2
 8004114:	3401      	adds	r4, #1
 8004116:	9304      	str	r3, [sp, #16]
 8004118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800411c:	4824      	ldr	r0, [pc, #144]	@ (80041b0 <_svfiprintf_r+0x1e8>)
 800411e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004122:	2206      	movs	r2, #6
 8004124:	f7fc f874 	bl	8000210 <memchr>
 8004128:	2800      	cmp	r0, #0
 800412a:	d036      	beq.n	800419a <_svfiprintf_r+0x1d2>
 800412c:	4b21      	ldr	r3, [pc, #132]	@ (80041b4 <_svfiprintf_r+0x1ec>)
 800412e:	bb1b      	cbnz	r3, 8004178 <_svfiprintf_r+0x1b0>
 8004130:	9b03      	ldr	r3, [sp, #12]
 8004132:	3307      	adds	r3, #7
 8004134:	f023 0307 	bic.w	r3, r3, #7
 8004138:	3308      	adds	r3, #8
 800413a:	9303      	str	r3, [sp, #12]
 800413c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800413e:	4433      	add	r3, r6
 8004140:	9309      	str	r3, [sp, #36]	@ 0x24
 8004142:	e76a      	b.n	800401a <_svfiprintf_r+0x52>
 8004144:	fb0c 3202 	mla	r2, ip, r2, r3
 8004148:	460c      	mov	r4, r1
 800414a:	2001      	movs	r0, #1
 800414c:	e7a8      	b.n	80040a0 <_svfiprintf_r+0xd8>
 800414e:	2300      	movs	r3, #0
 8004150:	3401      	adds	r4, #1
 8004152:	9305      	str	r3, [sp, #20]
 8004154:	4619      	mov	r1, r3
 8004156:	f04f 0c0a 	mov.w	ip, #10
 800415a:	4620      	mov	r0, r4
 800415c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004160:	3a30      	subs	r2, #48	@ 0x30
 8004162:	2a09      	cmp	r2, #9
 8004164:	d903      	bls.n	800416e <_svfiprintf_r+0x1a6>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0c6      	beq.n	80040f8 <_svfiprintf_r+0x130>
 800416a:	9105      	str	r1, [sp, #20]
 800416c:	e7c4      	b.n	80040f8 <_svfiprintf_r+0x130>
 800416e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004172:	4604      	mov	r4, r0
 8004174:	2301      	movs	r3, #1
 8004176:	e7f0      	b.n	800415a <_svfiprintf_r+0x192>
 8004178:	ab03      	add	r3, sp, #12
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	462a      	mov	r2, r5
 800417e:	4b0e      	ldr	r3, [pc, #56]	@ (80041b8 <_svfiprintf_r+0x1f0>)
 8004180:	a904      	add	r1, sp, #16
 8004182:	4638      	mov	r0, r7
 8004184:	f3af 8000 	nop.w
 8004188:	1c42      	adds	r2, r0, #1
 800418a:	4606      	mov	r6, r0
 800418c:	d1d6      	bne.n	800413c <_svfiprintf_r+0x174>
 800418e:	89ab      	ldrh	r3, [r5, #12]
 8004190:	065b      	lsls	r3, r3, #25
 8004192:	f53f af2d 	bmi.w	8003ff0 <_svfiprintf_r+0x28>
 8004196:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004198:	e72c      	b.n	8003ff4 <_svfiprintf_r+0x2c>
 800419a:	ab03      	add	r3, sp, #12
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	462a      	mov	r2, r5
 80041a0:	4b05      	ldr	r3, [pc, #20]	@ (80041b8 <_svfiprintf_r+0x1f0>)
 80041a2:	a904      	add	r1, sp, #16
 80041a4:	4638      	mov	r0, r7
 80041a6:	f000 f879 	bl	800429c <_printf_i>
 80041aa:	e7ed      	b.n	8004188 <_svfiprintf_r+0x1c0>
 80041ac:	08004660 	.word	0x08004660
 80041b0:	0800466a 	.word	0x0800466a
 80041b4:	00000000 	.word	0x00000000
 80041b8:	08003f11 	.word	0x08003f11
 80041bc:	08004666 	.word	0x08004666

080041c0 <_printf_common>:
 80041c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041c4:	4616      	mov	r6, r2
 80041c6:	4698      	mov	r8, r3
 80041c8:	688a      	ldr	r2, [r1, #8]
 80041ca:	690b      	ldr	r3, [r1, #16]
 80041cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041d0:	4293      	cmp	r3, r2
 80041d2:	bfb8      	it	lt
 80041d4:	4613      	movlt	r3, r2
 80041d6:	6033      	str	r3, [r6, #0]
 80041d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041dc:	4607      	mov	r7, r0
 80041de:	460c      	mov	r4, r1
 80041e0:	b10a      	cbz	r2, 80041e6 <_printf_common+0x26>
 80041e2:	3301      	adds	r3, #1
 80041e4:	6033      	str	r3, [r6, #0]
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	0699      	lsls	r1, r3, #26
 80041ea:	bf42      	ittt	mi
 80041ec:	6833      	ldrmi	r3, [r6, #0]
 80041ee:	3302      	addmi	r3, #2
 80041f0:	6033      	strmi	r3, [r6, #0]
 80041f2:	6825      	ldr	r5, [r4, #0]
 80041f4:	f015 0506 	ands.w	r5, r5, #6
 80041f8:	d106      	bne.n	8004208 <_printf_common+0x48>
 80041fa:	f104 0a19 	add.w	sl, r4, #25
 80041fe:	68e3      	ldr	r3, [r4, #12]
 8004200:	6832      	ldr	r2, [r6, #0]
 8004202:	1a9b      	subs	r3, r3, r2
 8004204:	42ab      	cmp	r3, r5
 8004206:	dc26      	bgt.n	8004256 <_printf_common+0x96>
 8004208:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800420c:	6822      	ldr	r2, [r4, #0]
 800420e:	3b00      	subs	r3, #0
 8004210:	bf18      	it	ne
 8004212:	2301      	movne	r3, #1
 8004214:	0692      	lsls	r2, r2, #26
 8004216:	d42b      	bmi.n	8004270 <_printf_common+0xb0>
 8004218:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800421c:	4641      	mov	r1, r8
 800421e:	4638      	mov	r0, r7
 8004220:	47c8      	blx	r9
 8004222:	3001      	adds	r0, #1
 8004224:	d01e      	beq.n	8004264 <_printf_common+0xa4>
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	6922      	ldr	r2, [r4, #16]
 800422a:	f003 0306 	and.w	r3, r3, #6
 800422e:	2b04      	cmp	r3, #4
 8004230:	bf02      	ittt	eq
 8004232:	68e5      	ldreq	r5, [r4, #12]
 8004234:	6833      	ldreq	r3, [r6, #0]
 8004236:	1aed      	subeq	r5, r5, r3
 8004238:	68a3      	ldr	r3, [r4, #8]
 800423a:	bf0c      	ite	eq
 800423c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004240:	2500      	movne	r5, #0
 8004242:	4293      	cmp	r3, r2
 8004244:	bfc4      	itt	gt
 8004246:	1a9b      	subgt	r3, r3, r2
 8004248:	18ed      	addgt	r5, r5, r3
 800424a:	2600      	movs	r6, #0
 800424c:	341a      	adds	r4, #26
 800424e:	42b5      	cmp	r5, r6
 8004250:	d11a      	bne.n	8004288 <_printf_common+0xc8>
 8004252:	2000      	movs	r0, #0
 8004254:	e008      	b.n	8004268 <_printf_common+0xa8>
 8004256:	2301      	movs	r3, #1
 8004258:	4652      	mov	r2, sl
 800425a:	4641      	mov	r1, r8
 800425c:	4638      	mov	r0, r7
 800425e:	47c8      	blx	r9
 8004260:	3001      	adds	r0, #1
 8004262:	d103      	bne.n	800426c <_printf_common+0xac>
 8004264:	f04f 30ff 	mov.w	r0, #4294967295
 8004268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800426c:	3501      	adds	r5, #1
 800426e:	e7c6      	b.n	80041fe <_printf_common+0x3e>
 8004270:	18e1      	adds	r1, r4, r3
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	2030      	movs	r0, #48	@ 0x30
 8004276:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800427a:	4422      	add	r2, r4
 800427c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004280:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004284:	3302      	adds	r3, #2
 8004286:	e7c7      	b.n	8004218 <_printf_common+0x58>
 8004288:	2301      	movs	r3, #1
 800428a:	4622      	mov	r2, r4
 800428c:	4641      	mov	r1, r8
 800428e:	4638      	mov	r0, r7
 8004290:	47c8      	blx	r9
 8004292:	3001      	adds	r0, #1
 8004294:	d0e6      	beq.n	8004264 <_printf_common+0xa4>
 8004296:	3601      	adds	r6, #1
 8004298:	e7d9      	b.n	800424e <_printf_common+0x8e>
	...

0800429c <_printf_i>:
 800429c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042a0:	7e0f      	ldrb	r7, [r1, #24]
 80042a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042a4:	2f78      	cmp	r7, #120	@ 0x78
 80042a6:	4691      	mov	r9, r2
 80042a8:	4680      	mov	r8, r0
 80042aa:	460c      	mov	r4, r1
 80042ac:	469a      	mov	sl, r3
 80042ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042b2:	d807      	bhi.n	80042c4 <_printf_i+0x28>
 80042b4:	2f62      	cmp	r7, #98	@ 0x62
 80042b6:	d80a      	bhi.n	80042ce <_printf_i+0x32>
 80042b8:	2f00      	cmp	r7, #0
 80042ba:	f000 80d1 	beq.w	8004460 <_printf_i+0x1c4>
 80042be:	2f58      	cmp	r7, #88	@ 0x58
 80042c0:	f000 80b8 	beq.w	8004434 <_printf_i+0x198>
 80042c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042cc:	e03a      	b.n	8004344 <_printf_i+0xa8>
 80042ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042d2:	2b15      	cmp	r3, #21
 80042d4:	d8f6      	bhi.n	80042c4 <_printf_i+0x28>
 80042d6:	a101      	add	r1, pc, #4	@ (adr r1, 80042dc <_printf_i+0x40>)
 80042d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042dc:	08004335 	.word	0x08004335
 80042e0:	08004349 	.word	0x08004349
 80042e4:	080042c5 	.word	0x080042c5
 80042e8:	080042c5 	.word	0x080042c5
 80042ec:	080042c5 	.word	0x080042c5
 80042f0:	080042c5 	.word	0x080042c5
 80042f4:	08004349 	.word	0x08004349
 80042f8:	080042c5 	.word	0x080042c5
 80042fc:	080042c5 	.word	0x080042c5
 8004300:	080042c5 	.word	0x080042c5
 8004304:	080042c5 	.word	0x080042c5
 8004308:	08004447 	.word	0x08004447
 800430c:	08004373 	.word	0x08004373
 8004310:	08004401 	.word	0x08004401
 8004314:	080042c5 	.word	0x080042c5
 8004318:	080042c5 	.word	0x080042c5
 800431c:	08004469 	.word	0x08004469
 8004320:	080042c5 	.word	0x080042c5
 8004324:	08004373 	.word	0x08004373
 8004328:	080042c5 	.word	0x080042c5
 800432c:	080042c5 	.word	0x080042c5
 8004330:	08004409 	.word	0x08004409
 8004334:	6833      	ldr	r3, [r6, #0]
 8004336:	1d1a      	adds	r2, r3, #4
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6032      	str	r2, [r6, #0]
 800433c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004340:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004344:	2301      	movs	r3, #1
 8004346:	e09c      	b.n	8004482 <_printf_i+0x1e6>
 8004348:	6833      	ldr	r3, [r6, #0]
 800434a:	6820      	ldr	r0, [r4, #0]
 800434c:	1d19      	adds	r1, r3, #4
 800434e:	6031      	str	r1, [r6, #0]
 8004350:	0606      	lsls	r6, r0, #24
 8004352:	d501      	bpl.n	8004358 <_printf_i+0xbc>
 8004354:	681d      	ldr	r5, [r3, #0]
 8004356:	e003      	b.n	8004360 <_printf_i+0xc4>
 8004358:	0645      	lsls	r5, r0, #25
 800435a:	d5fb      	bpl.n	8004354 <_printf_i+0xb8>
 800435c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004360:	2d00      	cmp	r5, #0
 8004362:	da03      	bge.n	800436c <_printf_i+0xd0>
 8004364:	232d      	movs	r3, #45	@ 0x2d
 8004366:	426d      	negs	r5, r5
 8004368:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800436c:	4858      	ldr	r0, [pc, #352]	@ (80044d0 <_printf_i+0x234>)
 800436e:	230a      	movs	r3, #10
 8004370:	e011      	b.n	8004396 <_printf_i+0xfa>
 8004372:	6821      	ldr	r1, [r4, #0]
 8004374:	6833      	ldr	r3, [r6, #0]
 8004376:	0608      	lsls	r0, r1, #24
 8004378:	f853 5b04 	ldr.w	r5, [r3], #4
 800437c:	d402      	bmi.n	8004384 <_printf_i+0xe8>
 800437e:	0649      	lsls	r1, r1, #25
 8004380:	bf48      	it	mi
 8004382:	b2ad      	uxthmi	r5, r5
 8004384:	2f6f      	cmp	r7, #111	@ 0x6f
 8004386:	4852      	ldr	r0, [pc, #328]	@ (80044d0 <_printf_i+0x234>)
 8004388:	6033      	str	r3, [r6, #0]
 800438a:	bf14      	ite	ne
 800438c:	230a      	movne	r3, #10
 800438e:	2308      	moveq	r3, #8
 8004390:	2100      	movs	r1, #0
 8004392:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004396:	6866      	ldr	r6, [r4, #4]
 8004398:	60a6      	str	r6, [r4, #8]
 800439a:	2e00      	cmp	r6, #0
 800439c:	db05      	blt.n	80043aa <_printf_i+0x10e>
 800439e:	6821      	ldr	r1, [r4, #0]
 80043a0:	432e      	orrs	r6, r5
 80043a2:	f021 0104 	bic.w	r1, r1, #4
 80043a6:	6021      	str	r1, [r4, #0]
 80043a8:	d04b      	beq.n	8004442 <_printf_i+0x1a6>
 80043aa:	4616      	mov	r6, r2
 80043ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80043b0:	fb03 5711 	mls	r7, r3, r1, r5
 80043b4:	5dc7      	ldrb	r7, [r0, r7]
 80043b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043ba:	462f      	mov	r7, r5
 80043bc:	42bb      	cmp	r3, r7
 80043be:	460d      	mov	r5, r1
 80043c0:	d9f4      	bls.n	80043ac <_printf_i+0x110>
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d10b      	bne.n	80043de <_printf_i+0x142>
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	07df      	lsls	r7, r3, #31
 80043ca:	d508      	bpl.n	80043de <_printf_i+0x142>
 80043cc:	6923      	ldr	r3, [r4, #16]
 80043ce:	6861      	ldr	r1, [r4, #4]
 80043d0:	4299      	cmp	r1, r3
 80043d2:	bfde      	ittt	le
 80043d4:	2330      	movle	r3, #48	@ 0x30
 80043d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043de:	1b92      	subs	r2, r2, r6
 80043e0:	6122      	str	r2, [r4, #16]
 80043e2:	f8cd a000 	str.w	sl, [sp]
 80043e6:	464b      	mov	r3, r9
 80043e8:	aa03      	add	r2, sp, #12
 80043ea:	4621      	mov	r1, r4
 80043ec:	4640      	mov	r0, r8
 80043ee:	f7ff fee7 	bl	80041c0 <_printf_common>
 80043f2:	3001      	adds	r0, #1
 80043f4:	d14a      	bne.n	800448c <_printf_i+0x1f0>
 80043f6:	f04f 30ff 	mov.w	r0, #4294967295
 80043fa:	b004      	add	sp, #16
 80043fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	f043 0320 	orr.w	r3, r3, #32
 8004406:	6023      	str	r3, [r4, #0]
 8004408:	4832      	ldr	r0, [pc, #200]	@ (80044d4 <_printf_i+0x238>)
 800440a:	2778      	movs	r7, #120	@ 0x78
 800440c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	6831      	ldr	r1, [r6, #0]
 8004414:	061f      	lsls	r7, r3, #24
 8004416:	f851 5b04 	ldr.w	r5, [r1], #4
 800441a:	d402      	bmi.n	8004422 <_printf_i+0x186>
 800441c:	065f      	lsls	r7, r3, #25
 800441e:	bf48      	it	mi
 8004420:	b2ad      	uxthmi	r5, r5
 8004422:	6031      	str	r1, [r6, #0]
 8004424:	07d9      	lsls	r1, r3, #31
 8004426:	bf44      	itt	mi
 8004428:	f043 0320 	orrmi.w	r3, r3, #32
 800442c:	6023      	strmi	r3, [r4, #0]
 800442e:	b11d      	cbz	r5, 8004438 <_printf_i+0x19c>
 8004430:	2310      	movs	r3, #16
 8004432:	e7ad      	b.n	8004390 <_printf_i+0xf4>
 8004434:	4826      	ldr	r0, [pc, #152]	@ (80044d0 <_printf_i+0x234>)
 8004436:	e7e9      	b.n	800440c <_printf_i+0x170>
 8004438:	6823      	ldr	r3, [r4, #0]
 800443a:	f023 0320 	bic.w	r3, r3, #32
 800443e:	6023      	str	r3, [r4, #0]
 8004440:	e7f6      	b.n	8004430 <_printf_i+0x194>
 8004442:	4616      	mov	r6, r2
 8004444:	e7bd      	b.n	80043c2 <_printf_i+0x126>
 8004446:	6833      	ldr	r3, [r6, #0]
 8004448:	6825      	ldr	r5, [r4, #0]
 800444a:	6961      	ldr	r1, [r4, #20]
 800444c:	1d18      	adds	r0, r3, #4
 800444e:	6030      	str	r0, [r6, #0]
 8004450:	062e      	lsls	r6, r5, #24
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	d501      	bpl.n	800445a <_printf_i+0x1be>
 8004456:	6019      	str	r1, [r3, #0]
 8004458:	e002      	b.n	8004460 <_printf_i+0x1c4>
 800445a:	0668      	lsls	r0, r5, #25
 800445c:	d5fb      	bpl.n	8004456 <_printf_i+0x1ba>
 800445e:	8019      	strh	r1, [r3, #0]
 8004460:	2300      	movs	r3, #0
 8004462:	6123      	str	r3, [r4, #16]
 8004464:	4616      	mov	r6, r2
 8004466:	e7bc      	b.n	80043e2 <_printf_i+0x146>
 8004468:	6833      	ldr	r3, [r6, #0]
 800446a:	1d1a      	adds	r2, r3, #4
 800446c:	6032      	str	r2, [r6, #0]
 800446e:	681e      	ldr	r6, [r3, #0]
 8004470:	6862      	ldr	r2, [r4, #4]
 8004472:	2100      	movs	r1, #0
 8004474:	4630      	mov	r0, r6
 8004476:	f7fb fecb 	bl	8000210 <memchr>
 800447a:	b108      	cbz	r0, 8004480 <_printf_i+0x1e4>
 800447c:	1b80      	subs	r0, r0, r6
 800447e:	6060      	str	r0, [r4, #4]
 8004480:	6863      	ldr	r3, [r4, #4]
 8004482:	6123      	str	r3, [r4, #16]
 8004484:	2300      	movs	r3, #0
 8004486:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800448a:	e7aa      	b.n	80043e2 <_printf_i+0x146>
 800448c:	6923      	ldr	r3, [r4, #16]
 800448e:	4632      	mov	r2, r6
 8004490:	4649      	mov	r1, r9
 8004492:	4640      	mov	r0, r8
 8004494:	47d0      	blx	sl
 8004496:	3001      	adds	r0, #1
 8004498:	d0ad      	beq.n	80043f6 <_printf_i+0x15a>
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	079b      	lsls	r3, r3, #30
 800449e:	d413      	bmi.n	80044c8 <_printf_i+0x22c>
 80044a0:	68e0      	ldr	r0, [r4, #12]
 80044a2:	9b03      	ldr	r3, [sp, #12]
 80044a4:	4298      	cmp	r0, r3
 80044a6:	bfb8      	it	lt
 80044a8:	4618      	movlt	r0, r3
 80044aa:	e7a6      	b.n	80043fa <_printf_i+0x15e>
 80044ac:	2301      	movs	r3, #1
 80044ae:	4632      	mov	r2, r6
 80044b0:	4649      	mov	r1, r9
 80044b2:	4640      	mov	r0, r8
 80044b4:	47d0      	blx	sl
 80044b6:	3001      	adds	r0, #1
 80044b8:	d09d      	beq.n	80043f6 <_printf_i+0x15a>
 80044ba:	3501      	adds	r5, #1
 80044bc:	68e3      	ldr	r3, [r4, #12]
 80044be:	9903      	ldr	r1, [sp, #12]
 80044c0:	1a5b      	subs	r3, r3, r1
 80044c2:	42ab      	cmp	r3, r5
 80044c4:	dcf2      	bgt.n	80044ac <_printf_i+0x210>
 80044c6:	e7eb      	b.n	80044a0 <_printf_i+0x204>
 80044c8:	2500      	movs	r5, #0
 80044ca:	f104 0619 	add.w	r6, r4, #25
 80044ce:	e7f5      	b.n	80044bc <_printf_i+0x220>
 80044d0:	08004671 	.word	0x08004671
 80044d4:	08004682 	.word	0x08004682

080044d8 <memmove>:
 80044d8:	4288      	cmp	r0, r1
 80044da:	b510      	push	{r4, lr}
 80044dc:	eb01 0402 	add.w	r4, r1, r2
 80044e0:	d902      	bls.n	80044e8 <memmove+0x10>
 80044e2:	4284      	cmp	r4, r0
 80044e4:	4623      	mov	r3, r4
 80044e6:	d807      	bhi.n	80044f8 <memmove+0x20>
 80044e8:	1e43      	subs	r3, r0, #1
 80044ea:	42a1      	cmp	r1, r4
 80044ec:	d008      	beq.n	8004500 <memmove+0x28>
 80044ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044f6:	e7f8      	b.n	80044ea <memmove+0x12>
 80044f8:	4402      	add	r2, r0
 80044fa:	4601      	mov	r1, r0
 80044fc:	428a      	cmp	r2, r1
 80044fe:	d100      	bne.n	8004502 <memmove+0x2a>
 8004500:	bd10      	pop	{r4, pc}
 8004502:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004506:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800450a:	e7f7      	b.n	80044fc <memmove+0x24>

0800450c <_sbrk_r>:
 800450c:	b538      	push	{r3, r4, r5, lr}
 800450e:	4d06      	ldr	r5, [pc, #24]	@ (8004528 <_sbrk_r+0x1c>)
 8004510:	2300      	movs	r3, #0
 8004512:	4604      	mov	r4, r0
 8004514:	4608      	mov	r0, r1
 8004516:	602b      	str	r3, [r5, #0]
 8004518:	f7fc fa0c 	bl	8000934 <_sbrk>
 800451c:	1c43      	adds	r3, r0, #1
 800451e:	d102      	bne.n	8004526 <_sbrk_r+0x1a>
 8004520:	682b      	ldr	r3, [r5, #0]
 8004522:	b103      	cbz	r3, 8004526 <_sbrk_r+0x1a>
 8004524:	6023      	str	r3, [r4, #0]
 8004526:	bd38      	pop	{r3, r4, r5, pc}
 8004528:	200003f4 	.word	0x200003f4

0800452c <memcpy>:
 800452c:	440a      	add	r2, r1
 800452e:	4291      	cmp	r1, r2
 8004530:	f100 33ff 	add.w	r3, r0, #4294967295
 8004534:	d100      	bne.n	8004538 <memcpy+0xc>
 8004536:	4770      	bx	lr
 8004538:	b510      	push	{r4, lr}
 800453a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800453e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004542:	4291      	cmp	r1, r2
 8004544:	d1f9      	bne.n	800453a <memcpy+0xe>
 8004546:	bd10      	pop	{r4, pc}

08004548 <_realloc_r>:
 8004548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800454c:	4607      	mov	r7, r0
 800454e:	4614      	mov	r4, r2
 8004550:	460d      	mov	r5, r1
 8004552:	b921      	cbnz	r1, 800455e <_realloc_r+0x16>
 8004554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004558:	4611      	mov	r1, r2
 800455a:	f7ff bc4d 	b.w	8003df8 <_malloc_r>
 800455e:	b92a      	cbnz	r2, 800456c <_realloc_r+0x24>
 8004560:	f7ff fbde 	bl	8003d20 <_free_r>
 8004564:	4625      	mov	r5, r4
 8004566:	4628      	mov	r0, r5
 8004568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800456c:	f000 f81a 	bl	80045a4 <_malloc_usable_size_r>
 8004570:	4284      	cmp	r4, r0
 8004572:	4606      	mov	r6, r0
 8004574:	d802      	bhi.n	800457c <_realloc_r+0x34>
 8004576:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800457a:	d8f4      	bhi.n	8004566 <_realloc_r+0x1e>
 800457c:	4621      	mov	r1, r4
 800457e:	4638      	mov	r0, r7
 8004580:	f7ff fc3a 	bl	8003df8 <_malloc_r>
 8004584:	4680      	mov	r8, r0
 8004586:	b908      	cbnz	r0, 800458c <_realloc_r+0x44>
 8004588:	4645      	mov	r5, r8
 800458a:	e7ec      	b.n	8004566 <_realloc_r+0x1e>
 800458c:	42b4      	cmp	r4, r6
 800458e:	4622      	mov	r2, r4
 8004590:	4629      	mov	r1, r5
 8004592:	bf28      	it	cs
 8004594:	4632      	movcs	r2, r6
 8004596:	f7ff ffc9 	bl	800452c <memcpy>
 800459a:	4629      	mov	r1, r5
 800459c:	4638      	mov	r0, r7
 800459e:	f7ff fbbf 	bl	8003d20 <_free_r>
 80045a2:	e7f1      	b.n	8004588 <_realloc_r+0x40>

080045a4 <_malloc_usable_size_r>:
 80045a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045a8:	1f18      	subs	r0, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	bfbc      	itt	lt
 80045ae:	580b      	ldrlt	r3, [r1, r0]
 80045b0:	18c0      	addlt	r0, r0, r3
 80045b2:	4770      	bx	lr

080045b4 <_init>:
 80045b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b6:	bf00      	nop
 80045b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ba:	bc08      	pop	{r3}
 80045bc:	469e      	mov	lr, r3
 80045be:	4770      	bx	lr

080045c0 <_fini>:
 80045c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c2:	bf00      	nop
 80045c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045c6:	bc08      	pop	{r3}
 80045c8:	469e      	mov	lr, r3
 80045ca:	4770      	bx	lr
