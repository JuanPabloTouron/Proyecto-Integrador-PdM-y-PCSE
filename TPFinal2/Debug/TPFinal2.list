
TPFinal2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cd0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08004ea0  08004ea0  00005ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ff8  08004ff8  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004ff8  08004ff8  00005ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005000  08005000  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005000  08005000  00006000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005004  08005004  00006004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005008  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  2000005c  08005064  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  08005064  0000748c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c63e  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224e  00000000  00000000  000136ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  00015918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b0  00000000  00000000  00016458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022690  00000000  00000000  00016d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b80  00000000  00000000  00039398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb536  00000000  00000000  00049f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011544e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032fc  00000000  00000000  00115494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00118790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004e88 	.word	0x08004e88

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004e88 	.word	0x08004e88

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b988 	b.w	80005f8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	468e      	mov	lr, r1
 8000308:	4604      	mov	r4, r0
 800030a:	4688      	mov	r8, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d962      	bls.n	80003dc <__udivmoddi4+0xdc>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	b14e      	cbz	r6, 8000330 <__udivmoddi4+0x30>
 800031c:	f1c6 0320 	rsb	r3, r6, #32
 8000320:	fa01 f806 	lsl.w	r8, r1, r6
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	40b7      	lsls	r7, r6
 800032a:	ea43 0808 	orr.w	r8, r3, r8
 800032e:	40b4      	lsls	r4, r6
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fbb8 f1fe 	udiv	r1, r8, lr
 800033c:	0c23      	lsrs	r3, r4, #16
 800033e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000342:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000346:	fb01 f20c 	mul.w	r2, r1, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x62>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f101 30ff 	add.w	r0, r1, #4294967295
 8000354:	f080 80ea 	bcs.w	800052c <__udivmoddi4+0x22c>
 8000358:	429a      	cmp	r2, r3
 800035a:	f240 80e7 	bls.w	800052c <__udivmoddi4+0x22c>
 800035e:	3902      	subs	r1, #2
 8000360:	443b      	add	r3, r7
 8000362:	1a9a      	subs	r2, r3, r2
 8000364:	b2a3      	uxth	r3, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000372:	fb00 fc0c 	mul.w	ip, r0, ip
 8000376:	459c      	cmp	ip, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x8e>
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000380:	f080 80d6 	bcs.w	8000530 <__udivmoddi4+0x230>
 8000384:	459c      	cmp	ip, r3
 8000386:	f240 80d3 	bls.w	8000530 <__udivmoddi4+0x230>
 800038a:	443b      	add	r3, r7
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000392:	eba3 030c 	sub.w	r3, r3, ip
 8000396:	2100      	movs	r1, #0
 8000398:	b11d      	cbz	r5, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40f3      	lsrs	r3, r6
 800039c:	2200      	movs	r2, #0
 800039e:	e9c5 3200 	strd	r3, r2, [r5]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d905      	bls.n	80003b6 <__udivmoddi4+0xb6>
 80003aa:	b10d      	cbz	r5, 80003b0 <__udivmoddi4+0xb0>
 80003ac:	e9c5 0100 	strd	r0, r1, [r5]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4608      	mov	r0, r1
 80003b4:	e7f5      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003b6:	fab3 f183 	clz	r1, r3
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d146      	bne.n	800044c <__udivmoddi4+0x14c>
 80003be:	4573      	cmp	r3, lr
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xc8>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 8105 	bhi.w	80005d2 <__udivmoddi4+0x2d2>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4690      	mov	r8, r2
 80003d2:	2d00      	cmp	r5, #0
 80003d4:	d0e5      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003d6:	e9c5 4800 	strd	r4, r8, [r5]
 80003da:	e7e2      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f000 8090 	beq.w	8000502 <__udivmoddi4+0x202>
 80003e2:	fab2 f682 	clz	r6, r2
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f040 80a4 	bne.w	8000534 <__udivmoddi4+0x234>
 80003ec:	1a8a      	subs	r2, r1, r2
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	b280      	uxth	r0, r0
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000406:	fb04 f20c 	mul.w	r2, r4, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x11e>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x11c>
 8000416:	429a      	cmp	r2, r3
 8000418:	f200 80e0 	bhi.w	80005dc <__udivmoddi4+0x2dc>
 800041c:	46c4      	mov	ip, r8
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	fbb3 f2fe 	udiv	r2, r3, lr
 8000424:	fb0e 3312 	mls	r3, lr, r2, r3
 8000428:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800042c:	fb02 f404 	mul.w	r4, r2, r4
 8000430:	429c      	cmp	r4, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x144>
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	f102 30ff 	add.w	r0, r2, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x142>
 800043c:	429c      	cmp	r4, r3
 800043e:	f200 80ca 	bhi.w	80005d6 <__udivmoddi4+0x2d6>
 8000442:	4602      	mov	r2, r0
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800044a:	e7a5      	b.n	8000398 <__udivmoddi4+0x98>
 800044c:	f1c1 0620 	rsb	r6, r1, #32
 8000450:	408b      	lsls	r3, r1
 8000452:	fa22 f706 	lsr.w	r7, r2, r6
 8000456:	431f      	orrs	r7, r3
 8000458:	fa0e f401 	lsl.w	r4, lr, r1
 800045c:	fa20 f306 	lsr.w	r3, r0, r6
 8000460:	fa2e fe06 	lsr.w	lr, lr, r6
 8000464:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000468:	4323      	orrs	r3, r4
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	fa1f fc87 	uxth.w	ip, r7
 8000472:	fbbe f0f9 	udiv	r0, lr, r9
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fb09 ee10 	mls	lr, r9, r0, lr
 800047c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000480:	fb00 fe0c 	mul.w	lr, r0, ip
 8000484:	45a6      	cmp	lr, r4
 8000486:	fa02 f201 	lsl.w	r2, r2, r1
 800048a:	d909      	bls.n	80004a0 <__udivmoddi4+0x1a0>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000492:	f080 809c 	bcs.w	80005ce <__udivmoddi4+0x2ce>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f240 8099 	bls.w	80005ce <__udivmoddi4+0x2ce>
 800049c:	3802      	subs	r0, #2
 800049e:	443c      	add	r4, r7
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	fa1f fe83 	uxth.w	lr, r3
 80004a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ac:	fb09 4413 	mls	r4, r9, r3, r4
 80004b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b8:	45a4      	cmp	ip, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x1ce>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f103 3eff 	add.w	lr, r3, #4294967295
 80004c2:	f080 8082 	bcs.w	80005ca <__udivmoddi4+0x2ca>
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d97f      	bls.n	80005ca <__udivmoddi4+0x2ca>
 80004ca:	3b02      	subs	r3, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004d2:	eba4 040c 	sub.w	r4, r4, ip
 80004d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004da:	4564      	cmp	r4, ip
 80004dc:	4673      	mov	r3, lr
 80004de:	46e1      	mov	r9, ip
 80004e0:	d362      	bcc.n	80005a8 <__udivmoddi4+0x2a8>
 80004e2:	d05f      	beq.n	80005a4 <__udivmoddi4+0x2a4>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x1fe>
 80004e6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ea:	eb64 0409 	sbc.w	r4, r4, r9
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e74f      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000502:	fbb1 fcf2 	udiv	ip, r1, r2
 8000506:	0c01      	lsrs	r1, r0, #16
 8000508:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800050c:	b280      	uxth	r0, r0
 800050e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000512:	463b      	mov	r3, r7
 8000514:	4638      	mov	r0, r7
 8000516:	463c      	mov	r4, r7
 8000518:	46b8      	mov	r8, r7
 800051a:	46be      	mov	lr, r7
 800051c:	2620      	movs	r6, #32
 800051e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000522:	eba2 0208 	sub.w	r2, r2, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e766      	b.n	80003fa <__udivmoddi4+0xfa>
 800052c:	4601      	mov	r1, r0
 800052e:	e718      	b.n	8000362 <__udivmoddi4+0x62>
 8000530:	4610      	mov	r0, r2
 8000532:	e72c      	b.n	800038e <__udivmoddi4+0x8e>
 8000534:	f1c6 0220 	rsb	r2, r6, #32
 8000538:	fa2e f302 	lsr.w	r3, lr, r2
 800053c:	40b7      	lsls	r7, r6
 800053e:	40b1      	lsls	r1, r6
 8000540:	fa20 f202 	lsr.w	r2, r0, r2
 8000544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000548:	430a      	orrs	r2, r1
 800054a:	fbb3 f8fe 	udiv	r8, r3, lr
 800054e:	b2bc      	uxth	r4, r7
 8000550:	fb0e 3318 	mls	r3, lr, r8, r3
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb08 f904 	mul.w	r9, r8, r4
 800055e:	40b0      	lsls	r0, r6
 8000560:	4589      	cmp	r9, r1
 8000562:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000566:	b280      	uxth	r0, r0
 8000568:	d93e      	bls.n	80005e8 <__udivmoddi4+0x2e8>
 800056a:	1879      	adds	r1, r7, r1
 800056c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000570:	d201      	bcs.n	8000576 <__udivmoddi4+0x276>
 8000572:	4589      	cmp	r9, r1
 8000574:	d81f      	bhi.n	80005b6 <__udivmoddi4+0x2b6>
 8000576:	eba1 0109 	sub.w	r1, r1, r9
 800057a:	fbb1 f9fe 	udiv	r9, r1, lr
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	fb0e 1119 	mls	r1, lr, r9, r1
 8000586:	b292      	uxth	r2, r2
 8000588:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800058c:	4542      	cmp	r2, r8
 800058e:	d229      	bcs.n	80005e4 <__udivmoddi4+0x2e4>
 8000590:	18ba      	adds	r2, r7, r2
 8000592:	f109 31ff 	add.w	r1, r9, #4294967295
 8000596:	d2c4      	bcs.n	8000522 <__udivmoddi4+0x222>
 8000598:	4542      	cmp	r2, r8
 800059a:	d2c2      	bcs.n	8000522 <__udivmoddi4+0x222>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443a      	add	r2, r7
 80005a2:	e7be      	b.n	8000522 <__udivmoddi4+0x222>
 80005a4:	45f0      	cmp	r8, lr
 80005a6:	d29d      	bcs.n	80004e4 <__udivmoddi4+0x1e4>
 80005a8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b0:	3801      	subs	r0, #1
 80005b2:	46e1      	mov	r9, ip
 80005b4:	e796      	b.n	80004e4 <__udivmoddi4+0x1e4>
 80005b6:	eba7 0909 	sub.w	r9, r7, r9
 80005ba:	4449      	add	r1, r9
 80005bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c4:	fb09 f804 	mul.w	r8, r9, r4
 80005c8:	e7db      	b.n	8000582 <__udivmoddi4+0x282>
 80005ca:	4673      	mov	r3, lr
 80005cc:	e77f      	b.n	80004ce <__udivmoddi4+0x1ce>
 80005ce:	4650      	mov	r0, sl
 80005d0:	e766      	b.n	80004a0 <__udivmoddi4+0x1a0>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e6fd      	b.n	80003d2 <__udivmoddi4+0xd2>
 80005d6:	443b      	add	r3, r7
 80005d8:	3a02      	subs	r2, #2
 80005da:	e733      	b.n	8000444 <__udivmoddi4+0x144>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	443b      	add	r3, r7
 80005e2:	e71c      	b.n	800041e <__udivmoddi4+0x11e>
 80005e4:	4649      	mov	r1, r9
 80005e6:	e79c      	b.n	8000522 <__udivmoddi4+0x222>
 80005e8:	eba1 0109 	sub.w	r1, r1, r9
 80005ec:	46c4      	mov	ip, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c4      	b.n	8000582 <__udivmoddi4+0x282>

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f001 fa76 	bl	8001af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f810 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_USART2_UART_Init();
 8000608:	f000 f87a 	bl	8000700 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  I2CInit();
 800060c:	f001 f9de 	bl	80019cc <I2CInit>
  buttonsInit();
 8000610:	f001 f912 	bl	8001838 <buttonsInit>
  appInit();
 8000614:	f000 fd14 	bl	8001040 <appInit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  appUpdate();
 8000618:	f000 fd3a 	bl	8001090 <appUpdate>
	  I2CDelay(100);
 800061c:	2064      	movs	r0, #100	@ 0x64
 800061e:	f001 fa25 	bl	8001a6c <I2CDelay>
	  appUpdate();
 8000622:	bf00      	nop
 8000624:	e7f8      	b.n	8000618 <main+0x1c>
	...

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	@ 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	2234      	movs	r2, #52	@ 0x34
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f003 ffa0 	bl	800457c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b29      	ldr	r3, [pc, #164]	@ (80006f8 <SystemClock_Config+0xd0>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	4a28      	ldr	r2, [pc, #160]	@ (80006f8 <SystemClock_Config+0xd0>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	@ 0x40
 800065c:	4b26      	ldr	r3, [pc, #152]	@ (80006f8 <SystemClock_Config+0xd0>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000668:	2300      	movs	r3, #0
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	4b23      	ldr	r3, [pc, #140]	@ (80006fc <SystemClock_Config+0xd4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000674:	4a21      	ldr	r2, [pc, #132]	@ (80006fc <SystemClock_Config+0xd4>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1f      	ldr	r3, [pc, #124]	@ (80006fc <SystemClock_Config+0xd4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800069c:	2308      	movs	r3, #8
 800069e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006a0:	2348      	movs	r3, #72	@ 0x48
 80006a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	4618      	mov	r0, r3
 80006b6:	f003 f85f 	bl	8003778 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006c0:	f000 f848 	bl	8000754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	2102      	movs	r1, #2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 fd85 	bl	80031f0 <HAL_RCC_ClockConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006ec:	f000 f832 	bl	8000754 <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	3750      	adds	r7, #80	@ 0x50
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000704:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000706:	4a12      	ldr	r2, [pc, #72]	@ (8000750 <MX_USART2_UART_Init+0x50>)
 8000708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070a:	4b10      	ldr	r3, [pc, #64]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b08      	ldr	r3, [pc, #32]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000738:	f003 fabc 	bl	8003cb4 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000742:	f000 f807 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000078 	.word	0x20000078
 8000750:	40004400 	.word	0x40004400

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1){
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <Error_Handler+0x8>

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <HAL_MspInit+0x4c>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076e:	4a0f      	ldr	r2, [pc, #60]	@ (80007ac <HAL_MspInit+0x4c>)
 8000770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000774:	6453      	str	r3, [r2, #68]	@ 0x44
 8000776:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <HAL_MspInit+0x4c>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800077a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <HAL_MspInit+0x4c>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078a:	4a08      	ldr	r2, [pc, #32]	@ (80007ac <HAL_MspInit+0x4c>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000790:	6413      	str	r3, [r2, #64]	@ 0x40
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <HAL_MspInit+0x4c>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800

080007b0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	@ 0x28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a19      	ldr	r2, [pc, #100]	@ (8000834 <HAL_I2C_MspInit+0x84>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d12c      	bne.n	800082c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <HAL_I2C_MspInit+0x88>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a17      	ldr	r2, [pc, #92]	@ (8000838 <HAL_I2C_MspInit+0x88>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <HAL_I2C_MspInit+0x88>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007f4:	2312      	movs	r3, #18
 80007f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000800:	2304      	movs	r3, #4
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	480c      	ldr	r0, [pc, #48]	@ (800083c <HAL_I2C_MspInit+0x8c>)
 800080c:	f001 fb18 	bl	8001e40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <HAL_I2C_MspInit+0x88>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000818:	4a07      	ldr	r2, [pc, #28]	@ (8000838 <HAL_I2C_MspInit+0x88>)
 800081a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800081e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000820:	4b05      	ldr	r3, [pc, #20]	@ (8000838 <HAL_I2C_MspInit+0x88>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000824:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	@ 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40005400 	.word	0x40005400
 8000838:	40023800 	.word	0x40023800
 800083c:	40020400 	.word	0x40020400

08000840 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	@ 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a19      	ldr	r2, [pc, #100]	@ (80008c4 <HAL_UART_MspInit+0x84>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d12b      	bne.n	80008ba <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b18      	ldr	r3, [pc, #96]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086a:	4a17      	ldr	r2, [pc, #92]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 800086c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000870:	6413      	str	r3, [r2, #64]	@ 0x40
 8000872:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a10      	ldr	r2, [pc, #64]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800089a:	230c      	movs	r3, #12
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008aa:	2307      	movs	r3, #7
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	@ (80008cc <HAL_UART_MspInit+0x8c>)
 80008b6:	f001 fac3 	bl	8001e40 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80008ba:	bf00      	nop
 80008bc:	3728      	adds	r7, #40	@ 0x28
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40004400 	.word	0x40004400
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020000 	.word	0x40020000

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <NMI_Handler+0x4>

080008d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <MemManage_Handler+0x4>

080008e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000926:	f001 f935 	bl	8001b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}

0800092e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Right_Pin);
 8000932:	2040      	movs	r0, #64	@ 0x40
 8000934:	f001 fc30 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Menu_Pin);
 8000938:	2080      	movs	r0, #128	@ 0x80
 800093a:	f001 fc2d 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Left_Pin);
 800093e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000942:	f001 fc29 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Enter_Pin);
 8000946:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800094a:	f001 fc25 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800095c:	4a14      	ldr	r2, [pc, #80]	@ (80009b0 <_sbrk+0x5c>)
 800095e:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <_sbrk+0x60>)
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000968:	4b13      	ldr	r3, [pc, #76]	@ (80009b8 <_sbrk+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d102      	bne.n	8000976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000970:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <_sbrk+0x64>)
 8000972:	4a12      	ldr	r2, [pc, #72]	@ (80009bc <_sbrk+0x68>)
 8000974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000976:	4b10      	ldr	r3, [pc, #64]	@ (80009b8 <_sbrk+0x64>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	429a      	cmp	r2, r3
 8000982:	d207      	bcs.n	8000994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000984:	f003 fe02 	bl	800458c <__errno>
 8000988:	4603      	mov	r3, r0
 800098a:	220c      	movs	r2, #12
 800098c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800098e:	f04f 33ff 	mov.w	r3, #4294967295
 8000992:	e009      	b.n	80009a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000994:	4b08      	ldr	r3, [pc, #32]	@ (80009b8 <_sbrk+0x64>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800099a:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <_sbrk+0x64>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	4a05      	ldr	r2, [pc, #20]	@ (80009b8 <_sbrk+0x64>)
 80009a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009a6:	68fb      	ldr	r3, [r7, #12]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20020000 	.word	0x20020000
 80009b4:	00000400 	.word	0x00000400
 80009b8:	200000c0 	.word	0x200000c0
 80009bc:	20000490 	.word	0x20000490

080009c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c4:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <SystemInit+0x20>)
 80009c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ca:	4a05      	ldr	r2, [pc, #20]	@ (80009e0 <SystemInit+0x20>)
 80009cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009e8:	f7ff ffea 	bl	80009c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009ec:	480c      	ldr	r0, [pc, #48]	@ (8000a20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ee:	490d      	ldr	r1, [pc, #52]	@ (8000a24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a04:	4c0a      	ldr	r4, [pc, #40]	@ (8000a30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a12:	f003 fdc1 	bl	8004598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a16:	f7ff fdf1 	bl	80005fc <main>
  bx  lr    
 8000a1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a28:	08005008 	.word	0x08005008
  ldr r2, =_sbss
 8000a2c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a30:	2000048c 	.word	0x2000048c

08000a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC_IRQHandler>

08000a36 <delayIsRunning>:
 * @brief Checks whether the delay is running or jot
 * @param delay: Pointer to the delay
 * @retval Boolean with the value of "running"
 * @author Juan Pablo Touron
 * */
static bool_t delayIsRunning(delay_t* delay){
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
	return delay->running;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	7a1b      	ldrb	r3, [r3, #8]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <delayInit>:
 * @param delay: Pointer to the delay
 * @param duration: Duration of the delay
 * @retval None
 * @author Juan Pablo Touron
 * */
void delayInit(delay_t* delay, tick_t duration){
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
 8000a56:	6039      	str	r1, [r7, #0]
	delay->duration = duration;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	683a      	ldr	r2, [r7, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	721a      	strb	r2, [r3, #8]
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <delayRead>:
 * @brief Checks whether the delay has ended or not. If not running, it starts the delay
 * @param delay: Pointer to the delay
 * @retval Boolean with the state of the delay (running -> true, not running -> false)
 * @author Juan Pablo Touron
 * */
bool_t delayRead(delay_t* delay){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	if (delayIsRunning(delay)){
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ffdc 	bl	8000a36 <delayIsRunning>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d00e      	beq.n	8000aa2 <delayRead+0x32>
		if ((HAL_GetTick() - delay->startTime) >= delay->duration){
 8000a84:	f001 f89a 	bl	8001bbc <HAL_GetTick>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	1ad2      	subs	r2, r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d30c      	bcc.n	8000ab2 <delayRead+0x42>
			delay->running = false;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	721a      	strb	r2, [r3, #8]
			return true;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e008      	b.n	8000ab4 <delayRead+0x44>
		}
	}
	else{
		delay->startTime = HAL_GetTick();
 8000aa2:	f001 f88b 	bl	8001bbc <HAL_GetTick>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	721a      	strb	r2, [r3, #8]
	}
	return false;
 8000ab2:	2300      	movs	r3, #0
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <addToQueue>:

uint16_t buffer[MAX_BUFFER];
int head = 0, tail = 0;

//Agrego un valor al buffer
int addToQueue(uint16_t value) {
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	80fb      	strh	r3, [r7, #6]
    int nextTail = (tail + 1) % MAX_BUFFER;
 8000ac6:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <addToQueue+0x58>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	3301      	adds	r3, #1
 8000acc:	4a12      	ldr	r2, [pc, #72]	@ (8000b18 <addToQueue+0x5c>)
 8000ace:	fb82 1203 	smull	r1, r2, r2, r3
 8000ad2:	1151      	asrs	r1, r2, #5
 8000ad4:	17da      	asrs	r2, r3, #31
 8000ad6:	1a8a      	subs	r2, r1, r2
 8000ad8:	2164      	movs	r1, #100	@ 0x64
 8000ada:	fb01 f202 	mul.w	r2, r1, r2
 8000ade:	1a9b      	subs	r3, r3, r2
 8000ae0:	60fb      	str	r3, [r7, #12]
    if (nextTail == head) {
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <addToQueue+0x60>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d102      	bne.n	8000af2 <addToQueue+0x36>
        // Buffer full
        return -1;
 8000aec:	f04f 33ff 	mov.w	r3, #4294967295
 8000af0:	e009      	b.n	8000b06 <addToQueue+0x4a>
    }
    buffer[tail] = value;
 8000af2:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <addToQueue+0x58>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	490a      	ldr	r1, [pc, #40]	@ (8000b20 <addToQueue+0x64>)
 8000af8:	88fa      	ldrh	r2, [r7, #6]
 8000afa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    tail = nextTail;
 8000afe:	4a05      	ldr	r2, [pc, #20]	@ (8000b14 <addToQueue+0x58>)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	6013      	str	r3, [r2, #0]
    return 0;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	200002a4 	.word	0x200002a4
 8000b18:	51eb851f 	.word	0x51eb851f
 8000b1c:	200002a0 	.word	0x200002a0
 8000b20:	200001d8 	.word	0x200001d8

08000b24 <removeFromQueue>:

// Saco un valor de la fila
int removeFromQueue(void) {
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
    if (head == tail) {
 8000b2a:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <removeFromQueue+0x50>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <removeFromQueue+0x54>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d102      	bne.n	8000b3c <removeFromQueue+0x18>
        // Buffer empty
        return -1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	e015      	b.n	8000b68 <removeFromQueue+0x44>
    }
    uint16_t val = buffer[head];
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b74 <removeFromQueue+0x50>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0e      	ldr	r2, [pc, #56]	@ (8000b7c <removeFromQueue+0x58>)
 8000b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b46:	80fb      	strh	r3, [r7, #6]
    head = (head + 1) % MAX_BUFFER;
 8000b48:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <removeFromQueue+0x50>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	1c5a      	adds	r2, r3, #1
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <removeFromQueue+0x5c>)
 8000b50:	fb83 1302 	smull	r1, r3, r3, r2
 8000b54:	1159      	asrs	r1, r3, #5
 8000b56:	17d3      	asrs	r3, r2, #31
 8000b58:	1acb      	subs	r3, r1, r3
 8000b5a:	2164      	movs	r1, #100	@ 0x64
 8000b5c:	fb01 f303 	mul.w	r3, r1, r3
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	4a04      	ldr	r2, [pc, #16]	@ (8000b74 <removeFromQueue+0x50>)
 8000b64:	6013      	str	r3, [r2, #0]
    return val;
 8000b66:	88fb      	ldrh	r3, [r7, #6]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	200002a0 	.word	0x200002a0
 8000b78:	200002a4 	.word	0x200002a4
 8000b7c:	200001d8 	.word	0x200001d8
 8000b80:	51eb851f 	.word	0x51eb851f

08000b84 <getFromQueue>:

// Obtengo un valor de la fila
int getFromQueue(uint16_t* value) {
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
    if (head == tail) {
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <getFromQueue+0x38>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <getFromQueue+0x3c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d102      	bne.n	8000b9e <getFromQueue+0x1a>
        return -1; // empty
 8000b98:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9c:	e007      	b.n	8000bae <getFromQueue+0x2a>
    }
    *value = buffer[head];
 8000b9e:	4b07      	ldr	r3, [pc, #28]	@ (8000bbc <getFromQueue+0x38>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a08      	ldr	r2, [pc, #32]	@ (8000bc4 <getFromQueue+0x40>)
 8000ba4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	801a      	strh	r2, [r3, #0]
    return 0;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	200002a0 	.word	0x200002a0
 8000bc0:	200002a4 	.word	0x200002a4
 8000bc4:	200001d8 	.word	0x200001d8

08000bc8 <menuInit>:


static void menuInit(){
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
	menu = SHOWTIME_M;
 8000bcc:	4b03      	ldr	r3, [pc, #12]	@ (8000bdc <menuInit+0x14>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	200000c5 	.word	0x200000c5

08000be0 <timeSetInit>:

static void timeSetInit(){
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
	datetimeSet = HOUR_DT;
 8000be4:	4b03      	ldr	r3, [pc, #12]	@ (8000bf4 <timeSetInit+0x14>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	200000c6 	.word	0x200000c6

08000bf8 <menuUpdate>:

static void menuUpdate(uint16_t button){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	80fb      	strh	r3, [r7, #6]
	switch(menu){
 8000c02:	4b3a      	ldr	r3, [pc, #232]	@ (8000cec <menuUpdate+0xf4>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d04b      	beq.n	8000ca2 <menuUpdate+0xaa>
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	dc62      	bgt.n	8000cd4 <menuUpdate+0xdc>
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d002      	beq.n	8000c18 <menuUpdate+0x20>
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d023      	beq.n	8000c5e <menuUpdate+0x66>
		if (button == rightButton) menu = SHOWTIME_M;
		else if (button == leftButton) menu = SETTIME_M;
		else if (button == enterButton)	app = SETALARM;
		break;
	default:
		break;
 8000c16:	e05d      	b.n	8000cd4 <menuUpdate+0xdc>
		showOptions();
 8000c18:	f000 fb78 	bl	800130c <showOptions>
		if (button == rightButton) menu = SETTIME_M;
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	2b40      	cmp	r3, #64	@ 0x40
 8000c20:	d103      	bne.n	8000c2a <menuUpdate+0x32>
 8000c22:	4b32      	ldr	r3, [pc, #200]	@ (8000cec <menuUpdate+0xf4>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
		break;
 8000c28:	e056      	b.n	8000cd8 <menuUpdate+0xe0>
		else if (button == leftButton) menu = SETALARM_M;
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c30:	d103      	bne.n	8000c3a <menuUpdate+0x42>
 8000c32:	4b2e      	ldr	r3, [pc, #184]	@ (8000cec <menuUpdate+0xf4>)
 8000c34:	2202      	movs	r2, #2
 8000c36:	701a      	strb	r2, [r3, #0]
		break;
 8000c38:	e04e      	b.n	8000cd8 <menuUpdate+0xe0>
		else if (button == enterButton){
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c40:	d14a      	bne.n	8000cd8 <menuUpdate+0xe0>
			app = SHOWTIME;
 8000c42:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf0 <menuUpdate+0xf8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
			lastTime[64] = " "; //
 8000c48:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf4 <menuUpdate+0xfc>)
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf8 <menuUpdate+0x100>)
 8000c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			lastDate[64] = " "; //Porque la fecha queda guardada y si no
 8000c52:	4b28      	ldr	r3, [pc, #160]	@ (8000cf4 <menuUpdate+0xfc>)
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4b29      	ldr	r3, [pc, #164]	@ (8000cfc <menuUpdate+0x104>)
 8000c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		break;
 8000c5c:	e03c      	b.n	8000cd8 <menuUpdate+0xe0>
		showOptions();
 8000c5e:	f000 fb55 	bl	800130c <showOptions>
		if (button == rightButton) menu = SETALARM_M;
 8000c62:	88fb      	ldrh	r3, [r7, #6]
 8000c64:	2b40      	cmp	r3, #64	@ 0x40
 8000c66:	d103      	bne.n	8000c70 <menuUpdate+0x78>
 8000c68:	4b20      	ldr	r3, [pc, #128]	@ (8000cec <menuUpdate+0xf4>)
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	701a      	strb	r2, [r3, #0]
		break;
 8000c6e:	e035      	b.n	8000cdc <menuUpdate+0xe4>
		else if (button == leftButton) menu = SHOWTIME_M;
 8000c70:	88fb      	ldrh	r3, [r7, #6]
 8000c72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c76:	d103      	bne.n	8000c80 <menuUpdate+0x88>
 8000c78:	4b1c      	ldr	r3, [pc, #112]	@ (8000cec <menuUpdate+0xf4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
		break;
 8000c7e:	e02d      	b.n	8000cdc <menuUpdate+0xe4>
		else if (button == enterButton){
 8000c80:	88fb      	ldrh	r3, [r7, #6]
 8000c82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c86:	d129      	bne.n	8000cdc <menuUpdate+0xe4>
			app = SETTIME;
 8000c88:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <menuUpdate+0xf8>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	701a      	strb	r2, [r3, #0]
			timeSetInit();
 8000c8e:	f7ff ffa7 	bl	8000be0 <timeSetInit>
			GetTime(&time);
 8000c92:	481b      	ldr	r0, [pc, #108]	@ (8000d00 <menuUpdate+0x108>)
 8000c94:	f000 fc36 	bl	8001504 <GetTime>
			CopyTime(&time,&timeToSet);
 8000c98:	491a      	ldr	r1, [pc, #104]	@ (8000d04 <menuUpdate+0x10c>)
 8000c9a:	4819      	ldr	r0, [pc, #100]	@ (8000d00 <menuUpdate+0x108>)
 8000c9c:	f000 fc81 	bl	80015a2 <CopyTime>
		break;
 8000ca0:	e01c      	b.n	8000cdc <menuUpdate+0xe4>
		showOptions();
 8000ca2:	f000 fb33 	bl	800130c <showOptions>
		if (button == rightButton) menu = SHOWTIME_M;
 8000ca6:	88fb      	ldrh	r3, [r7, #6]
 8000ca8:	2b40      	cmp	r3, #64	@ 0x40
 8000caa:	d103      	bne.n	8000cb4 <menuUpdate+0xbc>
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <menuUpdate+0xf4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
		break;
 8000cb2:	e015      	b.n	8000ce0 <menuUpdate+0xe8>
		else if (button == leftButton) menu = SETTIME_M;
 8000cb4:	88fb      	ldrh	r3, [r7, #6]
 8000cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000cba:	d103      	bne.n	8000cc4 <menuUpdate+0xcc>
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <menuUpdate+0xf4>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
		break;
 8000cc2:	e00d      	b.n	8000ce0 <menuUpdate+0xe8>
		else if (button == enterButton)	app = SETALARM;
 8000cc4:	88fb      	ldrh	r3, [r7, #6]
 8000cc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cca:	d109      	bne.n	8000ce0 <menuUpdate+0xe8>
 8000ccc:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <menuUpdate+0xf8>)
 8000cce:	2202      	movs	r2, #2
 8000cd0:	701a      	strb	r2, [r3, #0]
		break;
 8000cd2:	e005      	b.n	8000ce0 <menuUpdate+0xe8>
		break;
 8000cd4:	bf00      	nop
 8000cd6:	e004      	b.n	8000ce2 <menuUpdate+0xea>
		break;
 8000cd8:	bf00      	nop
 8000cda:	e002      	b.n	8000ce2 <menuUpdate+0xea>
		break;
 8000cdc:	bf00      	nop
 8000cde:	e000      	b.n	8000ce2 <menuUpdate+0xea>
		break;
 8000ce0:	bf00      	nop
	}
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200000c5 	.word	0x200000c5
 8000cf0:	200000c4 	.word	0x200000c4
 8000cf4:	08004ea0 	.word	0x08004ea0
 8000cf8:	20000148 	.word	0x20000148
 8000cfc:	20000188 	.word	0x20000188
 8000d00:	200001c8 	.word	0x200001c8
 8000d04:	200001d0 	.word	0x200001d0

08000d08 <checkLeapYear>:

bool_t checkLeapYear(uint8_t year){
 8000d08:	b490      	push	{r4, r7}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	//chequear año bisiesto
	if ((year%400 ==0)|((year%4==0)&(year%100 !=0))) return true;
 8000d12:	79fa      	ldrb	r2, [r7, #7]
 8000d14:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <checkLeapYear+0x78>)
 8000d16:	fb83 1302 	smull	r1, r3, r3, r2
 8000d1a:	11d9      	asrs	r1, r3, #7
 8000d1c:	17d3      	asrs	r3, r2, #31
 8000d1e:	1acb      	subs	r3, r1, r3
 8000d20:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000d24:	fb01 f303 	mul.w	r3, r1, r3
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	bf0c      	ite	eq
 8000d2e:	2301      	moveq	r3, #1
 8000d30:	2300      	movne	r3, #0
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	461c      	mov	r4, r3
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	bf0c      	ite	eq
 8000d42:	2301      	moveq	r3, #1
 8000d44:	2300      	movne	r3, #0
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	490d      	ldr	r1, [pc, #52]	@ (8000d80 <checkLeapYear+0x78>)
 8000d4c:	fba1 0103 	umull	r0, r1, r1, r3
 8000d50:	0949      	lsrs	r1, r1, #5
 8000d52:	2064      	movs	r0, #100	@ 0x64
 8000d54:	fb00 f101 	mul.w	r1, r0, r1
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	bf14      	ite	ne
 8000d60:	2301      	movne	r3, #1
 8000d62:	2300      	moveq	r3, #0
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	4013      	ands	r3, r2
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	4323      	orrs	r3, r4
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <checkLeapYear+0x6c>
 8000d70:	2301      	movs	r3, #1
 8000d72:	e000      	b.n	8000d76 <checkLeapYear+0x6e>
	else return false;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc90      	pop	{r4, r7}
 8000d7e:	4770      	bx	lr
 8000d80:	51eb851f 	.word	0x51eb851f

08000d84 <timeSetUpdate>:

bool_t timeSetUpdate(DS3231_DateTime *timeSet, uint16_t button){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	807b      	strh	r3, [r7, #2]
	uint8_t maxDay[12] = {31,28,31,30,31,30,31,31,30,31,30,31};
 8000d90:	4a94      	ldr	r2, [pc, #592]	@ (8000fe4 <timeSetUpdate+0x260>)
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (checkLeapYear(timeSet->Year)) maxDay[1] = 29;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	88db      	ldrh	r3, [r3, #6]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ffb0 	bl	8000d08 <checkLeapYear>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <timeSetUpdate+0x2e>
 8000dae:	231d      	movs	r3, #29
 8000db0:	737b      	strb	r3, [r7, #13]
	switch(datetimeSet){
 8000db2:	4b8d      	ldr	r3, [pc, #564]	@ (8000fe8 <timeSetUpdate+0x264>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b05      	cmp	r3, #5
 8000db8:	f200 813c 	bhi.w	8001034 <timeSetUpdate+0x2b0>
 8000dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8000dc4 <timeSetUpdate+0x40>)
 8000dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc2:	bf00      	nop
 8000dc4:	08000ddd 	.word	0x08000ddd
 8000dc8:	08000e39 	.word	0x08000e39
 8000dcc:	08000e95 	.word	0x08000e95
 8000dd0:	08000fa5 	.word	0x08000fa5
 8000dd4:	08000f4b 	.word	0x08000f4b
 8000dd8:	08000ef1 	.word	0x08000ef1
	case HOUR_DT:
		if (button == enterButton) datetimeSet = MINUTE_DT;
 8000ddc:	887b      	ldrh	r3, [r7, #2]
 8000dde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000de2:	d103      	bne.n	8000dec <timeSetUpdate+0x68>
 8000de4:	4b80      	ldr	r3, [pc, #512]	@ (8000fe8 <timeSetUpdate+0x264>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
			if (timeSet->Hours == 0){
				timeSet->Hours = 23;
			}
			else timeSet->Hours--;
		}
		break;
 8000dea:	e118      	b.n	800101e <timeSetUpdate+0x29a>
		else if (button == rightButton){
 8000dec:	887b      	ldrh	r3, [r7, #2]
 8000dee:	2b40      	cmp	r3, #64	@ 0x40
 8000df0:	d10e      	bne.n	8000e10 <timeSetUpdate+0x8c>
			if (timeSet->Hours == 23){
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	789b      	ldrb	r3, [r3, #2]
 8000df6:	2b17      	cmp	r3, #23
 8000df8:	d103      	bne.n	8000e02 <timeSetUpdate+0x7e>
				timeSet->Hours = 0;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	709a      	strb	r2, [r3, #2]
		break;
 8000e00:	e10d      	b.n	800101e <timeSetUpdate+0x29a>
			else timeSet->Hours++;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	789b      	ldrb	r3, [r3, #2]
 8000e06:	3301      	adds	r3, #1
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	709a      	strb	r2, [r3, #2]
		break;
 8000e0e:	e106      	b.n	800101e <timeSetUpdate+0x29a>
		else if (button == leftButton){
 8000e10:	887b      	ldrh	r3, [r7, #2]
 8000e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e16:	f040 8102 	bne.w	800101e <timeSetUpdate+0x29a>
			if (timeSet->Hours == 0){
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	789b      	ldrb	r3, [r3, #2]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d103      	bne.n	8000e2a <timeSetUpdate+0xa6>
				timeSet->Hours = 23;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2217      	movs	r2, #23
 8000e26:	709a      	strb	r2, [r3, #2]
		break;
 8000e28:	e0f9      	b.n	800101e <timeSetUpdate+0x29a>
			else timeSet->Hours--;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	789b      	ldrb	r3, [r3, #2]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	709a      	strb	r2, [r3, #2]
		break;
 8000e36:	e0f2      	b.n	800101e <timeSetUpdate+0x29a>
	case MINUTE_DT:
		if (button == enterButton) datetimeSet = SECOND_DT;
 8000e38:	887b      	ldrh	r3, [r7, #2]
 8000e3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e3e:	d103      	bne.n	8000e48 <timeSetUpdate+0xc4>
 8000e40:	4b69      	ldr	r3, [pc, #420]	@ (8000fe8 <timeSetUpdate+0x264>)
 8000e42:	2202      	movs	r2, #2
 8000e44:	701a      	strb	r2, [r3, #0]
			if (timeSet->Minutes == 0){
				timeSet->Minutes = 59;
			}
			else timeSet->Minutes--;
		}
		break;
 8000e46:	e0ec      	b.n	8001022 <timeSetUpdate+0x29e>
		else if (button == rightButton){
 8000e48:	887b      	ldrh	r3, [r7, #2]
 8000e4a:	2b40      	cmp	r3, #64	@ 0x40
 8000e4c:	d10e      	bne.n	8000e6c <timeSetUpdate+0xe8>
			if (timeSet->Minutes == 59){
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	785b      	ldrb	r3, [r3, #1]
 8000e52:	2b3b      	cmp	r3, #59	@ 0x3b
 8000e54:	d103      	bne.n	8000e5e <timeSetUpdate+0xda>
				timeSet->Minutes = 0;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	705a      	strb	r2, [r3, #1]
		break;
 8000e5c:	e0e1      	b.n	8001022 <timeSetUpdate+0x29e>
			else timeSet->Minutes++;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	785b      	ldrb	r3, [r3, #1]
 8000e62:	3301      	adds	r3, #1
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	705a      	strb	r2, [r3, #1]
		break;
 8000e6a:	e0da      	b.n	8001022 <timeSetUpdate+0x29e>
		else if (button == leftButton){
 8000e6c:	887b      	ldrh	r3, [r7, #2]
 8000e6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e72:	f040 80d6 	bne.w	8001022 <timeSetUpdate+0x29e>
			if (timeSet->Minutes == 0){
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	785b      	ldrb	r3, [r3, #1]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d103      	bne.n	8000e86 <timeSetUpdate+0x102>
				timeSet->Minutes = 59;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	223b      	movs	r2, #59	@ 0x3b
 8000e82:	705a      	strb	r2, [r3, #1]
		break;
 8000e84:	e0cd      	b.n	8001022 <timeSetUpdate+0x29e>
			else timeSet->Minutes--;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	785b      	ldrb	r3, [r3, #1]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	705a      	strb	r2, [r3, #1]
		break;
 8000e92:	e0c6      	b.n	8001022 <timeSetUpdate+0x29e>
	case SECOND_DT:
		if (button == enterButton) datetimeSet = YEAR_DT;
 8000e94:	887b      	ldrh	r3, [r7, #2]
 8000e96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e9a:	d103      	bne.n	8000ea4 <timeSetUpdate+0x120>
 8000e9c:	4b52      	ldr	r3, [pc, #328]	@ (8000fe8 <timeSetUpdate+0x264>)
 8000e9e:	2205      	movs	r2, #5
 8000ea0:	701a      	strb	r2, [r3, #0]
			if (timeSet->Seconds == 0){
				timeSet->Seconds = 59;
			}
			else timeSet->Seconds--;
		}
		break;
 8000ea2:	e0c0      	b.n	8001026 <timeSetUpdate+0x2a2>
		else if (button == rightButton){
 8000ea4:	887b      	ldrh	r3, [r7, #2]
 8000ea6:	2b40      	cmp	r3, #64	@ 0x40
 8000ea8:	d10e      	bne.n	8000ec8 <timeSetUpdate+0x144>
			if (timeSet->Seconds == 59){
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b3b      	cmp	r3, #59	@ 0x3b
 8000eb0:	d103      	bne.n	8000eba <timeSetUpdate+0x136>
				timeSet->Seconds = 0;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
		break;
 8000eb8:	e0b5      	b.n	8001026 <timeSetUpdate+0x2a2>
			else timeSet->Seconds++;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	701a      	strb	r2, [r3, #0]
		break;
 8000ec6:	e0ae      	b.n	8001026 <timeSetUpdate+0x2a2>
		else if (button == leftButton){
 8000ec8:	887b      	ldrh	r3, [r7, #2]
 8000eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ece:	f040 80aa 	bne.w	8001026 <timeSetUpdate+0x2a2>
			if (timeSet->Seconds == 0){
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d103      	bne.n	8000ee2 <timeSetUpdate+0x15e>
				timeSet->Seconds = 59;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	223b      	movs	r2, #59	@ 0x3b
 8000ede:	701a      	strb	r2, [r3, #0]
		break;
 8000ee0:	e0a1      	b.n	8001026 <timeSetUpdate+0x2a2>
			else timeSet->Seconds--;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	701a      	strb	r2, [r3, #0]
		break;
 8000eee:	e09a      	b.n	8001026 <timeSetUpdate+0x2a2>
	case YEAR_DT:
		if (button == enterButton) datetimeSet = MONTH_DT;
 8000ef0:	887b      	ldrh	r3, [r7, #2]
 8000ef2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ef6:	d103      	bne.n	8000f00 <timeSetUpdate+0x17c>
 8000ef8:	4b3b      	ldr	r3, [pc, #236]	@ (8000fe8 <timeSetUpdate+0x264>)
 8000efa:	2204      	movs	r2, #4
 8000efc:	701a      	strb	r2, [r3, #0]
			if (timeSet->Year == 0){
				timeSet->Year = 99;
			}
			else timeSet->Year--;
		}
		break;
 8000efe:	e094      	b.n	800102a <timeSetUpdate+0x2a6>
		else if (button == rightButton){
 8000f00:	887b      	ldrh	r3, [r7, #2]
 8000f02:	2b40      	cmp	r3, #64	@ 0x40
 8000f04:	d10e      	bne.n	8000f24 <timeSetUpdate+0x1a0>
			if (timeSet->Year == 99){
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	88db      	ldrh	r3, [r3, #6]
 8000f0a:	2b63      	cmp	r3, #99	@ 0x63
 8000f0c:	d103      	bne.n	8000f16 <timeSetUpdate+0x192>
				timeSet->Year = 0;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	80da      	strh	r2, [r3, #6]
		break;
 8000f14:	e089      	b.n	800102a <timeSetUpdate+0x2a6>
			else timeSet->Year++;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	88db      	ldrh	r3, [r3, #6]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	80da      	strh	r2, [r3, #6]
		break;
 8000f22:	e082      	b.n	800102a <timeSetUpdate+0x2a6>
		else if (button == leftButton){
 8000f24:	887b      	ldrh	r3, [r7, #2]
 8000f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f2a:	d17e      	bne.n	800102a <timeSetUpdate+0x2a6>
			if (timeSet->Year == 0){
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	88db      	ldrh	r3, [r3, #6]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d103      	bne.n	8000f3c <timeSetUpdate+0x1b8>
				timeSet->Year = 99;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2263      	movs	r2, #99	@ 0x63
 8000f38:	80da      	strh	r2, [r3, #6]
		break;
 8000f3a:	e076      	b.n	800102a <timeSetUpdate+0x2a6>
			else timeSet->Year--;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	88db      	ldrh	r3, [r3, #6]
 8000f40:	3b01      	subs	r3, #1
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	80da      	strh	r2, [r3, #6]
		break;
 8000f48:	e06f      	b.n	800102a <timeSetUpdate+0x2a6>
	case MONTH_DT:
		if (button == enterButton) datetimeSet = DATE_DT;
 8000f4a:	887b      	ldrh	r3, [r7, #2]
 8000f4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f50:	d103      	bne.n	8000f5a <timeSetUpdate+0x1d6>
 8000f52:	4b25      	ldr	r3, [pc, #148]	@ (8000fe8 <timeSetUpdate+0x264>)
 8000f54:	2203      	movs	r2, #3
 8000f56:	701a      	strb	r2, [r3, #0]
			if (timeSet->Month == 1){
				timeSet->Month = 12;
			}
			else timeSet->Month--;
		}
		break;
 8000f58:	e069      	b.n	800102e <timeSetUpdate+0x2aa>
		else if (button == rightButton){
 8000f5a:	887b      	ldrh	r3, [r7, #2]
 8000f5c:	2b40      	cmp	r3, #64	@ 0x40
 8000f5e:	d10e      	bne.n	8000f7e <timeSetUpdate+0x1fa>
			if (timeSet->Month == 12){
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	795b      	ldrb	r3, [r3, #5]
 8000f64:	2b0c      	cmp	r3, #12
 8000f66:	d103      	bne.n	8000f70 <timeSetUpdate+0x1ec>
				timeSet->Month = 1;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	715a      	strb	r2, [r3, #5]
		break;
 8000f6e:	e05e      	b.n	800102e <timeSetUpdate+0x2aa>
			else timeSet->Month++;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	795b      	ldrb	r3, [r3, #5]
 8000f74:	3301      	adds	r3, #1
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	715a      	strb	r2, [r3, #5]
		break;
 8000f7c:	e057      	b.n	800102e <timeSetUpdate+0x2aa>
		else if (button == leftButton){
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f84:	d153      	bne.n	800102e <timeSetUpdate+0x2aa>
			if (timeSet->Month == 1){
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	795b      	ldrb	r3, [r3, #5]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d103      	bne.n	8000f96 <timeSetUpdate+0x212>
				timeSet->Month = 12;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	220c      	movs	r2, #12
 8000f92:	715a      	strb	r2, [r3, #5]
		break;
 8000f94:	e04b      	b.n	800102e <timeSetUpdate+0x2aa>
			else timeSet->Month--;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	795b      	ldrb	r3, [r3, #5]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	715a      	strb	r2, [r3, #5]
		break;
 8000fa2:	e044      	b.n	800102e <timeSetUpdate+0x2aa>
	case DATE_DT:
		if (button == enterButton) return true;
 8000fa4:	887b      	ldrh	r3, [r7, #2]
 8000fa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000faa:	d101      	bne.n	8000fb0 <timeSetUpdate+0x22c>
 8000fac:	2301      	movs	r3, #1
 8000fae:	e042      	b.n	8001036 <timeSetUpdate+0x2b2>
		else if (button == rightButton){
 8000fb0:	887b      	ldrh	r3, [r7, #2]
 8000fb2:	2b40      	cmp	r3, #64	@ 0x40
 8000fb4:	d11a      	bne.n	8000fec <timeSetUpdate+0x268>
			if (timeSet->Date == maxDay[(timeSet->Month)-1]){
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	791a      	ldrb	r2, [r3, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	795b      	ldrb	r3, [r3, #5]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	3318      	adds	r3, #24
 8000fc2:	443b      	add	r3, r7
 8000fc4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d103      	bne.n	8000fd4 <timeSetUpdate+0x250>
				timeSet->Date = 1;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	711a      	strb	r2, [r3, #4]
			if (timeSet->Date == 1){
				timeSet->Date = maxDay[(timeSet->Month)-1];
			}
			else timeSet->Date--;
		}
		break;
 8000fd2:	e02e      	b.n	8001032 <timeSetUpdate+0x2ae>
			else timeSet->Date++;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	791b      	ldrb	r3, [r3, #4]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	711a      	strb	r2, [r3, #4]
		break;
 8000fe0:	e027      	b.n	8001032 <timeSetUpdate+0x2ae>
 8000fe2:	bf00      	nop
 8000fe4:	08004ea4 	.word	0x08004ea4
 8000fe8:	200000c6 	.word	0x200000c6
		else if (button == leftButton){
 8000fec:	887b      	ldrh	r3, [r7, #2]
 8000fee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ff2:	d11e      	bne.n	8001032 <timeSetUpdate+0x2ae>
			if (timeSet->Date == 1){
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	791b      	ldrb	r3, [r3, #4]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d109      	bne.n	8001010 <timeSetUpdate+0x28c>
				timeSet->Date = maxDay[(timeSet->Month)-1];
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	795b      	ldrb	r3, [r3, #5]
 8001000:	3b01      	subs	r3, #1
 8001002:	3318      	adds	r3, #24
 8001004:	443b      	add	r3, r7
 8001006:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	711a      	strb	r2, [r3, #4]
		break;
 800100e:	e010      	b.n	8001032 <timeSetUpdate+0x2ae>
			else timeSet->Date--;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	791b      	ldrb	r3, [r3, #4]
 8001014:	3b01      	subs	r3, #1
 8001016:	b2da      	uxtb	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	711a      	strb	r2, [r3, #4]
		break;
 800101c:	e009      	b.n	8001032 <timeSetUpdate+0x2ae>
		break;
 800101e:	bf00      	nop
 8001020:	e008      	b.n	8001034 <timeSetUpdate+0x2b0>
		break;
 8001022:	bf00      	nop
 8001024:	e006      	b.n	8001034 <timeSetUpdate+0x2b0>
		break;
 8001026:	bf00      	nop
 8001028:	e004      	b.n	8001034 <timeSetUpdate+0x2b0>
		break;
 800102a:	bf00      	nop
 800102c:	e002      	b.n	8001034 <timeSetUpdate+0x2b0>
		break;
 800102e:	bf00      	nop
 8001030:	e000      	b.n	8001034 <timeSetUpdate+0x2b0>
		break;
 8001032:	bf00      	nop
		break;
	}
	return false;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop

08001040 <appInit>:

void appInit(){
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0

	LCD_I2C_Init();
 8001044:	f000 fb22 	bl	800168c <LCD_I2C_Init>
	HAL_Delay(1000);
 8001048:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800104c:	f000 fdc2 	bl	8001bd4 <HAL_Delay>

	LCD_Clear_Write("Bienvenido",0,3);
 8001050:	2203      	movs	r2, #3
 8001052:	2100      	movs	r1, #0
 8001054:	480b      	ldr	r0, [pc, #44]	@ (8001084 <appInit+0x44>)
 8001056:	f000 fb79 	bl	800174c <LCD_Clear_Write>
	HAL_Delay(2000);
 800105a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800105e:	f000 fdb9 	bl	8001bd4 <HAL_Delay>
	LCD_Clear_Write("",0,0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	4808      	ldr	r0, [pc, #32]	@ (8001088 <appInit+0x48>)
 8001068:	f000 fb70 	bl	800174c <LCD_Clear_Write>
	LCD_Clear_Write("",1,0);
 800106c:	2200      	movs	r2, #0
 800106e:	2101      	movs	r1, #1
 8001070:	4805      	ldr	r0, [pc, #20]	@ (8001088 <appInit+0x48>)
 8001072:	f000 fb6b 	bl	800174c <LCD_Clear_Write>
	menuInit();
 8001076:	f7ff fda7 	bl	8000bc8 <menuInit>
	app = SHOWTIME;
 800107a:	4b04      	ldr	r3, [pc, #16]	@ (800108c <appInit+0x4c>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	08004eb0 	.word	0x08004eb0
 8001088:	08004ebc 	.word	0x08004ebc
 800108c:	200000c4 	.word	0x200000c4

08001090 <appUpdate>:

void appUpdate(){
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
	uint16_t currentButton;
	if (getFromQueue(&currentButton)) currentButton = 0;
 8001096:	1dbb      	adds	r3, r7, #6
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fd73 	bl	8000b84 <getFromQueue>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <appUpdate+0x18>
 80010a4:	2300      	movs	r3, #0
 80010a6:	80fb      	strh	r3, [r7, #6]
	switch(app){
 80010a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001124 <appUpdate+0x94>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	d832      	bhi.n	8001116 <appUpdate+0x86>
 80010b0:	a201      	add	r2, pc, #4	@ (adr r2, 80010b8 <appUpdate+0x28>)
 80010b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b6:	bf00      	nop
 80010b8:	080010c9 	.word	0x080010c9
 80010bc:	080010dd 	.word	0x080010dd
 80010c0:	080010f5 	.word	0x080010f5
 80010c4:	0800110d 	.word	0x0800110d
	case SHOWTIME:
		if (currentButton == menuButton) app = MENU;
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	2b80      	cmp	r3, #128	@ 0x80
 80010cc:	d103      	bne.n	80010d6 <appUpdate+0x46>
 80010ce:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <appUpdate+0x94>)
 80010d0:	2203      	movs	r2, #3
 80010d2:	701a      	strb	r2, [r3, #0]
		else showTimeMode();
		break;
 80010d4:	e020      	b.n	8001118 <appUpdate+0x88>
		else showTimeMode();
 80010d6:	f000 f827 	bl	8001128 <showTimeMode>
		break;
 80010da:	e01d      	b.n	8001118 <appUpdate+0x88>
	case SETTIME:
		if (currentButton == menuButton) app = MENU;
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	2b80      	cmp	r3, #128	@ 0x80
 80010e0:	d103      	bne.n	80010ea <appUpdate+0x5a>
 80010e2:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <appUpdate+0x94>)
 80010e4:	2203      	movs	r2, #3
 80010e6:	701a      	strb	r2, [r3, #0]
		else setTimeMode(currentButton);
		break;
 80010e8:	e016      	b.n	8001118 <appUpdate+0x88>
		else setTimeMode(currentButton);
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 f86f 	bl	80011d0 <setTimeMode>
		break;
 80010f2:	e011      	b.n	8001118 <appUpdate+0x88>
	case SETALARM:
		if (currentButton == menuButton) app = MENU;
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	2b80      	cmp	r3, #128	@ 0x80
 80010f8:	d103      	bne.n	8001102 <appUpdate+0x72>
 80010fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001124 <appUpdate+0x94>)
 80010fc:	2203      	movs	r2, #3
 80010fe:	701a      	strb	r2, [r3, #0]
		else setAlarmMode(currentButton);
		break;
 8001100:	e00a      	b.n	8001118 <appUpdate+0x88>
		else setAlarmMode(currentButton);
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	4618      	mov	r0, r3
 8001106:	f000 f8e9 	bl	80012dc <setAlarmMode>
		break;
 800110a:	e005      	b.n	8001118 <appUpdate+0x88>
	case MENU:
		menuUpdate(currentButton);
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fd72 	bl	8000bf8 <menuUpdate>
		break;
 8001114:	e000      	b.n	8001118 <appUpdate+0x88>
	default:
		break;
 8001116:	bf00      	nop
	}
	removeFromQueue();
 8001118:	f7ff fd04 	bl	8000b24 <removeFromQueue>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200000c4 	.word	0x200000c4

08001128 <showTimeMode>:

static void showTimeMode(){
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af02      	add	r7, sp, #8
	  GetTime(&time);
 800112e:	4821      	ldr	r0, [pc, #132]	@ (80011b4 <showTimeMode+0x8c>)
 8001130:	f000 f9e8 	bl	8001504 <GetTime>


	  sprintf(timetext, "%02d:%02d:%02d",time.Hours, time.Minutes, time.Seconds);
 8001134:	4b1f      	ldr	r3, [pc, #124]	@ (80011b4 <showTimeMode+0x8c>)
 8001136:	789b      	ldrb	r3, [r3, #2]
 8001138:	461a      	mov	r2, r3
 800113a:	4b1e      	ldr	r3, [pc, #120]	@ (80011b4 <showTimeMode+0x8c>)
 800113c:	785b      	ldrb	r3, [r3, #1]
 800113e:	4619      	mov	r1, r3
 8001140:	4b1c      	ldr	r3, [pc, #112]	@ (80011b4 <showTimeMode+0x8c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	460b      	mov	r3, r1
 8001148:	491b      	ldr	r1, [pc, #108]	@ (80011b8 <showTimeMode+0x90>)
 800114a:	481c      	ldr	r0, [pc, #112]	@ (80011bc <showTimeMode+0x94>)
 800114c:	f003 f9f4 	bl	8004538 <siprintf>
	  sprintf(datetext, "%02d/%02d/%04d",time.Date, time.Month, time.Year);
 8001150:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <showTimeMode+0x8c>)
 8001152:	791b      	ldrb	r3, [r3, #4]
 8001154:	461a      	mov	r2, r3
 8001156:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <showTimeMode+0x8c>)
 8001158:	795b      	ldrb	r3, [r3, #5]
 800115a:	4619      	mov	r1, r3
 800115c:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <showTimeMode+0x8c>)
 800115e:	88db      	ldrh	r3, [r3, #6]
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	460b      	mov	r3, r1
 8001164:	4916      	ldr	r1, [pc, #88]	@ (80011c0 <showTimeMode+0x98>)
 8001166:	4817      	ldr	r0, [pc, #92]	@ (80011c4 <showTimeMode+0x9c>)
 8001168:	f003 f9e6 	bl	8004538 <siprintf>

	  if (strcmp(timetext, lastTime) != 0) {
 800116c:	4916      	ldr	r1, [pc, #88]	@ (80011c8 <showTimeMode+0xa0>)
 800116e:	4813      	ldr	r0, [pc, #76]	@ (80011bc <showTimeMode+0x94>)
 8001170:	f7ff f84e 	bl	8000210 <strcmp>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d008      	beq.n	800118c <showTimeMode+0x64>
		  LCD_Clear_Write(timetext, 0, 4);
 800117a:	2204      	movs	r2, #4
 800117c:	2100      	movs	r1, #0
 800117e:	480f      	ldr	r0, [pc, #60]	@ (80011bc <showTimeMode+0x94>)
 8001180:	f000 fae4 	bl	800174c <LCD_Clear_Write>
	      strcpy(lastTime, timetext);
 8001184:	490d      	ldr	r1, [pc, #52]	@ (80011bc <showTimeMode+0x94>)
 8001186:	4810      	ldr	r0, [pc, #64]	@ (80011c8 <showTimeMode+0xa0>)
 8001188:	f003 fa2c 	bl	80045e4 <strcpy>
	  }

	  if (strcmp(datetext, lastDate) != 0) {
 800118c:	490f      	ldr	r1, [pc, #60]	@ (80011cc <showTimeMode+0xa4>)
 800118e:	480d      	ldr	r0, [pc, #52]	@ (80011c4 <showTimeMode+0x9c>)
 8001190:	f7ff f83e 	bl	8000210 <strcmp>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d008      	beq.n	80011ac <showTimeMode+0x84>
	      LCD_Clear_Write(datetext, 1, 3);
 800119a:	2203      	movs	r2, #3
 800119c:	2101      	movs	r1, #1
 800119e:	4809      	ldr	r0, [pc, #36]	@ (80011c4 <showTimeMode+0x9c>)
 80011a0:	f000 fad4 	bl	800174c <LCD_Clear_Write>
	      strcpy(lastDate, datetext);
 80011a4:	4907      	ldr	r1, [pc, #28]	@ (80011c4 <showTimeMode+0x9c>)
 80011a6:	4809      	ldr	r0, [pc, #36]	@ (80011cc <showTimeMode+0xa4>)
 80011a8:	f003 fa1c 	bl	80045e4 <strcpy>
	  }
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200001c8 	.word	0x200001c8
 80011b8:	08004ec0 	.word	0x08004ec0
 80011bc:	20000108 	.word	0x20000108
 80011c0:	08004ed0 	.word	0x08004ed0
 80011c4:	200000c8 	.word	0x200000c8
 80011c8:	20000148 	.word	0x20000148
 80011cc:	20000188 	.word	0x20000188

080011d0 <setTimeMode>:

static void setTimeMode(uint16_t currentButton){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	@ 0x28
 80011d4:	af02      	add	r7, sp, #8
 80011d6:	4603      	mov	r3, r0
 80011d8:	80fb      	strh	r3, [r7, #6]

	sprintf(timetext, "%02d:%02d:%02d",timeToSet.Hours, timeToSet.Minutes, timeToSet.Seconds);
 80011da:	4b32      	ldr	r3, [pc, #200]	@ (80012a4 <setTimeMode+0xd4>)
 80011dc:	789b      	ldrb	r3, [r3, #2]
 80011de:	461a      	mov	r2, r3
 80011e0:	4b30      	ldr	r3, [pc, #192]	@ (80012a4 <setTimeMode+0xd4>)
 80011e2:	785b      	ldrb	r3, [r3, #1]
 80011e4:	4619      	mov	r1, r3
 80011e6:	4b2f      	ldr	r3, [pc, #188]	@ (80012a4 <setTimeMode+0xd4>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	460b      	mov	r3, r1
 80011ee:	492e      	ldr	r1, [pc, #184]	@ (80012a8 <setTimeMode+0xd8>)
 80011f0:	482e      	ldr	r0, [pc, #184]	@ (80012ac <setTimeMode+0xdc>)
 80011f2:	f003 f9a1 	bl	8004538 <siprintf>
	sprintf(datetext, "%02d/%02d/%04d",timeToSet.Date, timeToSet.Month, timeToSet.Year);
 80011f6:	4b2b      	ldr	r3, [pc, #172]	@ (80012a4 <setTimeMode+0xd4>)
 80011f8:	791b      	ldrb	r3, [r3, #4]
 80011fa:	461a      	mov	r2, r3
 80011fc:	4b29      	ldr	r3, [pc, #164]	@ (80012a4 <setTimeMode+0xd4>)
 80011fe:	795b      	ldrb	r3, [r3, #5]
 8001200:	4619      	mov	r1, r3
 8001202:	4b28      	ldr	r3, [pc, #160]	@ (80012a4 <setTimeMode+0xd4>)
 8001204:	88db      	ldrh	r3, [r3, #6]
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	460b      	mov	r3, r1
 800120a:	4929      	ldr	r1, [pc, #164]	@ (80012b0 <setTimeMode+0xe0>)
 800120c:	4829      	ldr	r0, [pc, #164]	@ (80012b4 <setTimeMode+0xe4>)
 800120e:	f003 f993 	bl	8004538 <siprintf>

	LCD_Clear_Write(timetext, 0, 4);
 8001212:	2204      	movs	r2, #4
 8001214:	2100      	movs	r1, #0
 8001216:	4825      	ldr	r0, [pc, #148]	@ (80012ac <setTimeMode+0xdc>)
 8001218:	f000 fa98 	bl	800174c <LCD_Clear_Write>
	LCD_Clear_Write(datetext, 1, 3);
 800121c:	2203      	movs	r2, #3
 800121e:	2101      	movs	r1, #1
 8001220:	4824      	ldr	r0, [pc, #144]	@ (80012b4 <setTimeMode+0xe4>)
 8001222:	f000 fa93 	bl	800174c <LCD_Clear_Write>

	if (timeSetUpdate(&timeToSet,currentButton)){
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	4619      	mov	r1, r3
 800122a:	481e      	ldr	r0, [pc, #120]	@ (80012a4 <setTimeMode+0xd4>)
 800122c:	f7ff fdaa 	bl	8000d84 <timeSetUpdate>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d031      	beq.n	800129a <setTimeMode+0xca>
		SetTime(&timeToSet);
 8001236:	481b      	ldr	r0, [pc, #108]	@ (80012a4 <setTimeMode+0xd4>)
 8001238:	f000 f916 	bl	8001468 <SetTime>
		LCD_Clear_Write("Hora",0,6);
 800123c:	2206      	movs	r2, #6
 800123e:	2100      	movs	r1, #0
 8001240:	481d      	ldr	r0, [pc, #116]	@ (80012b8 <setTimeMode+0xe8>)
 8001242:	f000 fa83 	bl	800174c <LCD_Clear_Write>
		LCD_Clear_Write("actualizada.",1,2);
 8001246:	2202      	movs	r2, #2
 8001248:	2101      	movs	r1, #1
 800124a:	481c      	ldr	r0, [pc, #112]	@ (80012bc <setTimeMode+0xec>)
 800124c:	f000 fa7e 	bl	800174c <LCD_Clear_Write>
		I2CDelay(1000);
 8001250:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001254:	f000 fc0a 	bl	8001a6c <I2CDelay>

		char msg[20];
		int len = snprintf(msg, sizeof(msg), "Hora actualizada\r\n");	HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8001258:	f107 0308 	add.w	r3, r7, #8
 800125c:	4a18      	ldr	r2, [pc, #96]	@ (80012c0 <setTimeMode+0xf0>)
 800125e:	2114      	movs	r1, #20
 8001260:	4618      	mov	r0, r3
 8001262:	f003 f933 	bl	80044cc <sniprintf>
 8001266:	61f8      	str	r0, [r7, #28]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	b29a      	uxth	r2, r3
 800126c:	f107 0108 	add.w	r1, r7, #8
 8001270:	f04f 33ff 	mov.w	r3, #4294967295
 8001274:	4813      	ldr	r0, [pc, #76]	@ (80012c4 <setTimeMode+0xf4>)
 8001276:	f002 fd6d 	bl	8003d54 <HAL_UART_Transmit>

		app = SHOWTIME;
 800127a:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <setTimeMode+0xf8>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
		menu = SHOWTIME_M;
 8001280:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <setTimeMode+0xfc>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
		lastTime[64] = " "; //
 8001286:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <setTimeMode+0x100>)
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <setTimeMode+0x104>)
 800128c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		lastDate[64] = " "; //Porque la fecha queda guardada y si no
 8001290:	4b0f      	ldr	r3, [pc, #60]	@ (80012d0 <setTimeMode+0x100>)
 8001292:	b2da      	uxtb	r2, r3
 8001294:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <setTimeMode+0x108>)
 8001296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	}

}
 800129a:	bf00      	nop
 800129c:	3720      	adds	r7, #32
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200001d0 	.word	0x200001d0
 80012a8:	08004ec0 	.word	0x08004ec0
 80012ac:	20000108 	.word	0x20000108
 80012b0:	08004ed0 	.word	0x08004ed0
 80012b4:	200000c8 	.word	0x200000c8
 80012b8:	08004ee0 	.word	0x08004ee0
 80012bc:	08004ee8 	.word	0x08004ee8
 80012c0:	08004ef8 	.word	0x08004ef8
 80012c4:	20000078 	.word	0x20000078
 80012c8:	200000c4 	.word	0x200000c4
 80012cc:	200000c5 	.word	0x200000c5
 80012d0:	08004ea0 	.word	0x08004ea0
 80012d4:	20000148 	.word	0x20000148
 80012d8:	20000188 	.word	0x20000188

080012dc <setAlarmMode>:

static void setAlarmMode(uint16_t currentButton){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
	  LCD_Clear_Write("Por el momento",0,0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	4806      	ldr	r0, [pc, #24]	@ (8001304 <setAlarmMode+0x28>)
 80012ec:	f000 fa2e 	bl	800174c <LCD_Clear_Write>
	  LCD_Clear_Write("no disponible.",1,1);
 80012f0:	2201      	movs	r2, #1
 80012f2:	2101      	movs	r1, #1
 80012f4:	4804      	ldr	r0, [pc, #16]	@ (8001308 <setAlarmMode+0x2c>)
 80012f6:	f000 fa29 	bl	800174c <LCD_Clear_Write>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	08004f0c 	.word	0x08004f0c
 8001308:	08004f1c 	.word	0x08004f1c

0800130c <showOptions>:

static void showOptions(){
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	switch(menu){
 8001310:	4b17      	ldr	r3, [pc, #92]	@ (8001370 <showOptions+0x64>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d01c      	beq.n	8001352 <showOptions+0x46>
 8001318:	2b02      	cmp	r3, #2
 800131a:	dc25      	bgt.n	8001368 <showOptions+0x5c>
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <showOptions+0x1a>
 8001320:	2b01      	cmp	r3, #1
 8001322:	d00b      	beq.n	800133c <showOptions+0x30>
	case SETALARM_M:
		LCD_Clear_Write("3) Poner",0,4);
		LCD_Clear_Write("alarma",1,5);
		break;
	default:
		break;
 8001324:	e020      	b.n	8001368 <showOptions+0x5c>
		LCD_Clear_Write("1) Ver",0,5);
 8001326:	2205      	movs	r2, #5
 8001328:	2100      	movs	r1, #0
 800132a:	4812      	ldr	r0, [pc, #72]	@ (8001374 <showOptions+0x68>)
 800132c:	f000 fa0e 	bl	800174c <LCD_Clear_Write>
		LCD_Clear_Write("fecha y hora",1,2);
 8001330:	2202      	movs	r2, #2
 8001332:	2101      	movs	r1, #1
 8001334:	4810      	ldr	r0, [pc, #64]	@ (8001378 <showOptions+0x6c>)
 8001336:	f000 fa09 	bl	800174c <LCD_Clear_Write>
		break;
 800133a:	e016      	b.n	800136a <showOptions+0x5e>
		LCD_Clear_Write("2) Ajustar",0,2);
 800133c:	2202      	movs	r2, #2
 800133e:	2100      	movs	r1, #0
 8001340:	480e      	ldr	r0, [pc, #56]	@ (800137c <showOptions+0x70>)
 8001342:	f000 fa03 	bl	800174c <LCD_Clear_Write>
		LCD_Clear_Write("hora y fecha",1,2);
 8001346:	2202      	movs	r2, #2
 8001348:	2101      	movs	r1, #1
 800134a:	480d      	ldr	r0, [pc, #52]	@ (8001380 <showOptions+0x74>)
 800134c:	f000 f9fe 	bl	800174c <LCD_Clear_Write>
		break;
 8001350:	e00b      	b.n	800136a <showOptions+0x5e>
		LCD_Clear_Write("3) Poner",0,4);
 8001352:	2204      	movs	r2, #4
 8001354:	2100      	movs	r1, #0
 8001356:	480b      	ldr	r0, [pc, #44]	@ (8001384 <showOptions+0x78>)
 8001358:	f000 f9f8 	bl	800174c <LCD_Clear_Write>
		LCD_Clear_Write("alarma",1,5);
 800135c:	2205      	movs	r2, #5
 800135e:	2101      	movs	r1, #1
 8001360:	4809      	ldr	r0, [pc, #36]	@ (8001388 <showOptions+0x7c>)
 8001362:	f000 f9f3 	bl	800174c <LCD_Clear_Write>
		break;
 8001366:	e000      	b.n	800136a <showOptions+0x5e>
		break;
 8001368:	bf00      	nop
	}
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200000c5 	.word	0x200000c5
 8001374:	08004f2c 	.word	0x08004f2c
 8001378:	08004f34 	.word	0x08004f34
 800137c:	08004f44 	.word	0x08004f44
 8001380:	08004f50 	.word	0x08004f50
 8001384:	08004f60 	.word	0x08004f60
 8001388:	08004f6c 	.word	0x08004f6c

0800138c <buttonPressed>:

void buttonPressed(uint16_t GPIO_Pin){
 800138c:	b580      	push	{r7, lr}
 800138e:	b092      	sub	sp, #72	@ 0x48
 8001390:	af02      	add	r7, sp, #8
 8001392:	4603      	mov	r3, r0
 8001394:	80fb      	strh	r3, [r7, #6]
	char msg[50];
	int len = snprintf(msg, sizeof(msg), "GPIO_Pin: %u, Menu: %d, App: %d\r\n", GPIO_Pin, menu, app);	HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	4a0f      	ldr	r2, [pc, #60]	@ (80013d8 <buttonPressed+0x4c>)
 800139a:	7812      	ldrb	r2, [r2, #0]
 800139c:	4611      	mov	r1, r2
 800139e:	4a0f      	ldr	r2, [pc, #60]	@ (80013dc <buttonPressed+0x50>)
 80013a0:	7812      	ldrb	r2, [r2, #0]
 80013a2:	f107 0008 	add.w	r0, r7, #8
 80013a6:	9201      	str	r2, [sp, #4]
 80013a8:	9100      	str	r1, [sp, #0]
 80013aa:	4a0d      	ldr	r2, [pc, #52]	@ (80013e0 <buttonPressed+0x54>)
 80013ac:	2132      	movs	r1, #50	@ 0x32
 80013ae:	f003 f88d 	bl	80044cc <sniprintf>
 80013b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80013b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	f107 0108 	add.w	r1, r7, #8
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295
 80013c0:	4808      	ldr	r0, [pc, #32]	@ (80013e4 <buttonPressed+0x58>)
 80013c2:	f002 fcc7 	bl	8003d54 <HAL_UART_Transmit>
	addToQueue(GPIO_Pin);
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fb77 	bl	8000abc <addToQueue>
}
 80013ce:	bf00      	nop
 80013d0:	3740      	adds	r7, #64	@ 0x40
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200000c5 	.word	0x200000c5
 80013dc:	200000c4 	.word	0x200000c4
 80013e0:	08004f74 	.word	0x08004f74
 80013e4:	20000078 	.word	0x20000078

080013e8 <BcdToDec>:
 * @brief Includes the header file of this library.
 */
#include "ds3231.h"

/*Convert a BCD-encoded value to decimal. Declared in header file*/
uint8_t BcdToDec(uint8_t val) {
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
    return ((val >> NIBBLE_SIZE) * 10) + (val & LOW_NIBBLE_MASK);
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	091b      	lsrs	r3, r3, #4
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	461a      	mov	r2, r3
 80013fa:	0092      	lsls	r2, r2, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	b2da      	uxtb	r2, r3
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	f003 030f 	and.w	r3, r3, #15
 8001408:	b2db      	uxtb	r3, r3
 800140a:	4413      	add	r3, r2
 800140c:	b2db      	uxtb	r3, r3
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <DecToBcd>:

/*Convert a decimal value to BCD-encoded. Declared in header file*/
uint8_t DecToBcd(uint8_t val) {
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
    return ((val / 10) << NIBBLE_SIZE) | (val % 10);
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	4a0e      	ldr	r2, [pc, #56]	@ (8001464 <DecToBcd+0x48>)
 800142a:	fba2 2303 	umull	r2, r3, r2, r3
 800142e:	08db      	lsrs	r3, r3, #3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	b25b      	sxtb	r3, r3
 8001434:	011b      	lsls	r3, r3, #4
 8001436:	b258      	sxtb	r0, r3
 8001438:	79fa      	ldrb	r2, [r7, #7]
 800143a:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <DecToBcd+0x48>)
 800143c:	fba3 1302 	umull	r1, r3, r3, r2
 8001440:	08d9      	lsrs	r1, r3, #3
 8001442:	460b      	mov	r3, r1
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	440b      	add	r3, r1
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	b2db      	uxtb	r3, r3
 800144e:	b25b      	sxtb	r3, r3
 8001450:	4303      	orrs	r3, r0
 8001452:	b25b      	sxtb	r3, r3
 8001454:	b2db      	uxtb	r3, r3
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	cccccccd 	.word	0xcccccccd

08001468 <SetTime>:

/*Sets the time of the DS3231 RTC. Declared in header file*/
void SetTime(DS3231_DateTime *time) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
    uint8_t buffer[BUFFER_SIZE];

    buffer[0] = START_REGISTER;
 8001470:	2300      	movs	r3, #0
 8001472:	723b      	strb	r3, [r7, #8]
    buffer[1] = DecToBcd(time->Seconds) & 0x7F;   // limpiar CH
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ffcf 	bl	800141c <DecToBcd>
 800147e:	4603      	mov	r3, r0
 8001480:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001484:	b2db      	uxtb	r3, r3
 8001486:	727b      	strb	r3, [r7, #9]
    buffer[2] = DecToBcd(time->Minutes);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	785b      	ldrb	r3, [r3, #1]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ffc5 	bl	800141c <DecToBcd>
 8001492:	4603      	mov	r3, r0
 8001494:	72bb      	strb	r3, [r7, #10]
    buffer[3] = DecToBcd(time->Hours) & MODE24_MASK;     // 24h mode
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	789b      	ldrb	r3, [r3, #2]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ffbe 	bl	800141c <DecToBcd>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	72fb      	strb	r3, [r7, #11]
    buffer[4] = DecToBcd(time->Day);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	78db      	ldrb	r3, [r3, #3]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ffb4 	bl	800141c <DecToBcd>
 80014b4:	4603      	mov	r3, r0
 80014b6:	733b      	strb	r3, [r7, #12]
    buffer[5] = DecToBcd(time->Date);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	791b      	ldrb	r3, [r3, #4]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ffad 	bl	800141c <DecToBcd>
 80014c2:	4603      	mov	r3, r0
 80014c4:	737b      	strb	r3, [r7, #13]
    buffer[6] = DecToBcd(time->Month) & CENTURY_MASK;     // descartar century
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	795b      	ldrb	r3, [r3, #5]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ffa6 	bl	800141c <DecToBcd>
 80014d0:	4603      	mov	r3, r0
 80014d2:	f003 031f 	and.w	r3, r3, #31
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	73bb      	strb	r3, [r7, #14]
    buffer[7] = DecToBcd(time->Year - YEAR_CORRECTION);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	88db      	ldrh	r3, [r3, #6]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	3330      	adds	r3, #48	@ 0x30
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff99 	bl	800141c <DecToBcd>
 80014ea:	4603      	mov	r3, r0
 80014ec:	73fb      	strb	r3, [r7, #15]

    I2CMasterTransmit(DS3231_ADDR, buffer, BUFFER_SIZE);
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	2208      	movs	r2, #8
 80014f4:	4619      	mov	r1, r3
 80014f6:	20d0      	movs	r0, #208	@ 0xd0
 80014f8:	f000 fac4 	bl	8001a84 <I2CMasterTransmit>
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <GetTime>:

/*Gets the time from the DS3231 RTC. Declared in header file*/
void GetTime(DS3231_DateTime *time) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
    uint8_t buffer[BUFFER_SIZE-1];
    I2CReadMemory(START_REGISTER,DS3231_ADDR,buffer,BUFFER_SIZE-1);
 800150c:	f107 0208 	add.w	r2, r7, #8
 8001510:	2307      	movs	r3, #7
 8001512:	21d0      	movs	r1, #208	@ 0xd0
 8001514:	2000      	movs	r0, #0
 8001516:	f000 facd 	bl	8001ab4 <I2CReadMemory>

    time->Seconds = BcdToDec(buffer[0]);
 800151a:	7a3b      	ldrb	r3, [r7, #8]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff63 	bl	80013e8 <BcdToDec>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	701a      	strb	r2, [r3, #0]
    time->Minutes = BcdToDec(buffer[1]);
 800152a:	7a7b      	ldrb	r3, [r7, #9]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff5b 	bl	80013e8 <BcdToDec>
 8001532:	4603      	mov	r3, r0
 8001534:	461a      	mov	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	705a      	strb	r2, [r3, #1]
    time->Hours   = BcdToDec(buffer[2] & MODE24_MASK);
 800153a:	7abb      	ldrb	r3, [r7, #10]
 800153c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001540:	b2db      	uxtb	r3, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff ff50 	bl	80013e8 <BcdToDec>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	709a      	strb	r2, [r3, #2]
    time->Day     = BcdToDec(buffer[3]);
 8001550:	7afb      	ldrb	r3, [r7, #11]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff48 	bl	80013e8 <BcdToDec>
 8001558:	4603      	mov	r3, r0
 800155a:	461a      	mov	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	70da      	strb	r2, [r3, #3]
    time->Date    = BcdToDec(buffer[4]);
 8001560:	7b3b      	ldrb	r3, [r7, #12]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ff40 	bl	80013e8 <BcdToDec>
 8001568:	4603      	mov	r3, r0
 800156a:	461a      	mov	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	711a      	strb	r2, [r3, #4]
    time->Month   = BcdToDec(buffer[5] & CENTURY_MASK);
 8001570:	7b7b      	ldrb	r3, [r7, #13]
 8001572:	f003 031f 	and.w	r3, r3, #31
 8001576:	b2db      	uxtb	r3, r3
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff35 	bl	80013e8 <BcdToDec>
 800157e:	4603      	mov	r3, r0
 8001580:	461a      	mov	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	715a      	strb	r2, [r3, #5]
    time->Year    = YEAR_CORRECTION + BcdToDec(buffer[6]);
 8001586:	7bbb      	ldrb	r3, [r7, #14]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff2d 	bl	80013e8 <BcdToDec>
 800158e:	4603      	mov	r3, r0
 8001590:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001594:	b29a      	uxth	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	80da      	strh	r2, [r3, #6]
}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <CopyTime>:

void CopyTime(DS3231_DateTime *timeToCopy, DS3231_DateTime *timeToPaste){
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	6039      	str	r1, [r7, #0]
	timeToPaste->Seconds = timeToCopy->Seconds;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	781a      	ldrb	r2, [r3, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	701a      	strb	r2, [r3, #0]
	timeToPaste->Minutes = timeToCopy->Minutes;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	785a      	ldrb	r2, [r3, #1]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	705a      	strb	r2, [r3, #1]
	timeToPaste->Hours = timeToCopy->Hours;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	789a      	ldrb	r2, [r3, #2]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	709a      	strb	r2, [r3, #2]
	timeToPaste->Day = timeToCopy->Day;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	78da      	ldrb	r2, [r3, #3]
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	70da      	strb	r2, [r3, #3]
	timeToPaste->Date = timeToCopy->Date;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	791a      	ldrb	r2, [r3, #4]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	711a      	strb	r2, [r3, #4]
	timeToPaste->Month = timeToCopy->Month;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	795a      	ldrb	r2, [r3, #5]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	715a      	strb	r2, [r3, #5]
	timeToPaste->Year = timeToCopy->Year;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	88da      	ldrh	r2, [r3, #6]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	80da      	strh	r2, [r3, #6]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <LCD_I2C_Send>:
 * @brief Includes the header file of this library.
 */
#include "lcd_i2c.h"

/*Send one 8-bit byte to the display. Declared in header file*/
void LCD_I2C_Send(uint8_t data, uint8_t rs) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	460a      	mov	r2, r1
 80015fa:	71fb      	strb	r3, [r7, #7]
 80015fc:	4613      	mov	r3, r2
 80015fe:	71bb      	strb	r3, [r7, #6]
    uint8_t data_u, data_l;
    uint8_t data_t[BYTES_PER_BYTE];
    data_u = (data&HIGH_NIBBLE_MASK)|rs|BL; /* masking the upper nibble and adding the control command */
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	f023 030f 	bic.w	r3, r3, #15
 8001608:	b25a      	sxtb	r2, r3
 800160a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800160e:	4313      	orrs	r3, r2
 8001610:	b25b      	sxtb	r3, r3
 8001612:	f043 0308 	orr.w	r3, r3, #8
 8001616:	b25b      	sxtb	r3, r3
 8001618:	73fb      	strb	r3, [r7, #15]
    data_l = ((data<<4)&HIGH_NIBBLE_MASK)|rs|BL;  /* masking the lower nibble and adding the control command */
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	b25a      	sxtb	r2, r3
 8001622:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001626:	4313      	orrs	r3, r2
 8001628:	b25b      	sxtb	r3, r3
 800162a:	f043 0308 	orr.w	r3, r3, #8
 800162e:	b25b      	sxtb	r3, r3
 8001630:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u|EN;  /* include the Enable pulse */
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	f043 0304 	orr.w	r3, r3, #4
 8001638:	b2db      	uxtb	r3, r3
 800163a:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u & ~EN;  /* Turn off the Enable pulse */
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	f023 0304 	bic.w	r3, r3, #4
 8001642:	b2db      	uxtb	r3, r3
 8001644:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l|EN;  /* include the Enable pulse */
 8001646:	7bbb      	ldrb	r3, [r7, #14]
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	b2db      	uxtb	r3, r3
 800164e:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l & ~EN;  /* Turn off the Enable pulse */
 8001650:	7bbb      	ldrb	r3, [r7, #14]
 8001652:	f023 0304 	bic.w	r3, r3, #4
 8001656:	b2db      	uxtb	r3, r3
 8001658:	72fb      	strb	r3, [r7, #11]
    I2CMasterTransmit(LCD_ADDR, data_t, BYTES_PER_BYTE);
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	2204      	movs	r2, #4
 8001660:	4619      	mov	r1, r3
 8001662:	204e      	movs	r0, #78	@ 0x4e
 8001664:	f000 fa0e 	bl	8001a84 <I2CMasterTransmit>
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <LCD_I2C_SendControlByte>:

/*Send one 8-bit instruction byte to the display. Declared in header file*/
void LCD_I2C_SendControlByte(uint8_t data) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
    LCD_I2C_Send(data,0);
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ffb6 	bl	80015f0 <LCD_I2C_Send>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <LCD_I2C_Init>:

/*Initializes the LCD. Declared in header file*/
void LCD_I2C_Init() {
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
    I2CDelay(50);  // Wait for power-up (adjust if needed)
 8001690:	2032      	movs	r0, #50	@ 0x32
 8001692:	f000 f9eb 	bl	8001a6c <I2CDelay>

    // Initialization sequence (adapted for 4-bit mode)
    LCD_I2C_SendControlByte(0x30);  // Function set: 8-bit mode (initialization)
 8001696:	2030      	movs	r0, #48	@ 0x30
 8001698:	f7ff ffea 	bl	8001670 <LCD_I2C_SendControlByte>
    I2CDelay(5);
 800169c:	2005      	movs	r0, #5
 800169e:	f000 f9e5 	bl	8001a6c <I2CDelay>
    LCD_I2C_SendControlByte(0x30);  // Function set: 8-bit mode (initialization)
 80016a2:	2030      	movs	r0, #48	@ 0x30
 80016a4:	f7ff ffe4 	bl	8001670 <LCD_I2C_SendControlByte>
    I2CDelay(5);
 80016a8:	2005      	movs	r0, #5
 80016aa:	f000 f9df 	bl	8001a6c <I2CDelay>
    LCD_I2C_SendControlByte(0x30);  // Function set: 8-bit mode (initialization)
 80016ae:	2030      	movs	r0, #48	@ 0x30
 80016b0:	f7ff ffde 	bl	8001670 <LCD_I2C_SendControlByte>
    I2CDelay(5);
 80016b4:	2005      	movs	r0, #5
 80016b6:	f000 f9d9 	bl	8001a6c <I2CDelay>

    LCD_I2C_SendControlByte(0x20);  // Function set: 4-bit mode
 80016ba:	2020      	movs	r0, #32
 80016bc:	f7ff ffd8 	bl	8001670 <LCD_I2C_SendControlByte>
    I2CDelay(1);
 80016c0:	2001      	movs	r0, #1
 80016c2:	f000 f9d3 	bl	8001a6c <I2CDelay>

    LCD_I2C_SendControlByte(0x20);  // Function set: 4-bit, 2 lines, 5x8 font
 80016c6:	2020      	movs	r0, #32
 80016c8:	f7ff ffd2 	bl	8001670 <LCD_I2C_SendControlByte>
    LCD_I2C_SendControlByte(0x80);
 80016cc:	2080      	movs	r0, #128	@ 0x80
 80016ce:	f7ff ffcf 	bl	8001670 <LCD_I2C_SendControlByte>
    I2CDelay(1);
 80016d2:	2001      	movs	r0, #1
 80016d4:	f000 f9ca 	bl	8001a6c <I2CDelay>

    LCD_I2C_SendControlByte(0x00);  // Display control: Display off, Cursor off, Blink off
 80016d8:	2000      	movs	r0, #0
 80016da:	f7ff ffc9 	bl	8001670 <LCD_I2C_SendControlByte>
    LCD_I2C_SendControlByte(0xF0);
 80016de:	20f0      	movs	r0, #240	@ 0xf0
 80016e0:	f7ff ffc6 	bl	8001670 <LCD_I2C_SendControlByte>
    I2CDelay(1);
 80016e4:	2001      	movs	r0, #1
 80016e6:	f000 f9c1 	bl	8001a6c <I2CDelay>

    LCD_I2C_SendControlByte(0x00);  // Entry mode set: Increment, no shift
 80016ea:	2000      	movs	r0, #0
 80016ec:	f7ff ffc0 	bl	8001670 <LCD_I2C_SendControlByte>
    LCD_I2C_SendControlByte(0x60);
 80016f0:	2060      	movs	r0, #96	@ 0x60
 80016f2:	f7ff ffbd 	bl	8001670 <LCD_I2C_SendControlByte>
    I2CDelay(1);
 80016f6:	2001      	movs	r0, #1
 80016f8:	f000 f9b8 	bl	8001a6c <I2CDelay>

    LCD_I2C_Clear(); // Clear the display
 80016fc:	f000 f802 	bl	8001704 <LCD_I2C_Clear>
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}

08001704 <LCD_I2C_Clear>:

/*Clears the display. Declared in header file*/
void LCD_I2C_Clear() {
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
    LCD_I2C_SendControlByte(0x00); // Clear display command
 8001708:	2000      	movs	r0, #0
 800170a:	f7ff ffb1 	bl	8001670 <LCD_I2C_SendControlByte>
    //LCD_I2C_SendControlByte(0x10);
    LCD_I2C_SendControlByte(0x01);
 800170e:	2001      	movs	r0, #1
 8001710:	f7ff ffae 	bl	8001670 <LCD_I2C_SendControlByte>
    I2CDelay(2);
 8001714:	2002      	movs	r0, #2
 8001716:	f000 f9a9 	bl	8001a6c <I2CDelay>
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}

0800171e <LCD_I2C_WriteString>:

/*Writes a string in the display. Declared in header file*/
void LCD_I2C_WriteString(char *str) {
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001726:	e008      	b.n	800173a <LCD_I2C_WriteString+0x1c>
        LCD_I2C_Send(*str, RS);  // Send character with RS=1 (data)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2101      	movs	r1, #1
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ff5e 	bl	80015f0 <LCD_I2C_Send>
        str++;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3301      	adds	r3, #1
 8001738:	607b      	str	r3, [r7, #4]
    while (*str) {
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f2      	bne.n	8001728 <LCD_I2C_WriteString+0xa>
    }
}
 8001742:	bf00      	nop
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <LCD_Clear_Write>:

void LCD_Clear_Write(char *str,uint8_t row, uint8_t col){
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	70fb      	strb	r3, [r7, #3]
 8001758:	4613      	mov	r3, r2
 800175a:	70bb      	strb	r3, [r7, #2]
	LCD_I2C_SetCursor(row, 0);
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f000 f81f 	bl	80017a4 <LCD_I2C_SetCursor>
	I2CDelay(2);
 8001766:	2002      	movs	r0, #2
 8001768:	f000 f980 	bl	8001a6c <I2CDelay>
	LCD_I2C_WriteString("                ");
 800176c:	480c      	ldr	r0, [pc, #48]	@ (80017a0 <LCD_Clear_Write+0x54>)
 800176e:	f7ff ffd6 	bl	800171e <LCD_I2C_WriteString>
	I2CDelay(2);
 8001772:	2002      	movs	r0, #2
 8001774:	f000 f97a 	bl	8001a6c <I2CDelay>
	LCD_I2C_SetCursor(row,col);
 8001778:	78ba      	ldrb	r2, [r7, #2]
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f000 f810 	bl	80017a4 <LCD_I2C_SetCursor>
	I2CDelay(2);
 8001784:	2002      	movs	r0, #2
 8001786:	f000 f971 	bl	8001a6c <I2CDelay>
	LCD_I2C_WriteString(str);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ffc7 	bl	800171e <LCD_I2C_WriteString>
	I2CDelay(2);
 8001790:	2002      	movs	r0, #2
 8001792:	f000 f96b 	bl	8001a6c <I2CDelay>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	08004f98 	.word	0x08004f98

080017a4 <LCD_I2C_SetCursor>:

/*Sets the cursor. Declared in header file*/
void LCD_I2C_SetCursor(uint8_t row, uint8_t col) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	460a      	mov	r2, r1
 80017ae:	71fb      	strb	r3, [r7, #7]
 80017b0:	4613      	mov	r3, r2
 80017b2:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    if (row == 0) {
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d102      	bne.n	80017c0 <LCD_I2C_SetCursor+0x1c>
        address = 0x00 + col;
 80017ba:	79bb      	ldrb	r3, [r7, #6]
 80017bc:	73fb      	strb	r3, [r7, #15]
 80017be:	e002      	b.n	80017c6 <LCD_I2C_SetCursor+0x22>
    } else {
        address = 0x40 + col;
 80017c0:	79bb      	ldrb	r3, [r7, #6]
 80017c2:	3340      	adds	r3, #64	@ 0x40
 80017c4:	73fb      	strb	r3, [r7, #15]
    }
    LCD_I2C_SendControlByte(0x80|(address)); // Set DDRAM address command
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ff4e 	bl	8001670 <LCD_I2C_SendControlByte>
}
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <buttonReset>:
static buttonDebounce buttons[NUMBER_OF_BUTTONS];
static tick_t pos = 0;

static void buttonReset(tick_t buttonNumber);

static void buttonReset(tick_t buttonNumber){
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	buttons[buttonNumber].pressed = false;
 80017e4:	4a09      	ldr	r2, [pc, #36]	@ (800180c <buttonReset+0x30>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	011b      	lsls	r3, r3, #4
 80017ea:	4413      	add	r3, r2
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
	delayInit(&(buttons[buttonNumber].delay),DELAY);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	011b      	lsls	r3, r3, #4
 80017f4:	4a05      	ldr	r2, [pc, #20]	@ (800180c <buttonReset+0x30>)
 80017f6:	4413      	add	r3, r2
 80017f8:	3304      	adds	r3, #4
 80017fa:	2128      	movs	r1, #40	@ 0x28
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff f926 	bl	8000a4e <delayInit>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200002a8 	.word	0x200002a8

08001810 <buttonsReset>:

static void buttonsReset(void){
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
	for (tick_t i = 0;i<NUMBER_OF_BUTTONS;i++){
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	e005      	b.n	8001828 <buttonsReset+0x18>
		buttonReset(i);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ffdd 	bl	80017dc <buttonReset>
	for (tick_t i = 0;i<NUMBER_OF_BUTTONS;i++){
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3301      	adds	r3, #1
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b03      	cmp	r3, #3
 800182c:	d9f6      	bls.n	800181c <buttonsReset+0xc>
	}
}
 800182e:	bf00      	nop
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <buttonsInit>:



void buttonsInit(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	@ 0x28
 800183c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	4b29      	ldr	r3, [pc, #164]	@ (80018f8 <buttonsInit+0xc0>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	4a28      	ldr	r2, [pc, #160]	@ (80018f8 <buttonsInit+0xc0>)
 8001858:	f043 0304 	orr.w	r3, r3, #4
 800185c:	6313      	str	r3, [r2, #48]	@ 0x30
 800185e:	4b26      	ldr	r3, [pc, #152]	@ (80018f8 <buttonsInit+0xc0>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	4b22      	ldr	r3, [pc, #136]	@ (80018f8 <buttonsInit+0xc0>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	4a21      	ldr	r2, [pc, #132]	@ (80018f8 <buttonsInit+0xc0>)
 8001874:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001878:	6313      	str	r3, [r2, #48]	@ 0x30
 800187a:	4b1f      	ldr	r3, [pc, #124]	@ (80018f8 <buttonsInit+0xc0>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <buttonsInit+0xc0>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	4a1a      	ldr	r2, [pc, #104]	@ (80018f8 <buttonsInit+0xc0>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6313      	str	r3, [r2, #48]	@ 0x30
 8001896:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <buttonsInit+0xc0>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	4b14      	ldr	r3, [pc, #80]	@ (80018f8 <buttonsInit+0xc0>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	4a13      	ldr	r2, [pc, #76]	@ (80018f8 <buttonsInit+0xc0>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b2:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <buttonsInit+0xc0>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : Right_Pin Menu_Pin Left_Pin Enter_Pin */
  GPIO_InitStruct.Pin = Right_Pin|Menu_Pin|Left_Pin|Enter_Pin;
 80018be:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80018c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018c4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ca:	2301      	movs	r3, #1
 80018cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	4809      	ldr	r0, [pc, #36]	@ (80018fc <buttonsInit+0xc4>)
 80018d6:	f000 fab3 	bl	8001e40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	2017      	movs	r0, #23
 80018e0:	f000 fa77 	bl	8001dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018e4:	2017      	movs	r0, #23
 80018e6:	f000 fa90 	bl	8001e0a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  buttonsReset();
 80018ea:	f7ff ff91 	bl	8001810 <buttonsReset>
  /* USER CODE END MX_GPIO_Init_2 */
}
 80018ee:	bf00      	nop
 80018f0:	3728      	adds	r7, #40	@ 0x28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020000 	.word	0x40020000

08001900 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	80fb      	strh	r3, [r7, #6]
    // Map GPIO_Pin to index
    if (GPIO_Pin == GPIO_PIN_6) pos = 0;
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	2b40      	cmp	r3, #64	@ 0x40
 800190e:	d103      	bne.n	8001918 <HAL_GPIO_EXTI_Callback+0x18>
 8001910:	4b2b      	ldr	r3, [pc, #172]	@ (80019c0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	e015      	b.n	8001944 <HAL_GPIO_EXTI_Callback+0x44>
    else if (GPIO_Pin == GPIO_PIN_7) pos = 1;
 8001918:	88fb      	ldrh	r3, [r7, #6]
 800191a:	2b80      	cmp	r3, #128	@ 0x80
 800191c:	d103      	bne.n	8001926 <HAL_GPIO_EXTI_Callback+0x26>
 800191e:	4b28      	ldr	r3, [pc, #160]	@ (80019c0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	e00e      	b.n	8001944 <HAL_GPIO_EXTI_Callback+0x44>
    else if (GPIO_Pin == GPIO_PIN_8) pos = 2;
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800192c:	d103      	bne.n	8001936 <HAL_GPIO_EXTI_Callback+0x36>
 800192e:	4b24      	ldr	r3, [pc, #144]	@ (80019c0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001930:	2202      	movs	r2, #2
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	e006      	b.n	8001944 <HAL_GPIO_EXTI_Callback+0x44>
    else if (GPIO_Pin == GPIO_PIN_9) pos = 3;
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800193c:	d13c      	bne.n	80019b8 <HAL_GPIO_EXTI_Callback+0xb8>
 800193e:	4b20      	ldr	r3, [pc, #128]	@ (80019c0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001940:	2203      	movs	r2, #3
 8001942:	601a      	str	r2, [r3, #0]
    else return; // Not one of our buttons

    // If button not already marked as pressed, start debounce timer
    if (!buttons[pos].pressed) {
 8001944:	4b1e      	ldr	r3, [pc, #120]	@ (80019c0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a1e      	ldr	r2, [pc, #120]	@ (80019c4 <HAL_GPIO_EXTI_Callback+0xc4>)
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	4413      	add	r3, r2
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	f083 0301 	eor.w	r3, r3, #1
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d010      	beq.n	800197c <HAL_GPIO_EXTI_Callback+0x7c>
        buttons[pos].pressed = true; // Prevent re-triggering
 800195a:	4b19      	ldr	r3, [pc, #100]	@ (80019c0 <HAL_GPIO_EXTI_Callback+0xc0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a19      	ldr	r2, [pc, #100]	@ (80019c4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	4413      	add	r3, r2
 8001964:	2201      	movs	r2, #1
 8001966:	701a      	strb	r2, [r3, #0]
        delayRead(&(buttons[pos].delay)); // Start 20-50ms debounce timer
 8001968:	4b15      	ldr	r3, [pc, #84]	@ (80019c0 <HAL_GPIO_EXTI_Callback+0xc0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	4a15      	ldr	r2, [pc, #84]	@ (80019c4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001970:	4413      	add	r3, r2
 8001972:	3304      	adds	r3, #4
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff f87b 	bl	8000a70 <delayRead>
        return; // Wait for debounce to expire
 800197a:	e01e      	b.n	80019ba <HAL_GPIO_EXTI_Callback+0xba>
    }

    // When the callback fires again, check if debounce time elapsed
    if (delayRead(&(buttons[pos].delay))) {
 800197c:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <HAL_GPIO_EXTI_Callback+0xc0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	4a10      	ldr	r2, [pc, #64]	@ (80019c4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001984:	4413      	add	r3, r2
 8001986:	3304      	adds	r3, #4
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff f871 	bl	8000a70 <delayRead>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d012      	beq.n	80019ba <HAL_GPIO_EXTI_Callback+0xba>
        // Example: assuming all on GPIOA
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET) {
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	4619      	mov	r1, r3
 8001998:	480b      	ldr	r0, [pc, #44]	@ (80019c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 800199a:	f000 fbe5 	bl	8002168 <HAL_GPIO_ReadPin>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d103      	bne.n	80019ac <HAL_GPIO_EXTI_Callback+0xac>
            buttonPressed(GPIO_Pin); // Confirmed button press
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fcf0 	bl	800138c <buttonPressed>
        }

        // Reset for next event
        buttonReset(pos);
 80019ac:	4b04      	ldr	r3, [pc, #16]	@ (80019c0 <HAL_GPIO_EXTI_Callback+0xc0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff13 	bl	80017dc <buttonReset>
 80019b6:	e000      	b.n	80019ba <HAL_GPIO_EXTI_Callback+0xba>
    else return; // Not one of our buttons
 80019b8:	bf00      	nop
    }
}
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	200002e8 	.word	0x200002e8
 80019c4:	200002a8 	.word	0x200002a8
 80019c8:	40020000 	.word	0x40020000

080019cc <I2CInit>:

/* Declaration of the I2C external handle. Declared in the main */
I2C_HandleTypeDef hi2c1;

/*Initialize the I2C protocol handle. Declared in header file*/
void I2CInit(){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0

  __HAL_RCC_I2C1_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	4b21      	ldr	r3, [pc, #132]	@ (8001a5c <I2CInit+0x90>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	4a20      	ldr	r2, [pc, #128]	@ (8001a5c <I2CInit+0x90>)
 80019dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a5c <I2CInit+0x90>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	603b      	str	r3, [r7, #0]
 80019f2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a5c <I2CInit+0x90>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	4a19      	ldr	r2, [pc, #100]	@ (8001a5c <I2CInit+0x90>)
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fe:	4b17      	ldr	r3, [pc, #92]	@ (8001a5c <I2CInit+0x90>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]
  hi2c1.Instance = I2C1;
 8001a0a:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <I2CInit+0x94>)
 8001a0c:	4a15      	ldr	r2, [pc, #84]	@ (8001a64 <I2CInit+0x98>)
 8001a0e:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a10:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <I2CInit+0x94>)
 8001a12:	4a15      	ldr	r2, [pc, #84]	@ (8001a68 <I2CInit+0x9c>)
 8001a14:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a16:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <I2CInit+0x94>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a1c:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <I2CInit+0x94>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a22:	4b0f      	ldr	r3, [pc, #60]	@ (8001a60 <I2CInit+0x94>)
 8001a24:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <I2CInit+0x94>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a30:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <I2CInit+0x94>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a36:	4b0a      	ldr	r3, [pc, #40]	@ (8001a60 <I2CInit+0x94>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a3c:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <I2CInit+0x94>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a42:	4807      	ldr	r0, [pc, #28]	@ (8001a60 <I2CInit+0x94>)
 8001a44:	f000 fbc0 	bl	80021c8 <HAL_I2C_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <I2CInit+0x86>
  {
    Error_Handler();
 8001a4e:	f7fe fe81 	bl	8000754 <Error_Handler>
  }
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	200002ec 	.word	0x200002ec
 8001a64:	40005400 	.word	0x40005400
 8001a68:	000186a0 	.word	0x000186a0

08001a6c <I2CDelay>:

/*Delays the app for delayTime miliseconds. Declared in header file*/
void I2CDelay(uint32_t delayTime){
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	HAL_Delay(delayTime);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 f8ad 	bl	8001bd4 <HAL_Delay>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <I2CMasterTransmit>:

/*Writes the data buffer to the slave. Declared in header file*/
void I2CMasterTransmit(uint16_t devAddr, uint8_t *buffer, uint16_t size){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af02      	add	r7, sp, #8
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	80fb      	strh	r3, [r7, #6]
 8001a90:	4613      	mov	r3, r2
 8001a92:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, devAddr, buffer, size, TIMEOUT);
 8001a94:	88bb      	ldrh	r3, [r7, #4]
 8001a96:	88f9      	ldrh	r1, [r7, #6]
 8001a98:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9c:	9200      	str	r2, [sp, #0]
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	4803      	ldr	r0, [pc, #12]	@ (8001ab0 <I2CMasterTransmit+0x2c>)
 8001aa2:	f000 fcd5 	bl	8002450 <HAL_I2C_Master_Transmit>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200002ec 	.word	0x200002ec

08001ab4 <I2CReadMemory>:

/*Reads specific memory registers from a given IC. Declared in header file*/
void I2CReadMemory(uint16_t startReg, uint16_t devAddr, uint8_t *buffer, uint16_t size){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af04      	add	r7, sp, #16
 8001aba:	60ba      	str	r2, [r7, #8]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4603      	mov	r3, r0
 8001ac0:	81fb      	strh	r3, [r7, #14]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	81bb      	strh	r3, [r7, #12]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, devAddr, startReg, REG_SIZE, buffer, size, TIMEOUT);
 8001aca:	89fa      	ldrh	r2, [r7, #14]
 8001acc:	89b9      	ldrh	r1, [r7, #12]
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	9302      	str	r3, [sp, #8]
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2301      	movs	r3, #1
 8001ade:	4803      	ldr	r0, [pc, #12]	@ (8001aec <I2CReadMemory+0x38>)
 8001ae0:	f000 fdb4 	bl	800264c <HAL_I2C_Mem_Read>
}
 8001ae4:	bf00      	nop
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	200002ec 	.word	0x200002ec

08001af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001af4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b30 <HAL_Init+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b30 <HAL_Init+0x40>)
 8001afa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001afe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b00:	4b0b      	ldr	r3, [pc, #44]	@ (8001b30 <HAL_Init+0x40>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0a      	ldr	r2, [pc, #40]	@ (8001b30 <HAL_Init+0x40>)
 8001b06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b0c:	4b08      	ldr	r3, [pc, #32]	@ (8001b30 <HAL_Init+0x40>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a07      	ldr	r2, [pc, #28]	@ (8001b30 <HAL_Init+0x40>)
 8001b12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b18:	2003      	movs	r0, #3
 8001b1a:	f000 f94f 	bl	8001dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b1e:	200f      	movs	r0, #15
 8001b20:	f000 f808 	bl	8001b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b24:	f7fe fe1c 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023c00 	.word	0x40023c00

08001b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b3c:	4b12      	ldr	r3, [pc, #72]	@ (8001b88 <HAL_InitTick+0x54>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <HAL_InitTick+0x58>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	4619      	mov	r1, r3
 8001b46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 f967 	bl	8001e26 <HAL_SYSTICK_Config>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e00e      	b.n	8001b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b0f      	cmp	r3, #15
 8001b66:	d80a      	bhi.n	8001b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b70:	f000 f92f 	bl	8001dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b74:	4a06      	ldr	r2, [pc, #24]	@ (8001b90 <HAL_InitTick+0x5c>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e000      	b.n	8001b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	20000008 	.word	0x20000008
 8001b90:	20000004 	.word	0x20000004

08001b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b98:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <HAL_IncTick+0x20>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <HAL_IncTick+0x24>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a04      	ldr	r2, [pc, #16]	@ (8001bb8 <HAL_IncTick+0x24>)
 8001ba6:	6013      	str	r3, [r2, #0]
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000008 	.word	0x20000008
 8001bb8:	20000340 	.word	0x20000340

08001bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc0:	4b03      	ldr	r3, [pc, #12]	@ (8001bd0 <HAL_GetTick+0x14>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000340 	.word	0x20000340

08001bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bdc:	f7ff ffee 	bl	8001bbc <HAL_GetTick>
 8001be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bec:	d005      	beq.n	8001bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bee:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <HAL_Delay+0x44>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bfa:	bf00      	nop
 8001bfc:	f7ff ffde 	bl	8001bbc <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d8f7      	bhi.n	8001bfc <HAL_Delay+0x28>
  {
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000008 	.word	0x20000008

08001c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4e:	4a04      	ldr	r2, [pc, #16]	@ (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	60d3      	str	r3, [r2, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c68:	4b04      	ldr	r3, [pc, #16]	@ (8001c7c <__NVIC_GetPriorityGrouping+0x18>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	f003 0307 	and.w	r3, r3, #7
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	db0b      	blt.n	8001caa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	f003 021f 	and.w	r2, r3, #31
 8001c98:	4907      	ldr	r1, [pc, #28]	@ (8001cb8 <__NVIC_EnableIRQ+0x38>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000e100 	.word	0xe000e100

08001cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6039      	str	r1, [r7, #0]
 8001cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	db0a      	blt.n	8001ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	490c      	ldr	r1, [pc, #48]	@ (8001d08 <__NVIC_SetPriority+0x4c>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	0112      	lsls	r2, r2, #4
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	440b      	add	r3, r1
 8001ce0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce4:	e00a      	b.n	8001cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4908      	ldr	r1, [pc, #32]	@ (8001d0c <__NVIC_SetPriority+0x50>)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	3b04      	subs	r3, #4
 8001cf4:	0112      	lsls	r2, r2, #4
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	761a      	strb	r2, [r3, #24]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000e100 	.word	0xe000e100
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	@ 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f1c3 0307 	rsb	r3, r3, #7
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	bf28      	it	cs
 8001d2e:	2304      	movcs	r3, #4
 8001d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3304      	adds	r3, #4
 8001d36:	2b06      	cmp	r3, #6
 8001d38:	d902      	bls.n	8001d40 <NVIC_EncodePriority+0x30>
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3b03      	subs	r3, #3
 8001d3e:	e000      	b.n	8001d42 <NVIC_EncodePriority+0x32>
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	401a      	ands	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d58:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	43d9      	mvns	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	4313      	orrs	r3, r2
         );
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3724      	adds	r7, #36	@ 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d88:	d301      	bcc.n	8001d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e00f      	b.n	8001dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001db8 <SysTick_Config+0x40>)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d96:	210f      	movs	r1, #15
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9c:	f7ff ff8e 	bl	8001cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da0:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <SysTick_Config+0x40>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da6:	4b04      	ldr	r3, [pc, #16]	@ (8001db8 <SysTick_Config+0x40>)
 8001da8:	2207      	movs	r2, #7
 8001daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	e000e010 	.word	0xe000e010

08001dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff ff29 	bl	8001c1c <__NVIC_SetPriorityGrouping>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b086      	sub	sp, #24
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
 8001dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de4:	f7ff ff3e 	bl	8001c64 <__NVIC_GetPriorityGrouping>
 8001de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	6978      	ldr	r0, [r7, #20]
 8001df0:	f7ff ff8e 	bl	8001d10 <NVIC_EncodePriority>
 8001df4:	4602      	mov	r2, r0
 8001df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff5d 	bl	8001cbc <__NVIC_SetPriority>
}
 8001e02:	bf00      	nop
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff31 	bl	8001c80 <__NVIC_EnableIRQ>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ffa2 	bl	8001d78 <SysTick_Config>
 8001e34:	4603      	mov	r3, r0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	@ 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	e165      	b.n	8002128 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	f040 8154 	bne.w	8002122 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d005      	beq.n	8001e92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d130      	bne.n	8001ef4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec8:	2201      	movs	r2, #1
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f003 0201 	and.w	r2, r3, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d017      	beq.n	8001f30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d123      	bne.n	8001f84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	08da      	lsrs	r2, r3, #3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3208      	adds	r2, #8
 8001f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	220f      	movs	r2, #15
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	08da      	lsrs	r2, r3, #3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3208      	adds	r2, #8
 8001f7e:	69b9      	ldr	r1, [r7, #24]
 8001f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	2203      	movs	r2, #3
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0203 	and.w	r2, r3, #3
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 80ae 	beq.w	8002122 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b5d      	ldr	r3, [pc, #372]	@ (8002140 <HAL_GPIO_Init+0x300>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fce:	4a5c      	ldr	r2, [pc, #368]	@ (8002140 <HAL_GPIO_Init+0x300>)
 8001fd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fd6:	4b5a      	ldr	r3, [pc, #360]	@ (8002140 <HAL_GPIO_Init+0x300>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fe2:	4a58      	ldr	r2, [pc, #352]	@ (8002144 <HAL_GPIO_Init+0x304>)
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	3302      	adds	r3, #2
 8001fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	220f      	movs	r2, #15
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4f      	ldr	r2, [pc, #316]	@ (8002148 <HAL_GPIO_Init+0x308>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d025      	beq.n	800205a <HAL_GPIO_Init+0x21a>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4e      	ldr	r2, [pc, #312]	@ (800214c <HAL_GPIO_Init+0x30c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d01f      	beq.n	8002056 <HAL_GPIO_Init+0x216>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4d      	ldr	r2, [pc, #308]	@ (8002150 <HAL_GPIO_Init+0x310>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d019      	beq.n	8002052 <HAL_GPIO_Init+0x212>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4c      	ldr	r2, [pc, #304]	@ (8002154 <HAL_GPIO_Init+0x314>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <HAL_GPIO_Init+0x20e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4b      	ldr	r2, [pc, #300]	@ (8002158 <HAL_GPIO_Init+0x318>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00d      	beq.n	800204a <HAL_GPIO_Init+0x20a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4a      	ldr	r2, [pc, #296]	@ (800215c <HAL_GPIO_Init+0x31c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d007      	beq.n	8002046 <HAL_GPIO_Init+0x206>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a49      	ldr	r2, [pc, #292]	@ (8002160 <HAL_GPIO_Init+0x320>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d101      	bne.n	8002042 <HAL_GPIO_Init+0x202>
 800203e:	2306      	movs	r3, #6
 8002040:	e00c      	b.n	800205c <HAL_GPIO_Init+0x21c>
 8002042:	2307      	movs	r3, #7
 8002044:	e00a      	b.n	800205c <HAL_GPIO_Init+0x21c>
 8002046:	2305      	movs	r3, #5
 8002048:	e008      	b.n	800205c <HAL_GPIO_Init+0x21c>
 800204a:	2304      	movs	r3, #4
 800204c:	e006      	b.n	800205c <HAL_GPIO_Init+0x21c>
 800204e:	2303      	movs	r3, #3
 8002050:	e004      	b.n	800205c <HAL_GPIO_Init+0x21c>
 8002052:	2302      	movs	r3, #2
 8002054:	e002      	b.n	800205c <HAL_GPIO_Init+0x21c>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_GPIO_Init+0x21c>
 800205a:	2300      	movs	r3, #0
 800205c:	69fa      	ldr	r2, [r7, #28]
 800205e:	f002 0203 	and.w	r2, r2, #3
 8002062:	0092      	lsls	r2, r2, #2
 8002064:	4093      	lsls	r3, r2
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800206c:	4935      	ldr	r1, [pc, #212]	@ (8002144 <HAL_GPIO_Init+0x304>)
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	3302      	adds	r3, #2
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800207a:	4b3a      	ldr	r3, [pc, #232]	@ (8002164 <HAL_GPIO_Init+0x324>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800209e:	4a31      	ldr	r2, [pc, #196]	@ (8002164 <HAL_GPIO_Init+0x324>)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002164 <HAL_GPIO_Init+0x324>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020c8:	4a26      	ldr	r2, [pc, #152]	@ (8002164 <HAL_GPIO_Init+0x324>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ce:	4b25      	ldr	r3, [pc, #148]	@ (8002164 <HAL_GPIO_Init+0x324>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002164 <HAL_GPIO_Init+0x324>)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002164 <HAL_GPIO_Init+0x324>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800211c:	4a11      	ldr	r2, [pc, #68]	@ (8002164 <HAL_GPIO_Init+0x324>)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3301      	adds	r3, #1
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	2b0f      	cmp	r3, #15
 800212c:	f67f ae96 	bls.w	8001e5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3724      	adds	r7, #36	@ 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800
 8002144:	40013800 	.word	0x40013800
 8002148:	40020000 	.word	0x40020000
 800214c:	40020400 	.word	0x40020400
 8002150:	40020800 	.word	0x40020800
 8002154:	40020c00 	.word	0x40020c00
 8002158:	40021000 	.word	0x40021000
 800215c:	40021400 	.word	0x40021400
 8002160:	40021800 	.word	0x40021800
 8002164:	40013c00 	.word	0x40013c00

08002168 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	887b      	ldrh	r3, [r7, #2]
 800217a:	4013      	ands	r3, r2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
 8002184:	e001      	b.n	800218a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002186:	2300      	movs	r3, #0
 8002188:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800218a:	7bfb      	ldrb	r3, [r7, #15]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021a2:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d006      	beq.n	80021bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021ae:	4a05      	ldr	r2, [pc, #20]	@ (80021c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021b0:	88fb      	ldrh	r3, [r7, #6]
 80021b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021b4:	88fb      	ldrh	r3, [r7, #6]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fba2 	bl	8001900 <HAL_GPIO_EXTI_Callback>
  }
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40013c00 	.word	0x40013c00

080021c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e12b      	b.n	8002432 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7fe fade 	bl	80007b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2224      	movs	r2, #36	@ 0x24
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0201 	bic.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800221a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800222a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800222c:	f001 f8d2 	bl	80033d4 <HAL_RCC_GetPCLK1Freq>
 8002230:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	4a81      	ldr	r2, [pc, #516]	@ (800243c <HAL_I2C_Init+0x274>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d807      	bhi.n	800224c <HAL_I2C_Init+0x84>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4a80      	ldr	r2, [pc, #512]	@ (8002440 <HAL_I2C_Init+0x278>)
 8002240:	4293      	cmp	r3, r2
 8002242:	bf94      	ite	ls
 8002244:	2301      	movls	r3, #1
 8002246:	2300      	movhi	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	e006      	b.n	800225a <HAL_I2C_Init+0x92>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4a7d      	ldr	r2, [pc, #500]	@ (8002444 <HAL_I2C_Init+0x27c>)
 8002250:	4293      	cmp	r3, r2
 8002252:	bf94      	ite	ls
 8002254:	2301      	movls	r3, #1
 8002256:	2300      	movhi	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e0e7      	b.n	8002432 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4a78      	ldr	r2, [pc, #480]	@ (8002448 <HAL_I2C_Init+0x280>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	0c9b      	lsrs	r3, r3, #18
 800226c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	430a      	orrs	r2, r1
 8002280:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	4a6a      	ldr	r2, [pc, #424]	@ (800243c <HAL_I2C_Init+0x274>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d802      	bhi.n	800229c <HAL_I2C_Init+0xd4>
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	3301      	adds	r3, #1
 800229a:	e009      	b.n	80022b0 <HAL_I2C_Init+0xe8>
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022a2:	fb02 f303 	mul.w	r3, r2, r3
 80022a6:	4a69      	ldr	r2, [pc, #420]	@ (800244c <HAL_I2C_Init+0x284>)
 80022a8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ac:	099b      	lsrs	r3, r3, #6
 80022ae:	3301      	adds	r3, #1
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	430b      	orrs	r3, r1
 80022b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80022c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	495c      	ldr	r1, [pc, #368]	@ (800243c <HAL_I2C_Init+0x274>)
 80022cc:	428b      	cmp	r3, r1
 80022ce:	d819      	bhi.n	8002304 <HAL_I2C_Init+0x13c>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	1e59      	subs	r1, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	fbb1 f3f3 	udiv	r3, r1, r3
 80022de:	1c59      	adds	r1, r3, #1
 80022e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80022e4:	400b      	ands	r3, r1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00a      	beq.n	8002300 <HAL_I2C_Init+0x138>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1e59      	subs	r1, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022f8:	3301      	adds	r3, #1
 80022fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022fe:	e051      	b.n	80023a4 <HAL_I2C_Init+0x1dc>
 8002300:	2304      	movs	r3, #4
 8002302:	e04f      	b.n	80023a4 <HAL_I2C_Init+0x1dc>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d111      	bne.n	8002330 <HAL_I2C_Init+0x168>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1e58      	subs	r0, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	440b      	add	r3, r1
 800231a:	fbb0 f3f3 	udiv	r3, r0, r3
 800231e:	3301      	adds	r3, #1
 8002320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002324:	2b00      	cmp	r3, #0
 8002326:	bf0c      	ite	eq
 8002328:	2301      	moveq	r3, #1
 800232a:	2300      	movne	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	e012      	b.n	8002356 <HAL_I2C_Init+0x18e>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1e58      	subs	r0, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6859      	ldr	r1, [r3, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	0099      	lsls	r1, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	fbb0 f3f3 	udiv	r3, r0, r3
 8002346:	3301      	adds	r3, #1
 8002348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800234c:	2b00      	cmp	r3, #0
 800234e:	bf0c      	ite	eq
 8002350:	2301      	moveq	r3, #1
 8002352:	2300      	movne	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_I2C_Init+0x196>
 800235a:	2301      	movs	r3, #1
 800235c:	e022      	b.n	80023a4 <HAL_I2C_Init+0x1dc>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10e      	bne.n	8002384 <HAL_I2C_Init+0x1bc>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1e58      	subs	r0, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6859      	ldr	r1, [r3, #4]
 800236e:	460b      	mov	r3, r1
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	440b      	add	r3, r1
 8002374:	fbb0 f3f3 	udiv	r3, r0, r3
 8002378:	3301      	adds	r3, #1
 800237a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800237e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002382:	e00f      	b.n	80023a4 <HAL_I2C_Init+0x1dc>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1e58      	subs	r0, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	0099      	lsls	r1, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	fbb0 f3f3 	udiv	r3, r0, r3
 800239a:	3301      	adds	r3, #1
 800239c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	6809      	ldr	r1, [r1, #0]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69da      	ldr	r2, [r3, #28]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80023d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6911      	ldr	r1, [r2, #16]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68d2      	ldr	r2, [r2, #12]
 80023de:	4311      	orrs	r1, r2
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	430b      	orrs	r3, r1
 80023e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695a      	ldr	r2, [r3, #20]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2220      	movs	r2, #32
 800241e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	000186a0 	.word	0x000186a0
 8002440:	001e847f 	.word	0x001e847f
 8002444:	003d08ff 	.word	0x003d08ff
 8002448:	431bde83 	.word	0x431bde83
 800244c:	10624dd3 	.word	0x10624dd3

08002450 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af02      	add	r7, sp, #8
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	607a      	str	r2, [r7, #4]
 800245a:	461a      	mov	r2, r3
 800245c:	460b      	mov	r3, r1
 800245e:	817b      	strh	r3, [r7, #10]
 8002460:	4613      	mov	r3, r2
 8002462:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002464:	f7ff fbaa 	bl	8001bbc <HAL_GetTick>
 8002468:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b20      	cmp	r3, #32
 8002474:	f040 80e0 	bne.w	8002638 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	2319      	movs	r3, #25
 800247e:	2201      	movs	r2, #1
 8002480:	4970      	ldr	r1, [pc, #448]	@ (8002644 <HAL_I2C_Master_Transmit+0x1f4>)
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 fc7e 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800248e:	2302      	movs	r3, #2
 8002490:	e0d3      	b.n	800263a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <HAL_I2C_Master_Transmit+0x50>
 800249c:	2302      	movs	r3, #2
 800249e:	e0cc      	b.n	800263a <HAL_I2C_Master_Transmit+0x1ea>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d007      	beq.n	80024c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0201 	orr.w	r2, r2, #1
 80024c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2221      	movs	r2, #33	@ 0x21
 80024da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2210      	movs	r2, #16
 80024e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	893a      	ldrh	r2, [r7, #8]
 80024f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4a50      	ldr	r2, [pc, #320]	@ (8002648 <HAL_I2C_Master_Transmit+0x1f8>)
 8002506:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002508:	8979      	ldrh	r1, [r7, #10]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	6a3a      	ldr	r2, [r7, #32]
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 face 	bl	8002ab0 <I2C_MasterRequestWrite>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e08d      	b.n	800263a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002534:	e066      	b.n	8002604 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	6a39      	ldr	r1, [r7, #32]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 fd3c 	bl	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00d      	beq.n	8002562 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	2b04      	cmp	r3, #4
 800254c:	d107      	bne.n	800255e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800255c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e06b      	b.n	800263a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002566:	781a      	ldrb	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b04      	cmp	r3, #4
 800259e:	d11b      	bne.n	80025d8 <HAL_I2C_Master_Transmit+0x188>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d017      	beq.n	80025d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ac:	781a      	ldrb	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	6a39      	ldr	r1, [r7, #32]
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 fd33 	bl	8003048 <I2C_WaitOnBTFFlagUntilTimeout>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00d      	beq.n	8002604 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d107      	bne.n	8002600 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e01a      	b.n	800263a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002608:	2b00      	cmp	r3, #0
 800260a:	d194      	bne.n	8002536 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800261a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	e000      	b.n	800263a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002638:	2302      	movs	r3, #2
  }
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	00100002 	.word	0x00100002
 8002648:	ffff0000 	.word	0xffff0000

0800264c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08c      	sub	sp, #48	@ 0x30
 8002650:	af02      	add	r7, sp, #8
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	4608      	mov	r0, r1
 8002656:	4611      	mov	r1, r2
 8002658:	461a      	mov	r2, r3
 800265a:	4603      	mov	r3, r0
 800265c:	817b      	strh	r3, [r7, #10]
 800265e:	460b      	mov	r3, r1
 8002660:	813b      	strh	r3, [r7, #8]
 8002662:	4613      	mov	r3, r2
 8002664:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002666:	f7ff faa9 	bl	8001bbc <HAL_GetTick>
 800266a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b20      	cmp	r3, #32
 8002676:	f040 8214 	bne.w	8002aa2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	2319      	movs	r3, #25
 8002680:	2201      	movs	r2, #1
 8002682:	497b      	ldr	r1, [pc, #492]	@ (8002870 <HAL_I2C_Mem_Read+0x224>)
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 fb7d 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002690:	2302      	movs	r3, #2
 8002692:	e207      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_I2C_Mem_Read+0x56>
 800269e:	2302      	movs	r3, #2
 80026a0:	e200      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x458>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d007      	beq.n	80026c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0201 	orr.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2222      	movs	r2, #34	@ 0x22
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2240      	movs	r2, #64	@ 0x40
 80026e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80026f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4a5b      	ldr	r2, [pc, #364]	@ (8002874 <HAL_I2C_Mem_Read+0x228>)
 8002708:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800270a:	88f8      	ldrh	r0, [r7, #6]
 800270c:	893a      	ldrh	r2, [r7, #8]
 800270e:	8979      	ldrh	r1, [r7, #10]
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	4603      	mov	r3, r0
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 fa4a 	bl	8002bb4 <I2C_RequestMemoryRead>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e1bc      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800272e:	2b00      	cmp	r3, #0
 8002730:	d113      	bne.n	800275a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002732:	2300      	movs	r3, #0
 8002734:	623b      	str	r3, [r7, #32]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	623b      	str	r3, [r7, #32]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	623b      	str	r3, [r7, #32]
 8002746:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	e190      	b.n	8002a7c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275e:	2b01      	cmp	r3, #1
 8002760:	d11b      	bne.n	800279a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002770:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	61fb      	str	r3, [r7, #28]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	61fb      	str	r3, [r7, #28]
 8002786:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	e170      	b.n	8002a7c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d11b      	bne.n	80027da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c2:	2300      	movs	r3, #0
 80027c4:	61bb      	str	r3, [r7, #24]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	e150      	b.n	8002a7c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027f0:	e144      	b.n	8002a7c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	f200 80f1 	bhi.w	80029de <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002800:	2b01      	cmp	r3, #1
 8002802:	d123      	bne.n	800284c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002806:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 fc65 	bl	80030d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e145      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691a      	ldr	r2, [r3, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800284a:	e117      	b.n	8002a7c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002850:	2b02      	cmp	r3, #2
 8002852:	d14e      	bne.n	80028f2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800285a:	2200      	movs	r2, #0
 800285c:	4906      	ldr	r1, [pc, #24]	@ (8002878 <HAL_I2C_Mem_Read+0x22c>)
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 fa90 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d008      	beq.n	800287c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e11a      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x458>
 800286e:	bf00      	nop
 8002870:	00100002 	.word	0x00100002
 8002874:	ffff0000 	.word	0xffff0000
 8002878:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800288a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028f0:	e0c4      	b.n	8002a7c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028f8:	2200      	movs	r2, #0
 80028fa:	496c      	ldr	r1, [pc, #432]	@ (8002aac <HAL_I2C_Mem_Read+0x460>)
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 fa41 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0cb      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800291a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691a      	ldr	r2, [r3, #16]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002954:	2200      	movs	r2, #0
 8002956:	4955      	ldr	r1, [pc, #340]	@ (8002aac <HAL_I2C_Mem_Read+0x460>)
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 fa13 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e09d      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002976:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691a      	ldr	r2, [r3, #16]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002994:	3b01      	subs	r3, #1
 8002996:	b29a      	uxth	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029dc:	e04e      	b.n	8002a7c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 fb78 	bl	80030d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e058      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d124      	bne.n	8002a7c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	d107      	bne.n	8002a4a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a48:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f47f aeb6 	bne.w	80027f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	e000      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002aa2:	2302      	movs	r3, #2
  }
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3728      	adds	r7, #40	@ 0x28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	00010004 	.word	0x00010004

08002ab0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	607a      	str	r2, [r7, #4]
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	460b      	mov	r3, r1
 8002abe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d006      	beq.n	8002ada <I2C_MasterRequestWrite+0x2a>
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d003      	beq.n	8002ada <I2C_MasterRequestWrite+0x2a>
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ad8:	d108      	bne.n	8002aec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	e00b      	b.n	8002b04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af0:	2b12      	cmp	r3, #18
 8002af2:	d107      	bne.n	8002b04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 f937 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00d      	beq.n	8002b38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b2a:	d103      	bne.n	8002b34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e035      	b.n	8002ba4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b40:	d108      	bne.n	8002b54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b42:	897b      	ldrh	r3, [r7, #10]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	461a      	mov	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b50:	611a      	str	r2, [r3, #16]
 8002b52:	e01b      	b.n	8002b8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b54:	897b      	ldrh	r3, [r7, #10]
 8002b56:	11db      	asrs	r3, r3, #7
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	f003 0306 	and.w	r3, r3, #6
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	f063 030f 	orn	r3, r3, #15
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	490e      	ldr	r1, [pc, #56]	@ (8002bac <I2C_MasterRequestWrite+0xfc>)
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f980 	bl	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e010      	b.n	8002ba4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b82:	897b      	ldrh	r3, [r7, #10]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	4907      	ldr	r1, [pc, #28]	@ (8002bb0 <I2C_MasterRequestWrite+0x100>)
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 f970 	bl	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	00010008 	.word	0x00010008
 8002bb0:	00010002 	.word	0x00010002

08002bb4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	4608      	mov	r0, r1
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	817b      	strh	r3, [r7, #10]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	813b      	strh	r3, [r7, #8]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002bdc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 f8c2 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00d      	beq.n	8002c22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c14:	d103      	bne.n	8002c1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e0aa      	b.n	8002d78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c22:	897b      	ldrh	r3, [r7, #10]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	6a3a      	ldr	r2, [r7, #32]
 8002c36:	4952      	ldr	r1, [pc, #328]	@ (8002d80 <I2C_RequestMemoryRead+0x1cc>)
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 f91d 	bl	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e097      	b.n	8002d78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c60:	6a39      	ldr	r1, [r7, #32]
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f9a8 	bl	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00d      	beq.n	8002c8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d107      	bne.n	8002c86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e076      	b.n	8002d78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d105      	bne.n	8002c9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c90:	893b      	ldrh	r3, [r7, #8]
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	611a      	str	r2, [r3, #16]
 8002c9a:	e021      	b.n	8002ce0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c9c:	893b      	ldrh	r3, [r7, #8]
 8002c9e:	0a1b      	lsrs	r3, r3, #8
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cac:	6a39      	ldr	r1, [r7, #32]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f982 	bl	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00d      	beq.n	8002cd6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d107      	bne.n	8002cd2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e050      	b.n	8002d78 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cd6:	893b      	ldrh	r3, [r7, #8]
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ce2:	6a39      	ldr	r1, [r7, #32]
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f967 	bl	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00d      	beq.n	8002d0c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d107      	bne.n	8002d08 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e035      	b.n	8002d78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d1a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 f82b 	bl	8002d84 <I2C_WaitOnFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00d      	beq.n	8002d50 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d42:	d103      	bne.n	8002d4c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d4a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e013      	b.n	8002d78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d50:	897b      	ldrh	r3, [r7, #10]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d62:	6a3a      	ldr	r2, [r7, #32]
 8002d64:	4906      	ldr	r1, [pc, #24]	@ (8002d80 <I2C_RequestMemoryRead+0x1cc>)
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f886 	bl	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	00010002 	.word	0x00010002

08002d84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	4613      	mov	r3, r2
 8002d92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d94:	e048      	b.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d044      	beq.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d9e:	f7fe ff0d 	bl	8001bbc <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d302      	bcc.n	8002db4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d139      	bne.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	0c1b      	lsrs	r3, r3, #16
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d10d      	bne.n	8002dda <I2C_WaitOnFlagUntilTimeout+0x56>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	43da      	mvns	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	bf0c      	ite	eq
 8002dd0:	2301      	moveq	r3, #1
 8002dd2:	2300      	movne	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	e00c      	b.n	8002df4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	43da      	mvns	r2, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	4013      	ands	r3, r2
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bf0c      	ite	eq
 8002dec:	2301      	moveq	r3, #1
 8002dee:	2300      	movne	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d116      	bne.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e14:	f043 0220 	orr.w	r2, r3, #32
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e023      	b.n	8002e70 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	0c1b      	lsrs	r3, r3, #16
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d10d      	bne.n	8002e4e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	43da      	mvns	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bf0c      	ite	eq
 8002e44:	2301      	moveq	r3, #1
 8002e46:	2300      	movne	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	e00c      	b.n	8002e68 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	43da      	mvns	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d093      	beq.n	8002d96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e86:	e071      	b.n	8002f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e96:	d123      	bne.n	8002ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ea6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002eb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ecc:	f043 0204 	orr.w	r2, r3, #4
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e067      	b.n	8002fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee6:	d041      	beq.n	8002f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee8:	f7fe fe68 	bl	8001bbc <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d302      	bcc.n	8002efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d136      	bne.n	8002f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	0c1b      	lsrs	r3, r3, #16
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d10c      	bne.n	8002f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	43da      	mvns	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4013      	ands	r3, r2
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	bf14      	ite	ne
 8002f1a:	2301      	movne	r3, #1
 8002f1c:	2300      	moveq	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	e00b      	b.n	8002f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	43da      	mvns	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf14      	ite	ne
 8002f34:	2301      	movne	r3, #1
 8002f36:	2300      	moveq	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d016      	beq.n	8002f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	f043 0220 	orr.w	r2, r3, #32
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e021      	b.n	8002fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	0c1b      	lsrs	r3, r3, #16
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d10c      	bne.n	8002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	43da      	mvns	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	4013      	ands	r3, r2
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf14      	ite	ne
 8002f88:	2301      	movne	r3, #1
 8002f8a:	2300      	moveq	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	e00b      	b.n	8002fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	43da      	mvns	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	bf14      	ite	ne
 8002fa2:	2301      	movne	r3, #1
 8002fa4:	2300      	moveq	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f47f af6d 	bne.w	8002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fc4:	e034      	b.n	8003030 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 f8e3 	bl	8003192 <I2C_IsAcknowledgeFailed>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e034      	b.n	8003040 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fdc:	d028      	beq.n	8003030 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fde:	f7fe fded 	bl	8001bbc <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d302      	bcc.n	8002ff4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d11d      	bne.n	8003030 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ffe:	2b80      	cmp	r3, #128	@ 0x80
 8003000:	d016      	beq.n	8003030 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301c:	f043 0220 	orr.w	r2, r3, #32
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e007      	b.n	8003040 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800303a:	2b80      	cmp	r3, #128	@ 0x80
 800303c:	d1c3      	bne.n	8002fc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003054:	e034      	b.n	80030c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f89b 	bl	8003192 <I2C_IsAcknowledgeFailed>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e034      	b.n	80030d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306c:	d028      	beq.n	80030c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306e:	f7fe fda5 	bl	8001bbc <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	429a      	cmp	r2, r3
 800307c:	d302      	bcc.n	8003084 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d11d      	bne.n	80030c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	2b04      	cmp	r3, #4
 8003090:	d016      	beq.n	80030c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ac:	f043 0220 	orr.w	r2, r3, #32
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e007      	b.n	80030d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d1c3      	bne.n	8003056 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030e4:	e049      	b.n	800317a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d119      	bne.n	8003128 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0210 	mvn.w	r2, #16
 80030fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e030      	b.n	800318a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003128:	f7fe fd48 	bl	8001bbc <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	429a      	cmp	r2, r3
 8003136:	d302      	bcc.n	800313e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d11d      	bne.n	800317a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003148:	2b40      	cmp	r3, #64	@ 0x40
 800314a:	d016      	beq.n	800317a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003166:	f043 0220 	orr.w	r2, r3, #32
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e007      	b.n	800318a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003184:	2b40      	cmp	r3, #64	@ 0x40
 8003186:	d1ae      	bne.n	80030e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031a8:	d11b      	bne.n	80031e2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031b2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	f043 0204 	orr.w	r2, r3, #4
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e0cc      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003204:	4b68      	ldr	r3, [pc, #416]	@ (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 030f 	and.w	r3, r3, #15
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d90c      	bls.n	800322c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003212:	4b65      	ldr	r3, [pc, #404]	@ (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321a:	4b63      	ldr	r3, [pc, #396]	@ (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	429a      	cmp	r2, r3
 8003226:	d001      	beq.n	800322c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0b8      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d020      	beq.n	800327a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003244:	4b59      	ldr	r3, [pc, #356]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4a58      	ldr	r2, [pc, #352]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800324e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800325c:	4b53      	ldr	r3, [pc, #332]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	4a52      	ldr	r2, [pc, #328]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003266:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003268:	4b50      	ldr	r3, [pc, #320]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	494d      	ldr	r1, [pc, #308]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	4313      	orrs	r3, r2
 8003278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d044      	beq.n	8003310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d107      	bne.n	800329e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	4b47      	ldr	r3, [pc, #284]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d119      	bne.n	80032ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e07f      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d003      	beq.n	80032ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d107      	bne.n	80032be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ae:	4b3f      	ldr	r3, [pc, #252]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e06f      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032be:	4b3b      	ldr	r3, [pc, #236]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e067      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ce:	4b37      	ldr	r3, [pc, #220]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f023 0203 	bic.w	r2, r3, #3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	4934      	ldr	r1, [pc, #208]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e0:	f7fe fc6c 	bl	8001bbc <HAL_GetTick>
 80032e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e8:	f7fe fc68 	bl	8001bbc <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e04f      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fe:	4b2b      	ldr	r3, [pc, #172]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 020c 	and.w	r2, r3, #12
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	429a      	cmp	r2, r3
 800330e:	d1eb      	bne.n	80032e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003310:	4b25      	ldr	r3, [pc, #148]	@ (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 030f 	and.w	r3, r3, #15
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d20c      	bcs.n	8003338 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331e:	4b22      	ldr	r3, [pc, #136]	@ (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003326:	4b20      	ldr	r3, [pc, #128]	@ (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d001      	beq.n	8003338 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e032      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d008      	beq.n	8003356 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003344:	4b19      	ldr	r3, [pc, #100]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4916      	ldr	r1, [pc, #88]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003352:	4313      	orrs	r3, r2
 8003354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d009      	beq.n	8003376 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003362:	4b12      	ldr	r3, [pc, #72]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	490e      	ldr	r1, [pc, #56]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	4313      	orrs	r3, r2
 8003374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003376:	f000 f855 	bl	8003424 <HAL_RCC_GetSysClockFreq>
 800337a:	4602      	mov	r2, r0
 800337c:	4b0b      	ldr	r3, [pc, #44]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	091b      	lsrs	r3, r3, #4
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	490a      	ldr	r1, [pc, #40]	@ (80033b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003388:	5ccb      	ldrb	r3, [r1, r3]
 800338a:	fa22 f303 	lsr.w	r3, r2, r3
 800338e:	4a09      	ldr	r2, [pc, #36]	@ (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003392:	4b09      	ldr	r3, [pc, #36]	@ (80033b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7fe fbcc 	bl	8001b34 <HAL_InitTick>

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40023c00 	.word	0x40023c00
 80033ac:	40023800 	.word	0x40023800
 80033b0:	08004fac 	.word	0x08004fac
 80033b4:	20000000 	.word	0x20000000
 80033b8:	20000004 	.word	0x20000004

080033bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033c0:	4b03      	ldr	r3, [pc, #12]	@ (80033d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033c2:	681b      	ldr	r3, [r3, #0]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	20000000 	.word	0x20000000

080033d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033d8:	f7ff fff0 	bl	80033bc <HAL_RCC_GetHCLKFreq>
 80033dc:	4602      	mov	r2, r0
 80033de:	4b05      	ldr	r3, [pc, #20]	@ (80033f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	0a9b      	lsrs	r3, r3, #10
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	4903      	ldr	r1, [pc, #12]	@ (80033f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ea:	5ccb      	ldrb	r3, [r1, r3]
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40023800 	.word	0x40023800
 80033f8:	08004fbc 	.word	0x08004fbc

080033fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003400:	f7ff ffdc 	bl	80033bc <HAL_RCC_GetHCLKFreq>
 8003404:	4602      	mov	r2, r0
 8003406:	4b05      	ldr	r3, [pc, #20]	@ (800341c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	0b5b      	lsrs	r3, r3, #13
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	4903      	ldr	r1, [pc, #12]	@ (8003420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003412:	5ccb      	ldrb	r3, [r1, r3]
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003418:	4618      	mov	r0, r3
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40023800 	.word	0x40023800
 8003420:	08004fbc 	.word	0x08004fbc

08003424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003428:	b0a6      	sub	sp, #152	@ 0x98
 800342a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800344a:	4bc8      	ldr	r3, [pc, #800]	@ (800376c <HAL_RCC_GetSysClockFreq+0x348>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b0c      	cmp	r3, #12
 8003454:	f200 817e 	bhi.w	8003754 <HAL_RCC_GetSysClockFreq+0x330>
 8003458:	a201      	add	r2, pc, #4	@ (adr r2, 8003460 <HAL_RCC_GetSysClockFreq+0x3c>)
 800345a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345e:	bf00      	nop
 8003460:	08003495 	.word	0x08003495
 8003464:	08003755 	.word	0x08003755
 8003468:	08003755 	.word	0x08003755
 800346c:	08003755 	.word	0x08003755
 8003470:	0800349d 	.word	0x0800349d
 8003474:	08003755 	.word	0x08003755
 8003478:	08003755 	.word	0x08003755
 800347c:	08003755 	.word	0x08003755
 8003480:	080034a5 	.word	0x080034a5
 8003484:	08003755 	.word	0x08003755
 8003488:	08003755 	.word	0x08003755
 800348c:	08003755 	.word	0x08003755
 8003490:	0800360f 	.word	0x0800360f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003494:	4bb6      	ldr	r3, [pc, #728]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003496:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800349a:	e15f      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800349c:	4bb5      	ldr	r3, [pc, #724]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x350>)
 800349e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80034a2:	e15b      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034a4:	4bb1      	ldr	r3, [pc, #708]	@ (800376c <HAL_RCC_GetSysClockFreq+0x348>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034b0:	4bae      	ldr	r3, [pc, #696]	@ (800376c <HAL_RCC_GetSysClockFreq+0x348>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d031      	beq.n	8003520 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034bc:	4bab      	ldr	r3, [pc, #684]	@ (800376c <HAL_RCC_GetSysClockFreq+0x348>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	099b      	lsrs	r3, r3, #6
 80034c2:	2200      	movs	r2, #0
 80034c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80034c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80034d0:	2300      	movs	r3, #0
 80034d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80034d4:	4ba7      	ldr	r3, [pc, #668]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x350>)
 80034d6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80034da:	462a      	mov	r2, r5
 80034dc:	fb03 f202 	mul.w	r2, r3, r2
 80034e0:	2300      	movs	r3, #0
 80034e2:	4621      	mov	r1, r4
 80034e4:	fb01 f303 	mul.w	r3, r1, r3
 80034e8:	4413      	add	r3, r2
 80034ea:	4aa2      	ldr	r2, [pc, #648]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x350>)
 80034ec:	4621      	mov	r1, r4
 80034ee:	fba1 1202 	umull	r1, r2, r1, r2
 80034f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80034f4:	460a      	mov	r2, r1
 80034f6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80034f8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80034fa:	4413      	add	r3, r2
 80034fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80034fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003502:	2200      	movs	r2, #0
 8003504:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003506:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003508:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800350c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003510:	f7fc fede 	bl	80002d0 <__aeabi_uldivmod>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4613      	mov	r3, r2
 800351a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800351e:	e064      	b.n	80035ea <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003520:	4b92      	ldr	r3, [pc, #584]	@ (800376c <HAL_RCC_GetSysClockFreq+0x348>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	099b      	lsrs	r3, r3, #6
 8003526:	2200      	movs	r2, #0
 8003528:	653b      	str	r3, [r7, #80]	@ 0x50
 800352a:	657a      	str	r2, [r7, #84]	@ 0x54
 800352c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800352e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003532:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003534:	2300      	movs	r3, #0
 8003536:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003538:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800353c:	4622      	mov	r2, r4
 800353e:	462b      	mov	r3, r5
 8003540:	f04f 0000 	mov.w	r0, #0
 8003544:	f04f 0100 	mov.w	r1, #0
 8003548:	0159      	lsls	r1, r3, #5
 800354a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800354e:	0150      	lsls	r0, r2, #5
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4621      	mov	r1, r4
 8003556:	1a51      	subs	r1, r2, r1
 8003558:	6139      	str	r1, [r7, #16]
 800355a:	4629      	mov	r1, r5
 800355c:	eb63 0301 	sbc.w	r3, r3, r1
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800356e:	4659      	mov	r1, fp
 8003570:	018b      	lsls	r3, r1, #6
 8003572:	4651      	mov	r1, sl
 8003574:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003578:	4651      	mov	r1, sl
 800357a:	018a      	lsls	r2, r1, #6
 800357c:	4651      	mov	r1, sl
 800357e:	ebb2 0801 	subs.w	r8, r2, r1
 8003582:	4659      	mov	r1, fp
 8003584:	eb63 0901 	sbc.w	r9, r3, r1
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003594:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003598:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800359c:	4690      	mov	r8, r2
 800359e:	4699      	mov	r9, r3
 80035a0:	4623      	mov	r3, r4
 80035a2:	eb18 0303 	adds.w	r3, r8, r3
 80035a6:	60bb      	str	r3, [r7, #8]
 80035a8:	462b      	mov	r3, r5
 80035aa:	eb49 0303 	adc.w	r3, r9, r3
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035bc:	4629      	mov	r1, r5
 80035be:	028b      	lsls	r3, r1, #10
 80035c0:	4621      	mov	r1, r4
 80035c2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035c6:	4621      	mov	r1, r4
 80035c8:	028a      	lsls	r2, r1, #10
 80035ca:	4610      	mov	r0, r2
 80035cc:	4619      	mov	r1, r3
 80035ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035d2:	2200      	movs	r2, #0
 80035d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80035d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80035d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80035dc:	f7fc fe78 	bl	80002d0 <__aeabi_uldivmod>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4613      	mov	r3, r2
 80035e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80035ea:	4b60      	ldr	r3, [pc, #384]	@ (800376c <HAL_RCC_GetSysClockFreq+0x348>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	0c1b      	lsrs	r3, r3, #16
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	3301      	adds	r3, #1
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80035fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003600:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003604:	fbb2 f3f3 	udiv	r3, r2, r3
 8003608:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800360c:	e0a6      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800360e:	4b57      	ldr	r3, [pc, #348]	@ (800376c <HAL_RCC_GetSysClockFreq+0x348>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003616:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800361a:	4b54      	ldr	r3, [pc, #336]	@ (800376c <HAL_RCC_GetSysClockFreq+0x348>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d02a      	beq.n	800367c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003626:	4b51      	ldr	r3, [pc, #324]	@ (800376c <HAL_RCC_GetSysClockFreq+0x348>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	099b      	lsrs	r3, r3, #6
 800362c:	2200      	movs	r2, #0
 800362e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003630:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003634:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003638:	2100      	movs	r1, #0
 800363a:	4b4e      	ldr	r3, [pc, #312]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x350>)
 800363c:	fb03 f201 	mul.w	r2, r3, r1
 8003640:	2300      	movs	r3, #0
 8003642:	fb00 f303 	mul.w	r3, r0, r3
 8003646:	4413      	add	r3, r2
 8003648:	4a4a      	ldr	r2, [pc, #296]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x350>)
 800364a:	fba0 1202 	umull	r1, r2, r0, r2
 800364e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003650:	460a      	mov	r2, r1
 8003652:	673a      	str	r2, [r7, #112]	@ 0x70
 8003654:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003656:	4413      	add	r3, r2
 8003658:	677b      	str	r3, [r7, #116]	@ 0x74
 800365a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800365e:	2200      	movs	r2, #0
 8003660:	633b      	str	r3, [r7, #48]	@ 0x30
 8003662:	637a      	str	r2, [r7, #52]	@ 0x34
 8003664:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003668:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800366c:	f7fc fe30 	bl	80002d0 <__aeabi_uldivmod>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4613      	mov	r3, r2
 8003676:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800367a:	e05b      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800367c:	4b3b      	ldr	r3, [pc, #236]	@ (800376c <HAL_RCC_GetSysClockFreq+0x348>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	099b      	lsrs	r3, r3, #6
 8003682:	2200      	movs	r2, #0
 8003684:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003686:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800368e:	623b      	str	r3, [r7, #32]
 8003690:	2300      	movs	r3, #0
 8003692:	627b      	str	r3, [r7, #36]	@ 0x24
 8003694:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003698:	4642      	mov	r2, r8
 800369a:	464b      	mov	r3, r9
 800369c:	f04f 0000 	mov.w	r0, #0
 80036a0:	f04f 0100 	mov.w	r1, #0
 80036a4:	0159      	lsls	r1, r3, #5
 80036a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036aa:	0150      	lsls	r0, r2, #5
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4641      	mov	r1, r8
 80036b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80036b6:	4649      	mov	r1, r9
 80036b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036d0:	ebb2 040a 	subs.w	r4, r2, sl
 80036d4:	eb63 050b 	sbc.w	r5, r3, fp
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	00eb      	lsls	r3, r5, #3
 80036e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036e6:	00e2      	lsls	r2, r4, #3
 80036e8:	4614      	mov	r4, r2
 80036ea:	461d      	mov	r5, r3
 80036ec:	4643      	mov	r3, r8
 80036ee:	18e3      	adds	r3, r4, r3
 80036f0:	603b      	str	r3, [r7, #0]
 80036f2:	464b      	mov	r3, r9
 80036f4:	eb45 0303 	adc.w	r3, r5, r3
 80036f8:	607b      	str	r3, [r7, #4]
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	f04f 0300 	mov.w	r3, #0
 8003702:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003706:	4629      	mov	r1, r5
 8003708:	028b      	lsls	r3, r1, #10
 800370a:	4621      	mov	r1, r4
 800370c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003710:	4621      	mov	r1, r4
 8003712:	028a      	lsls	r2, r1, #10
 8003714:	4610      	mov	r0, r2
 8003716:	4619      	mov	r1, r3
 8003718:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800371c:	2200      	movs	r2, #0
 800371e:	61bb      	str	r3, [r7, #24]
 8003720:	61fa      	str	r2, [r7, #28]
 8003722:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003726:	f7fc fdd3 	bl	80002d0 <__aeabi_uldivmod>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	4613      	mov	r3, r2
 8003730:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003734:	4b0d      	ldr	r3, [pc, #52]	@ (800376c <HAL_RCC_GetSysClockFreq+0x348>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	0f1b      	lsrs	r3, r3, #28
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003742:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003746:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800374a:	fbb2 f3f3 	udiv	r3, r2, r3
 800374e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003752:	e003      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003754:	4b06      	ldr	r3, [pc, #24]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003756:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800375a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800375c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003760:	4618      	mov	r0, r3
 8003762:	3798      	adds	r7, #152	@ 0x98
 8003764:	46bd      	mov	sp, r7
 8003766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800376a:	bf00      	nop
 800376c:	40023800 	.word	0x40023800
 8003770:	00f42400 	.word	0x00f42400
 8003774:	017d7840 	.word	0x017d7840

08003778 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e28d      	b.n	8003ca6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 8083 	beq.w	800389e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003798:	4b94      	ldr	r3, [pc, #592]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 030c 	and.w	r3, r3, #12
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d019      	beq.n	80037d8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037a4:	4b91      	ldr	r3, [pc, #580]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 030c 	and.w	r3, r3, #12
        || \
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d106      	bne.n	80037be <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037b0:	4b8e      	ldr	r3, [pc, #568]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037bc:	d00c      	beq.n	80037d8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037be:	4b8b      	ldr	r3, [pc, #556]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037c6:	2b0c      	cmp	r3, #12
 80037c8:	d112      	bne.n	80037f0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ca:	4b88      	ldr	r3, [pc, #544]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037d6:	d10b      	bne.n	80037f0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d8:	4b84      	ldr	r3, [pc, #528]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d05b      	beq.n	800389c <HAL_RCC_OscConfig+0x124>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d157      	bne.n	800389c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e25a      	b.n	8003ca6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037f8:	d106      	bne.n	8003808 <HAL_RCC_OscConfig+0x90>
 80037fa:	4b7c      	ldr	r3, [pc, #496]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a7b      	ldr	r2, [pc, #492]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 8003800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	e01d      	b.n	8003844 <HAL_RCC_OscConfig+0xcc>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003810:	d10c      	bne.n	800382c <HAL_RCC_OscConfig+0xb4>
 8003812:	4b76      	ldr	r3, [pc, #472]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a75      	ldr	r2, [pc, #468]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 8003818:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	4b73      	ldr	r3, [pc, #460]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a72      	ldr	r2, [pc, #456]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 8003824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	e00b      	b.n	8003844 <HAL_RCC_OscConfig+0xcc>
 800382c:	4b6f      	ldr	r3, [pc, #444]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a6e      	ldr	r2, [pc, #440]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 8003832:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	4b6c      	ldr	r3, [pc, #432]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a6b      	ldr	r2, [pc, #428]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 800383e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d013      	beq.n	8003874 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384c:	f7fe f9b6 	bl	8001bbc <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003854:	f7fe f9b2 	bl	8001bbc <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	@ 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e21f      	b.n	8003ca6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003866:	4b61      	ldr	r3, [pc, #388]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0xdc>
 8003872:	e014      	b.n	800389e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fe f9a2 	bl	8001bbc <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800387c:	f7fe f99e 	bl	8001bbc <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	@ 0x64
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e20b      	b.n	8003ca6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388e:	4b57      	ldr	r3, [pc, #348]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0x104>
 800389a:	e000      	b.n	800389e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800389c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d06f      	beq.n	800398a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80038aa:	4b50      	ldr	r3, [pc, #320]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d017      	beq.n	80038e6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038b6:	4b4d      	ldr	r3, [pc, #308]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
        || \
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d105      	bne.n	80038ce <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038c2:	4b4a      	ldr	r3, [pc, #296]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00b      	beq.n	80038e6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ce:	4b47      	ldr	r3, [pc, #284]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038d6:	2b0c      	cmp	r3, #12
 80038d8:	d11c      	bne.n	8003914 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038da:	4b44      	ldr	r3, [pc, #272]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d116      	bne.n	8003914 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e6:	4b41      	ldr	r3, [pc, #260]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d005      	beq.n	80038fe <HAL_RCC_OscConfig+0x186>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d001      	beq.n	80038fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e1d3      	b.n	8003ca6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fe:	4b3b      	ldr	r3, [pc, #236]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	4937      	ldr	r1, [pc, #220]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003912:	e03a      	b.n	800398a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d020      	beq.n	800395e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800391c:	4b34      	ldr	r3, [pc, #208]	@ (80039f0 <HAL_RCC_OscConfig+0x278>)
 800391e:	2201      	movs	r2, #1
 8003920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003922:	f7fe f94b 	bl	8001bbc <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800392a:	f7fe f947 	bl	8001bbc <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e1b4      	b.n	8003ca6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393c:	4b2b      	ldr	r3, [pc, #172]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0f0      	beq.n	800392a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003948:	4b28      	ldr	r3, [pc, #160]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	4925      	ldr	r1, [pc, #148]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 8003958:	4313      	orrs	r3, r2
 800395a:	600b      	str	r3, [r1, #0]
 800395c:	e015      	b.n	800398a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800395e:	4b24      	ldr	r3, [pc, #144]	@ (80039f0 <HAL_RCC_OscConfig+0x278>)
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003964:	f7fe f92a 	bl	8001bbc <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800396c:	f7fe f926 	bl	8001bbc <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e193      	b.n	8003ca6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800397e:	4b1b      	ldr	r3, [pc, #108]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f0      	bne.n	800396c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d036      	beq.n	8003a04 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d016      	beq.n	80039cc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800399e:	4b15      	ldr	r3, [pc, #84]	@ (80039f4 <HAL_RCC_OscConfig+0x27c>)
 80039a0:	2201      	movs	r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a4:	f7fe f90a 	bl	8001bbc <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ac:	f7fe f906 	bl	8001bbc <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e173      	b.n	8003ca6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039be:	4b0b      	ldr	r3, [pc, #44]	@ (80039ec <HAL_RCC_OscConfig+0x274>)
 80039c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0x234>
 80039ca:	e01b      	b.n	8003a04 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039cc:	4b09      	ldr	r3, [pc, #36]	@ (80039f4 <HAL_RCC_OscConfig+0x27c>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d2:	f7fe f8f3 	bl	8001bbc <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d8:	e00e      	b.n	80039f8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039da:	f7fe f8ef 	bl	8001bbc <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d907      	bls.n	80039f8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e15c      	b.n	8003ca6 <HAL_RCC_OscConfig+0x52e>
 80039ec:	40023800 	.word	0x40023800
 80039f0:	42470000 	.word	0x42470000
 80039f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f8:	4b8a      	ldr	r3, [pc, #552]	@ (8003c24 <HAL_RCC_OscConfig+0x4ac>)
 80039fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1ea      	bne.n	80039da <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 8097 	beq.w	8003b40 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a12:	2300      	movs	r3, #0
 8003a14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a16:	4b83      	ldr	r3, [pc, #524]	@ (8003c24 <HAL_RCC_OscConfig+0x4ac>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10f      	bne.n	8003a42 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a22:	2300      	movs	r3, #0
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	4b7f      	ldr	r3, [pc, #508]	@ (8003c24 <HAL_RCC_OscConfig+0x4ac>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2a:	4a7e      	ldr	r2, [pc, #504]	@ (8003c24 <HAL_RCC_OscConfig+0x4ac>)
 8003a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a32:	4b7c      	ldr	r3, [pc, #496]	@ (8003c24 <HAL_RCC_OscConfig+0x4ac>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a3a:	60bb      	str	r3, [r7, #8]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a42:	4b79      	ldr	r3, [pc, #484]	@ (8003c28 <HAL_RCC_OscConfig+0x4b0>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d118      	bne.n	8003a80 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a4e:	4b76      	ldr	r3, [pc, #472]	@ (8003c28 <HAL_RCC_OscConfig+0x4b0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a75      	ldr	r2, [pc, #468]	@ (8003c28 <HAL_RCC_OscConfig+0x4b0>)
 8003a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a5a:	f7fe f8af 	bl	8001bbc <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a62:	f7fe f8ab 	bl	8001bbc <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e118      	b.n	8003ca6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a74:	4b6c      	ldr	r3, [pc, #432]	@ (8003c28 <HAL_RCC_OscConfig+0x4b0>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0f0      	beq.n	8003a62 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d106      	bne.n	8003a96 <HAL_RCC_OscConfig+0x31e>
 8003a88:	4b66      	ldr	r3, [pc, #408]	@ (8003c24 <HAL_RCC_OscConfig+0x4ac>)
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8c:	4a65      	ldr	r2, [pc, #404]	@ (8003c24 <HAL_RCC_OscConfig+0x4ac>)
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a94:	e01c      	b.n	8003ad0 <HAL_RCC_OscConfig+0x358>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b05      	cmp	r3, #5
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x340>
 8003a9e:	4b61      	ldr	r3, [pc, #388]	@ (8003c24 <HAL_RCC_OscConfig+0x4ac>)
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa2:	4a60      	ldr	r2, [pc, #384]	@ (8003c24 <HAL_RCC_OscConfig+0x4ac>)
 8003aa4:	f043 0304 	orr.w	r3, r3, #4
 8003aa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aaa:	4b5e      	ldr	r3, [pc, #376]	@ (8003c24 <HAL_RCC_OscConfig+0x4ac>)
 8003aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aae:	4a5d      	ldr	r2, [pc, #372]	@ (8003c24 <HAL_RCC_OscConfig+0x4ac>)
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ab6:	e00b      	b.n	8003ad0 <HAL_RCC_OscConfig+0x358>
 8003ab8:	4b5a      	ldr	r3, [pc, #360]	@ (8003c24 <HAL_RCC_OscConfig+0x4ac>)
 8003aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003abc:	4a59      	ldr	r2, [pc, #356]	@ (8003c24 <HAL_RCC_OscConfig+0x4ac>)
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ac4:	4b57      	ldr	r3, [pc, #348]	@ (8003c24 <HAL_RCC_OscConfig+0x4ac>)
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac8:	4a56      	ldr	r2, [pc, #344]	@ (8003c24 <HAL_RCC_OscConfig+0x4ac>)
 8003aca:	f023 0304 	bic.w	r3, r3, #4
 8003ace:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d015      	beq.n	8003b04 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad8:	f7fe f870 	bl	8001bbc <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ade:	e00a      	b.n	8003af6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae0:	f7fe f86c 	bl	8001bbc <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e0d7      	b.n	8003ca6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af6:	4b4b      	ldr	r3, [pc, #300]	@ (8003c24 <HAL_RCC_OscConfig+0x4ac>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0ee      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x368>
 8003b02:	e014      	b.n	8003b2e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b04:	f7fe f85a 	bl	8001bbc <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0c:	f7fe f856 	bl	8001bbc <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e0c1      	b.n	8003ca6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b22:	4b40      	ldr	r3, [pc, #256]	@ (8003c24 <HAL_RCC_OscConfig+0x4ac>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1ee      	bne.n	8003b0c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b2e:	7dfb      	ldrb	r3, [r7, #23]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d105      	bne.n	8003b40 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b34:	4b3b      	ldr	r3, [pc, #236]	@ (8003c24 <HAL_RCC_OscConfig+0x4ac>)
 8003b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b38:	4a3a      	ldr	r2, [pc, #232]	@ (8003c24 <HAL_RCC_OscConfig+0x4ac>)
 8003b3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b3e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 80ad 	beq.w	8003ca4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b4a:	4b36      	ldr	r3, [pc, #216]	@ (8003c24 <HAL_RCC_OscConfig+0x4ac>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d060      	beq.n	8003c18 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d145      	bne.n	8003bea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5e:	4b33      	ldr	r3, [pc, #204]	@ (8003c2c <HAL_RCC_OscConfig+0x4b4>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b64:	f7fe f82a 	bl	8001bbc <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6c:	f7fe f826 	bl	8001bbc <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e093      	b.n	8003ca6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7e:	4b29      	ldr	r3, [pc, #164]	@ (8003c24 <HAL_RCC_OscConfig+0x4ac>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69da      	ldr	r2, [r3, #28]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b98:	019b      	lsls	r3, r3, #6
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba0:	085b      	lsrs	r3, r3, #1
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	041b      	lsls	r3, r3, #16
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bac:	061b      	lsls	r3, r3, #24
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb4:	071b      	lsls	r3, r3, #28
 8003bb6:	491b      	ldr	r1, [pc, #108]	@ (8003c24 <HAL_RCC_OscConfig+0x4ac>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8003c2c <HAL_RCC_OscConfig+0x4b4>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc2:	f7fd fffb 	bl	8001bbc <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bca:	f7fd fff7 	bl	8001bbc <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e064      	b.n	8003ca6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bdc:	4b11      	ldr	r3, [pc, #68]	@ (8003c24 <HAL_RCC_OscConfig+0x4ac>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0f0      	beq.n	8003bca <HAL_RCC_OscConfig+0x452>
 8003be8:	e05c      	b.n	8003ca4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bea:	4b10      	ldr	r3, [pc, #64]	@ (8003c2c <HAL_RCC_OscConfig+0x4b4>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf0:	f7fd ffe4 	bl	8001bbc <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf8:	f7fd ffe0 	bl	8001bbc <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e04d      	b.n	8003ca6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0a:	4b06      	ldr	r3, [pc, #24]	@ (8003c24 <HAL_RCC_OscConfig+0x4ac>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f0      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x480>
 8003c16:	e045      	b.n	8003ca4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d107      	bne.n	8003c30 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e040      	b.n	8003ca6 <HAL_RCC_OscConfig+0x52e>
 8003c24:	40023800 	.word	0x40023800
 8003c28:	40007000 	.word	0x40007000
 8003c2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c30:	4b1f      	ldr	r3, [pc, #124]	@ (8003cb0 <HAL_RCC_OscConfig+0x538>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d030      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d129      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d122      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c60:	4013      	ands	r3, r2
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d119      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c76:	085b      	lsrs	r3, r3, #1
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d10f      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d107      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40023800 	.word	0x40023800

08003cb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e042      	b.n	8003d4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7fc fdb0 	bl	8000840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2224      	movs	r2, #36	@ 0x24
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f973 	bl	8003fe4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695a      	ldr	r2, [r3, #20]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08a      	sub	sp, #40	@ 0x28
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	603b      	str	r3, [r7, #0]
 8003d60:	4613      	mov	r3, r2
 8003d62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d175      	bne.n	8003e60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_UART_Transmit+0x2c>
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e06e      	b.n	8003e62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2221      	movs	r2, #33	@ 0x21
 8003d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d92:	f7fd ff13 	bl	8001bbc <HAL_GetTick>
 8003d96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	88fa      	ldrh	r2, [r7, #6]
 8003d9c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	88fa      	ldrh	r2, [r7, #6]
 8003da2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dac:	d108      	bne.n	8003dc0 <HAL_UART_Transmit+0x6c>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d104      	bne.n	8003dc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	61bb      	str	r3, [r7, #24]
 8003dbe:	e003      	b.n	8003dc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003dc8:	e02e      	b.n	8003e28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2180      	movs	r1, #128	@ 0x80
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 f848 	bl	8003e6a <UART_WaitOnFlagUntilTimeout>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d005      	beq.n	8003dec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e03a      	b.n	8003e62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10b      	bne.n	8003e0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	3302      	adds	r3, #2
 8003e06:	61bb      	str	r3, [r7, #24]
 8003e08:	e007      	b.n	8003e1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	781a      	ldrb	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	3301      	adds	r3, #1
 8003e18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1cb      	bne.n	8003dca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	2140      	movs	r1, #64	@ 0x40
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f814 	bl	8003e6a <UART_WaitOnFlagUntilTimeout>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e006      	b.n	8003e62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	e000      	b.n	8003e62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e60:	2302      	movs	r3, #2
  }
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3720      	adds	r7, #32
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b086      	sub	sp, #24
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	603b      	str	r3, [r7, #0]
 8003e76:	4613      	mov	r3, r2
 8003e78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e7a:	e03b      	b.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e82:	d037      	beq.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e84:	f7fd fe9a 	bl	8001bbc <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	6a3a      	ldr	r2, [r7, #32]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d302      	bcc.n	8003e9a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e03a      	b.n	8003f14 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d023      	beq.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2b80      	cmp	r3, #128	@ 0x80
 8003eb0:	d020      	beq.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b40      	cmp	r3, #64	@ 0x40
 8003eb6:	d01d      	beq.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b08      	cmp	r3, #8
 8003ec4:	d116      	bne.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f81d 	bl	8003f1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2208      	movs	r2, #8
 8003ee6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e00f      	b.n	8003f14 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	4013      	ands	r3, r2
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	bf0c      	ite	eq
 8003f04:	2301      	moveq	r3, #1
 8003f06:	2300      	movne	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d0b4      	beq.n	8003e7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b095      	sub	sp, #84	@ 0x54
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	330c      	adds	r3, #12
 8003f42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f44:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e5      	bne.n	8003f24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3314      	adds	r3, #20
 8003f5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f023 0301 	bic.w	r3, r3, #1
 8003f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3314      	adds	r3, #20
 8003f76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f80:	e841 2300 	strex	r3, r2, [r1]
 8003f84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e5      	bne.n	8003f58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d119      	bne.n	8003fc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	330c      	adds	r3, #12
 8003f9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	e853 3f00 	ldrex	r3, [r3]
 8003fa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f023 0310 	bic.w	r3, r3, #16
 8003faa:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	330c      	adds	r3, #12
 8003fb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fb4:	61ba      	str	r2, [r7, #24]
 8003fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb8:	6979      	ldr	r1, [r7, #20]
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	e841 2300 	strex	r3, r2, [r1]
 8003fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1e5      	bne.n	8003f94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003fd6:	bf00      	nop
 8003fd8:	3754      	adds	r7, #84	@ 0x54
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
	...

08003fe4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fe8:	b0c0      	sub	sp, #256	@ 0x100
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004000:	68d9      	ldr	r1, [r3, #12]
 8004002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	ea40 0301 	orr.w	r3, r0, r1
 800400c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800400e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	431a      	orrs	r2, r3
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	431a      	orrs	r2, r3
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800403c:	f021 010c 	bic.w	r1, r1, #12
 8004040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800404a:	430b      	orrs	r3, r1
 800404c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800404e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800405a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405e:	6999      	ldr	r1, [r3, #24]
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	ea40 0301 	orr.w	r3, r0, r1
 800406a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4b8f      	ldr	r3, [pc, #572]	@ (80042b0 <UART_SetConfig+0x2cc>)
 8004074:	429a      	cmp	r2, r3
 8004076:	d005      	beq.n	8004084 <UART_SetConfig+0xa0>
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4b8d      	ldr	r3, [pc, #564]	@ (80042b4 <UART_SetConfig+0x2d0>)
 8004080:	429a      	cmp	r2, r3
 8004082:	d104      	bne.n	800408e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004084:	f7ff f9ba 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 8004088:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800408c:	e003      	b.n	8004096 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800408e:	f7ff f9a1 	bl	80033d4 <HAL_RCC_GetPCLK1Freq>
 8004092:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040a0:	f040 810c 	bne.w	80042bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040a8:	2200      	movs	r2, #0
 80040aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80040b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80040b6:	4622      	mov	r2, r4
 80040b8:	462b      	mov	r3, r5
 80040ba:	1891      	adds	r1, r2, r2
 80040bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80040be:	415b      	adcs	r3, r3
 80040c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040c6:	4621      	mov	r1, r4
 80040c8:	eb12 0801 	adds.w	r8, r2, r1
 80040cc:	4629      	mov	r1, r5
 80040ce:	eb43 0901 	adc.w	r9, r3, r1
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	f04f 0300 	mov.w	r3, #0
 80040da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040e6:	4690      	mov	r8, r2
 80040e8:	4699      	mov	r9, r3
 80040ea:	4623      	mov	r3, r4
 80040ec:	eb18 0303 	adds.w	r3, r8, r3
 80040f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80040f4:	462b      	mov	r3, r5
 80040f6:	eb49 0303 	adc.w	r3, r9, r3
 80040fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800410a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800410e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004112:	460b      	mov	r3, r1
 8004114:	18db      	adds	r3, r3, r3
 8004116:	653b      	str	r3, [r7, #80]	@ 0x50
 8004118:	4613      	mov	r3, r2
 800411a:	eb42 0303 	adc.w	r3, r2, r3
 800411e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004120:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004124:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004128:	f7fc f8d2 	bl	80002d0 <__aeabi_uldivmod>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4b61      	ldr	r3, [pc, #388]	@ (80042b8 <UART_SetConfig+0x2d4>)
 8004132:	fba3 2302 	umull	r2, r3, r3, r2
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	011c      	lsls	r4, r3, #4
 800413a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800413e:	2200      	movs	r2, #0
 8004140:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004144:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004148:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800414c:	4642      	mov	r2, r8
 800414e:	464b      	mov	r3, r9
 8004150:	1891      	adds	r1, r2, r2
 8004152:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004154:	415b      	adcs	r3, r3
 8004156:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004158:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800415c:	4641      	mov	r1, r8
 800415e:	eb12 0a01 	adds.w	sl, r2, r1
 8004162:	4649      	mov	r1, r9
 8004164:	eb43 0b01 	adc.w	fp, r3, r1
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004174:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004178:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800417c:	4692      	mov	sl, r2
 800417e:	469b      	mov	fp, r3
 8004180:	4643      	mov	r3, r8
 8004182:	eb1a 0303 	adds.w	r3, sl, r3
 8004186:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800418a:	464b      	mov	r3, r9
 800418c:	eb4b 0303 	adc.w	r3, fp, r3
 8004190:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041a8:	460b      	mov	r3, r1
 80041aa:	18db      	adds	r3, r3, r3
 80041ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80041ae:	4613      	mov	r3, r2
 80041b0:	eb42 0303 	adc.w	r3, r2, r3
 80041b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80041ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80041be:	f7fc f887 	bl	80002d0 <__aeabi_uldivmod>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4611      	mov	r1, r2
 80041c8:	4b3b      	ldr	r3, [pc, #236]	@ (80042b8 <UART_SetConfig+0x2d4>)
 80041ca:	fba3 2301 	umull	r2, r3, r3, r1
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	2264      	movs	r2, #100	@ 0x64
 80041d2:	fb02 f303 	mul.w	r3, r2, r3
 80041d6:	1acb      	subs	r3, r1, r3
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80041de:	4b36      	ldr	r3, [pc, #216]	@ (80042b8 <UART_SetConfig+0x2d4>)
 80041e0:	fba3 2302 	umull	r2, r3, r3, r2
 80041e4:	095b      	lsrs	r3, r3, #5
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80041ec:	441c      	add	r4, r3
 80041ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80041fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004200:	4642      	mov	r2, r8
 8004202:	464b      	mov	r3, r9
 8004204:	1891      	adds	r1, r2, r2
 8004206:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004208:	415b      	adcs	r3, r3
 800420a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800420c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004210:	4641      	mov	r1, r8
 8004212:	1851      	adds	r1, r2, r1
 8004214:	6339      	str	r1, [r7, #48]	@ 0x30
 8004216:	4649      	mov	r1, r9
 8004218:	414b      	adcs	r3, r1
 800421a:	637b      	str	r3, [r7, #52]	@ 0x34
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004228:	4659      	mov	r1, fp
 800422a:	00cb      	lsls	r3, r1, #3
 800422c:	4651      	mov	r1, sl
 800422e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004232:	4651      	mov	r1, sl
 8004234:	00ca      	lsls	r2, r1, #3
 8004236:	4610      	mov	r0, r2
 8004238:	4619      	mov	r1, r3
 800423a:	4603      	mov	r3, r0
 800423c:	4642      	mov	r2, r8
 800423e:	189b      	adds	r3, r3, r2
 8004240:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004244:	464b      	mov	r3, r9
 8004246:	460a      	mov	r2, r1
 8004248:	eb42 0303 	adc.w	r3, r2, r3
 800424c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800425c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004260:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004264:	460b      	mov	r3, r1
 8004266:	18db      	adds	r3, r3, r3
 8004268:	62bb      	str	r3, [r7, #40]	@ 0x28
 800426a:	4613      	mov	r3, r2
 800426c:	eb42 0303 	adc.w	r3, r2, r3
 8004270:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004272:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004276:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800427a:	f7fc f829 	bl	80002d0 <__aeabi_uldivmod>
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4b0d      	ldr	r3, [pc, #52]	@ (80042b8 <UART_SetConfig+0x2d4>)
 8004284:	fba3 1302 	umull	r1, r3, r3, r2
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	2164      	movs	r1, #100	@ 0x64
 800428c:	fb01 f303 	mul.w	r3, r1, r3
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	3332      	adds	r3, #50	@ 0x32
 8004296:	4a08      	ldr	r2, [pc, #32]	@ (80042b8 <UART_SetConfig+0x2d4>)
 8004298:	fba2 2303 	umull	r2, r3, r2, r3
 800429c:	095b      	lsrs	r3, r3, #5
 800429e:	f003 0207 	and.w	r2, r3, #7
 80042a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4422      	add	r2, r4
 80042aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042ac:	e106      	b.n	80044bc <UART_SetConfig+0x4d8>
 80042ae:	bf00      	nop
 80042b0:	40011000 	.word	0x40011000
 80042b4:	40011400 	.word	0x40011400
 80042b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042c0:	2200      	movs	r2, #0
 80042c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80042ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80042ce:	4642      	mov	r2, r8
 80042d0:	464b      	mov	r3, r9
 80042d2:	1891      	adds	r1, r2, r2
 80042d4:	6239      	str	r1, [r7, #32]
 80042d6:	415b      	adcs	r3, r3
 80042d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80042da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042de:	4641      	mov	r1, r8
 80042e0:	1854      	adds	r4, r2, r1
 80042e2:	4649      	mov	r1, r9
 80042e4:	eb43 0501 	adc.w	r5, r3, r1
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	00eb      	lsls	r3, r5, #3
 80042f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042f6:	00e2      	lsls	r2, r4, #3
 80042f8:	4614      	mov	r4, r2
 80042fa:	461d      	mov	r5, r3
 80042fc:	4643      	mov	r3, r8
 80042fe:	18e3      	adds	r3, r4, r3
 8004300:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004304:	464b      	mov	r3, r9
 8004306:	eb45 0303 	adc.w	r3, r5, r3
 800430a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800430e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800431a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800431e:	f04f 0200 	mov.w	r2, #0
 8004322:	f04f 0300 	mov.w	r3, #0
 8004326:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800432a:	4629      	mov	r1, r5
 800432c:	008b      	lsls	r3, r1, #2
 800432e:	4621      	mov	r1, r4
 8004330:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004334:	4621      	mov	r1, r4
 8004336:	008a      	lsls	r2, r1, #2
 8004338:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800433c:	f7fb ffc8 	bl	80002d0 <__aeabi_uldivmod>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4b60      	ldr	r3, [pc, #384]	@ (80044c8 <UART_SetConfig+0x4e4>)
 8004346:	fba3 2302 	umull	r2, r3, r3, r2
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	011c      	lsls	r4, r3, #4
 800434e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004352:	2200      	movs	r2, #0
 8004354:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004358:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800435c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004360:	4642      	mov	r2, r8
 8004362:	464b      	mov	r3, r9
 8004364:	1891      	adds	r1, r2, r2
 8004366:	61b9      	str	r1, [r7, #24]
 8004368:	415b      	adcs	r3, r3
 800436a:	61fb      	str	r3, [r7, #28]
 800436c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004370:	4641      	mov	r1, r8
 8004372:	1851      	adds	r1, r2, r1
 8004374:	6139      	str	r1, [r7, #16]
 8004376:	4649      	mov	r1, r9
 8004378:	414b      	adcs	r3, r1
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004388:	4659      	mov	r1, fp
 800438a:	00cb      	lsls	r3, r1, #3
 800438c:	4651      	mov	r1, sl
 800438e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004392:	4651      	mov	r1, sl
 8004394:	00ca      	lsls	r2, r1, #3
 8004396:	4610      	mov	r0, r2
 8004398:	4619      	mov	r1, r3
 800439a:	4603      	mov	r3, r0
 800439c:	4642      	mov	r2, r8
 800439e:	189b      	adds	r3, r3, r2
 80043a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043a4:	464b      	mov	r3, r9
 80043a6:	460a      	mov	r2, r1
 80043a8:	eb42 0303 	adc.w	r3, r2, r3
 80043ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80043c8:	4649      	mov	r1, r9
 80043ca:	008b      	lsls	r3, r1, #2
 80043cc:	4641      	mov	r1, r8
 80043ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043d2:	4641      	mov	r1, r8
 80043d4:	008a      	lsls	r2, r1, #2
 80043d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80043da:	f7fb ff79 	bl	80002d0 <__aeabi_uldivmod>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4611      	mov	r1, r2
 80043e4:	4b38      	ldr	r3, [pc, #224]	@ (80044c8 <UART_SetConfig+0x4e4>)
 80043e6:	fba3 2301 	umull	r2, r3, r3, r1
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	2264      	movs	r2, #100	@ 0x64
 80043ee:	fb02 f303 	mul.w	r3, r2, r3
 80043f2:	1acb      	subs	r3, r1, r3
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	3332      	adds	r3, #50	@ 0x32
 80043f8:	4a33      	ldr	r2, [pc, #204]	@ (80044c8 <UART_SetConfig+0x4e4>)
 80043fa:	fba2 2303 	umull	r2, r3, r2, r3
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004404:	441c      	add	r4, r3
 8004406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800440a:	2200      	movs	r2, #0
 800440c:	673b      	str	r3, [r7, #112]	@ 0x70
 800440e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004410:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004414:	4642      	mov	r2, r8
 8004416:	464b      	mov	r3, r9
 8004418:	1891      	adds	r1, r2, r2
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	415b      	adcs	r3, r3
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004424:	4641      	mov	r1, r8
 8004426:	1851      	adds	r1, r2, r1
 8004428:	6039      	str	r1, [r7, #0]
 800442a:	4649      	mov	r1, r9
 800442c:	414b      	adcs	r3, r1
 800442e:	607b      	str	r3, [r7, #4]
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800443c:	4659      	mov	r1, fp
 800443e:	00cb      	lsls	r3, r1, #3
 8004440:	4651      	mov	r1, sl
 8004442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004446:	4651      	mov	r1, sl
 8004448:	00ca      	lsls	r2, r1, #3
 800444a:	4610      	mov	r0, r2
 800444c:	4619      	mov	r1, r3
 800444e:	4603      	mov	r3, r0
 8004450:	4642      	mov	r2, r8
 8004452:	189b      	adds	r3, r3, r2
 8004454:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004456:	464b      	mov	r3, r9
 8004458:	460a      	mov	r2, r1
 800445a:	eb42 0303 	adc.w	r3, r2, r3
 800445e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	663b      	str	r3, [r7, #96]	@ 0x60
 800446a:	667a      	str	r2, [r7, #100]	@ 0x64
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004478:	4649      	mov	r1, r9
 800447a:	008b      	lsls	r3, r1, #2
 800447c:	4641      	mov	r1, r8
 800447e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004482:	4641      	mov	r1, r8
 8004484:	008a      	lsls	r2, r1, #2
 8004486:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800448a:	f7fb ff21 	bl	80002d0 <__aeabi_uldivmod>
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4b0d      	ldr	r3, [pc, #52]	@ (80044c8 <UART_SetConfig+0x4e4>)
 8004494:	fba3 1302 	umull	r1, r3, r3, r2
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	2164      	movs	r1, #100	@ 0x64
 800449c:	fb01 f303 	mul.w	r3, r1, r3
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	3332      	adds	r3, #50	@ 0x32
 80044a6:	4a08      	ldr	r2, [pc, #32]	@ (80044c8 <UART_SetConfig+0x4e4>)
 80044a8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	f003 020f 	and.w	r2, r3, #15
 80044b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4422      	add	r2, r4
 80044ba:	609a      	str	r2, [r3, #8]
}
 80044bc:	bf00      	nop
 80044be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80044c2:	46bd      	mov	sp, r7
 80044c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044c8:	51eb851f 	.word	0x51eb851f

080044cc <sniprintf>:
 80044cc:	b40c      	push	{r2, r3}
 80044ce:	b530      	push	{r4, r5, lr}
 80044d0:	4b18      	ldr	r3, [pc, #96]	@ (8004534 <sniprintf+0x68>)
 80044d2:	1e0c      	subs	r4, r1, #0
 80044d4:	681d      	ldr	r5, [r3, #0]
 80044d6:	b09d      	sub	sp, #116	@ 0x74
 80044d8:	da08      	bge.n	80044ec <sniprintf+0x20>
 80044da:	238b      	movs	r3, #139	@ 0x8b
 80044dc:	602b      	str	r3, [r5, #0]
 80044de:	f04f 30ff 	mov.w	r0, #4294967295
 80044e2:	b01d      	add	sp, #116	@ 0x74
 80044e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044e8:	b002      	add	sp, #8
 80044ea:	4770      	bx	lr
 80044ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80044f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80044f4:	f04f 0300 	mov.w	r3, #0
 80044f8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80044fa:	bf14      	ite	ne
 80044fc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004500:	4623      	moveq	r3, r4
 8004502:	9304      	str	r3, [sp, #16]
 8004504:	9307      	str	r3, [sp, #28]
 8004506:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800450a:	9002      	str	r0, [sp, #8]
 800450c:	9006      	str	r0, [sp, #24]
 800450e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004512:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004514:	ab21      	add	r3, sp, #132	@ 0x84
 8004516:	a902      	add	r1, sp, #8
 8004518:	4628      	mov	r0, r5
 800451a:	9301      	str	r3, [sp, #4]
 800451c:	f000 f9be 	bl	800489c <_svfiprintf_r>
 8004520:	1c43      	adds	r3, r0, #1
 8004522:	bfbc      	itt	lt
 8004524:	238b      	movlt	r3, #139	@ 0x8b
 8004526:	602b      	strlt	r3, [r5, #0]
 8004528:	2c00      	cmp	r4, #0
 800452a:	d0da      	beq.n	80044e2 <sniprintf+0x16>
 800452c:	9b02      	ldr	r3, [sp, #8]
 800452e:	2200      	movs	r2, #0
 8004530:	701a      	strb	r2, [r3, #0]
 8004532:	e7d6      	b.n	80044e2 <sniprintf+0x16>
 8004534:	2000000c 	.word	0x2000000c

08004538 <siprintf>:
 8004538:	b40e      	push	{r1, r2, r3}
 800453a:	b510      	push	{r4, lr}
 800453c:	b09d      	sub	sp, #116	@ 0x74
 800453e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004540:	9002      	str	r0, [sp, #8]
 8004542:	9006      	str	r0, [sp, #24]
 8004544:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004548:	480a      	ldr	r0, [pc, #40]	@ (8004574 <siprintf+0x3c>)
 800454a:	9107      	str	r1, [sp, #28]
 800454c:	9104      	str	r1, [sp, #16]
 800454e:	490a      	ldr	r1, [pc, #40]	@ (8004578 <siprintf+0x40>)
 8004550:	f853 2b04 	ldr.w	r2, [r3], #4
 8004554:	9105      	str	r1, [sp, #20]
 8004556:	2400      	movs	r4, #0
 8004558:	a902      	add	r1, sp, #8
 800455a:	6800      	ldr	r0, [r0, #0]
 800455c:	9301      	str	r3, [sp, #4]
 800455e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004560:	f000 f99c 	bl	800489c <_svfiprintf_r>
 8004564:	9b02      	ldr	r3, [sp, #8]
 8004566:	701c      	strb	r4, [r3, #0]
 8004568:	b01d      	add	sp, #116	@ 0x74
 800456a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800456e:	b003      	add	sp, #12
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	2000000c 	.word	0x2000000c
 8004578:	ffff0208 	.word	0xffff0208

0800457c <memset>:
 800457c:	4402      	add	r2, r0
 800457e:	4603      	mov	r3, r0
 8004580:	4293      	cmp	r3, r2
 8004582:	d100      	bne.n	8004586 <memset+0xa>
 8004584:	4770      	bx	lr
 8004586:	f803 1b01 	strb.w	r1, [r3], #1
 800458a:	e7f9      	b.n	8004580 <memset+0x4>

0800458c <__errno>:
 800458c:	4b01      	ldr	r3, [pc, #4]	@ (8004594 <__errno+0x8>)
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	2000000c 	.word	0x2000000c

08004598 <__libc_init_array>:
 8004598:	b570      	push	{r4, r5, r6, lr}
 800459a:	4d0d      	ldr	r5, [pc, #52]	@ (80045d0 <__libc_init_array+0x38>)
 800459c:	4c0d      	ldr	r4, [pc, #52]	@ (80045d4 <__libc_init_array+0x3c>)
 800459e:	1b64      	subs	r4, r4, r5
 80045a0:	10a4      	asrs	r4, r4, #2
 80045a2:	2600      	movs	r6, #0
 80045a4:	42a6      	cmp	r6, r4
 80045a6:	d109      	bne.n	80045bc <__libc_init_array+0x24>
 80045a8:	4d0b      	ldr	r5, [pc, #44]	@ (80045d8 <__libc_init_array+0x40>)
 80045aa:	4c0c      	ldr	r4, [pc, #48]	@ (80045dc <__libc_init_array+0x44>)
 80045ac:	f000 fc6c 	bl	8004e88 <_init>
 80045b0:	1b64      	subs	r4, r4, r5
 80045b2:	10a4      	asrs	r4, r4, #2
 80045b4:	2600      	movs	r6, #0
 80045b6:	42a6      	cmp	r6, r4
 80045b8:	d105      	bne.n	80045c6 <__libc_init_array+0x2e>
 80045ba:	bd70      	pop	{r4, r5, r6, pc}
 80045bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c0:	4798      	blx	r3
 80045c2:	3601      	adds	r6, #1
 80045c4:	e7ee      	b.n	80045a4 <__libc_init_array+0xc>
 80045c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ca:	4798      	blx	r3
 80045cc:	3601      	adds	r6, #1
 80045ce:	e7f2      	b.n	80045b6 <__libc_init_array+0x1e>
 80045d0:	08005000 	.word	0x08005000
 80045d4:	08005000 	.word	0x08005000
 80045d8:	08005000 	.word	0x08005000
 80045dc:	08005004 	.word	0x08005004

080045e0 <__retarget_lock_acquire_recursive>:
 80045e0:	4770      	bx	lr

080045e2 <__retarget_lock_release_recursive>:
 80045e2:	4770      	bx	lr

080045e4 <strcpy>:
 80045e4:	4603      	mov	r3, r0
 80045e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045ea:	f803 2b01 	strb.w	r2, [r3], #1
 80045ee:	2a00      	cmp	r2, #0
 80045f0:	d1f9      	bne.n	80045e6 <strcpy+0x2>
 80045f2:	4770      	bx	lr

080045f4 <_free_r>:
 80045f4:	b538      	push	{r3, r4, r5, lr}
 80045f6:	4605      	mov	r5, r0
 80045f8:	2900      	cmp	r1, #0
 80045fa:	d041      	beq.n	8004680 <_free_r+0x8c>
 80045fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004600:	1f0c      	subs	r4, r1, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	bfb8      	it	lt
 8004606:	18e4      	addlt	r4, r4, r3
 8004608:	f000 f8e0 	bl	80047cc <__malloc_lock>
 800460c:	4a1d      	ldr	r2, [pc, #116]	@ (8004684 <_free_r+0x90>)
 800460e:	6813      	ldr	r3, [r2, #0]
 8004610:	b933      	cbnz	r3, 8004620 <_free_r+0x2c>
 8004612:	6063      	str	r3, [r4, #4]
 8004614:	6014      	str	r4, [r2, #0]
 8004616:	4628      	mov	r0, r5
 8004618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800461c:	f000 b8dc 	b.w	80047d8 <__malloc_unlock>
 8004620:	42a3      	cmp	r3, r4
 8004622:	d908      	bls.n	8004636 <_free_r+0x42>
 8004624:	6820      	ldr	r0, [r4, #0]
 8004626:	1821      	adds	r1, r4, r0
 8004628:	428b      	cmp	r3, r1
 800462a:	bf01      	itttt	eq
 800462c:	6819      	ldreq	r1, [r3, #0]
 800462e:	685b      	ldreq	r3, [r3, #4]
 8004630:	1809      	addeq	r1, r1, r0
 8004632:	6021      	streq	r1, [r4, #0]
 8004634:	e7ed      	b.n	8004612 <_free_r+0x1e>
 8004636:	461a      	mov	r2, r3
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	b10b      	cbz	r3, 8004640 <_free_r+0x4c>
 800463c:	42a3      	cmp	r3, r4
 800463e:	d9fa      	bls.n	8004636 <_free_r+0x42>
 8004640:	6811      	ldr	r1, [r2, #0]
 8004642:	1850      	adds	r0, r2, r1
 8004644:	42a0      	cmp	r0, r4
 8004646:	d10b      	bne.n	8004660 <_free_r+0x6c>
 8004648:	6820      	ldr	r0, [r4, #0]
 800464a:	4401      	add	r1, r0
 800464c:	1850      	adds	r0, r2, r1
 800464e:	4283      	cmp	r3, r0
 8004650:	6011      	str	r1, [r2, #0]
 8004652:	d1e0      	bne.n	8004616 <_free_r+0x22>
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	6053      	str	r3, [r2, #4]
 800465a:	4408      	add	r0, r1
 800465c:	6010      	str	r0, [r2, #0]
 800465e:	e7da      	b.n	8004616 <_free_r+0x22>
 8004660:	d902      	bls.n	8004668 <_free_r+0x74>
 8004662:	230c      	movs	r3, #12
 8004664:	602b      	str	r3, [r5, #0]
 8004666:	e7d6      	b.n	8004616 <_free_r+0x22>
 8004668:	6820      	ldr	r0, [r4, #0]
 800466a:	1821      	adds	r1, r4, r0
 800466c:	428b      	cmp	r3, r1
 800466e:	bf04      	itt	eq
 8004670:	6819      	ldreq	r1, [r3, #0]
 8004672:	685b      	ldreq	r3, [r3, #4]
 8004674:	6063      	str	r3, [r4, #4]
 8004676:	bf04      	itt	eq
 8004678:	1809      	addeq	r1, r1, r0
 800467a:	6021      	streq	r1, [r4, #0]
 800467c:	6054      	str	r4, [r2, #4]
 800467e:	e7ca      	b.n	8004616 <_free_r+0x22>
 8004680:	bd38      	pop	{r3, r4, r5, pc}
 8004682:	bf00      	nop
 8004684:	20000488 	.word	0x20000488

08004688 <sbrk_aligned>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	4e0f      	ldr	r6, [pc, #60]	@ (80046c8 <sbrk_aligned+0x40>)
 800468c:	460c      	mov	r4, r1
 800468e:	6831      	ldr	r1, [r6, #0]
 8004690:	4605      	mov	r5, r0
 8004692:	b911      	cbnz	r1, 800469a <sbrk_aligned+0x12>
 8004694:	f000 fba4 	bl	8004de0 <_sbrk_r>
 8004698:	6030      	str	r0, [r6, #0]
 800469a:	4621      	mov	r1, r4
 800469c:	4628      	mov	r0, r5
 800469e:	f000 fb9f 	bl	8004de0 <_sbrk_r>
 80046a2:	1c43      	adds	r3, r0, #1
 80046a4:	d103      	bne.n	80046ae <sbrk_aligned+0x26>
 80046a6:	f04f 34ff 	mov.w	r4, #4294967295
 80046aa:	4620      	mov	r0, r4
 80046ac:	bd70      	pop	{r4, r5, r6, pc}
 80046ae:	1cc4      	adds	r4, r0, #3
 80046b0:	f024 0403 	bic.w	r4, r4, #3
 80046b4:	42a0      	cmp	r0, r4
 80046b6:	d0f8      	beq.n	80046aa <sbrk_aligned+0x22>
 80046b8:	1a21      	subs	r1, r4, r0
 80046ba:	4628      	mov	r0, r5
 80046bc:	f000 fb90 	bl	8004de0 <_sbrk_r>
 80046c0:	3001      	adds	r0, #1
 80046c2:	d1f2      	bne.n	80046aa <sbrk_aligned+0x22>
 80046c4:	e7ef      	b.n	80046a6 <sbrk_aligned+0x1e>
 80046c6:	bf00      	nop
 80046c8:	20000484 	.word	0x20000484

080046cc <_malloc_r>:
 80046cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046d0:	1ccd      	adds	r5, r1, #3
 80046d2:	f025 0503 	bic.w	r5, r5, #3
 80046d6:	3508      	adds	r5, #8
 80046d8:	2d0c      	cmp	r5, #12
 80046da:	bf38      	it	cc
 80046dc:	250c      	movcc	r5, #12
 80046de:	2d00      	cmp	r5, #0
 80046e0:	4606      	mov	r6, r0
 80046e2:	db01      	blt.n	80046e8 <_malloc_r+0x1c>
 80046e4:	42a9      	cmp	r1, r5
 80046e6:	d904      	bls.n	80046f2 <_malloc_r+0x26>
 80046e8:	230c      	movs	r3, #12
 80046ea:	6033      	str	r3, [r6, #0]
 80046ec:	2000      	movs	r0, #0
 80046ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047c8 <_malloc_r+0xfc>
 80046f6:	f000 f869 	bl	80047cc <__malloc_lock>
 80046fa:	f8d8 3000 	ldr.w	r3, [r8]
 80046fe:	461c      	mov	r4, r3
 8004700:	bb44      	cbnz	r4, 8004754 <_malloc_r+0x88>
 8004702:	4629      	mov	r1, r5
 8004704:	4630      	mov	r0, r6
 8004706:	f7ff ffbf 	bl	8004688 <sbrk_aligned>
 800470a:	1c43      	adds	r3, r0, #1
 800470c:	4604      	mov	r4, r0
 800470e:	d158      	bne.n	80047c2 <_malloc_r+0xf6>
 8004710:	f8d8 4000 	ldr.w	r4, [r8]
 8004714:	4627      	mov	r7, r4
 8004716:	2f00      	cmp	r7, #0
 8004718:	d143      	bne.n	80047a2 <_malloc_r+0xd6>
 800471a:	2c00      	cmp	r4, #0
 800471c:	d04b      	beq.n	80047b6 <_malloc_r+0xea>
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	4639      	mov	r1, r7
 8004722:	4630      	mov	r0, r6
 8004724:	eb04 0903 	add.w	r9, r4, r3
 8004728:	f000 fb5a 	bl	8004de0 <_sbrk_r>
 800472c:	4581      	cmp	r9, r0
 800472e:	d142      	bne.n	80047b6 <_malloc_r+0xea>
 8004730:	6821      	ldr	r1, [r4, #0]
 8004732:	1a6d      	subs	r5, r5, r1
 8004734:	4629      	mov	r1, r5
 8004736:	4630      	mov	r0, r6
 8004738:	f7ff ffa6 	bl	8004688 <sbrk_aligned>
 800473c:	3001      	adds	r0, #1
 800473e:	d03a      	beq.n	80047b6 <_malloc_r+0xea>
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	442b      	add	r3, r5
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	f8d8 3000 	ldr.w	r3, [r8]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	bb62      	cbnz	r2, 80047a8 <_malloc_r+0xdc>
 800474e:	f8c8 7000 	str.w	r7, [r8]
 8004752:	e00f      	b.n	8004774 <_malloc_r+0xa8>
 8004754:	6822      	ldr	r2, [r4, #0]
 8004756:	1b52      	subs	r2, r2, r5
 8004758:	d420      	bmi.n	800479c <_malloc_r+0xd0>
 800475a:	2a0b      	cmp	r2, #11
 800475c:	d917      	bls.n	800478e <_malloc_r+0xc2>
 800475e:	1961      	adds	r1, r4, r5
 8004760:	42a3      	cmp	r3, r4
 8004762:	6025      	str	r5, [r4, #0]
 8004764:	bf18      	it	ne
 8004766:	6059      	strne	r1, [r3, #4]
 8004768:	6863      	ldr	r3, [r4, #4]
 800476a:	bf08      	it	eq
 800476c:	f8c8 1000 	streq.w	r1, [r8]
 8004770:	5162      	str	r2, [r4, r5]
 8004772:	604b      	str	r3, [r1, #4]
 8004774:	4630      	mov	r0, r6
 8004776:	f000 f82f 	bl	80047d8 <__malloc_unlock>
 800477a:	f104 000b 	add.w	r0, r4, #11
 800477e:	1d23      	adds	r3, r4, #4
 8004780:	f020 0007 	bic.w	r0, r0, #7
 8004784:	1ac2      	subs	r2, r0, r3
 8004786:	bf1c      	itt	ne
 8004788:	1a1b      	subne	r3, r3, r0
 800478a:	50a3      	strne	r3, [r4, r2]
 800478c:	e7af      	b.n	80046ee <_malloc_r+0x22>
 800478e:	6862      	ldr	r2, [r4, #4]
 8004790:	42a3      	cmp	r3, r4
 8004792:	bf0c      	ite	eq
 8004794:	f8c8 2000 	streq.w	r2, [r8]
 8004798:	605a      	strne	r2, [r3, #4]
 800479a:	e7eb      	b.n	8004774 <_malloc_r+0xa8>
 800479c:	4623      	mov	r3, r4
 800479e:	6864      	ldr	r4, [r4, #4]
 80047a0:	e7ae      	b.n	8004700 <_malloc_r+0x34>
 80047a2:	463c      	mov	r4, r7
 80047a4:	687f      	ldr	r7, [r7, #4]
 80047a6:	e7b6      	b.n	8004716 <_malloc_r+0x4a>
 80047a8:	461a      	mov	r2, r3
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	42a3      	cmp	r3, r4
 80047ae:	d1fb      	bne.n	80047a8 <_malloc_r+0xdc>
 80047b0:	2300      	movs	r3, #0
 80047b2:	6053      	str	r3, [r2, #4]
 80047b4:	e7de      	b.n	8004774 <_malloc_r+0xa8>
 80047b6:	230c      	movs	r3, #12
 80047b8:	6033      	str	r3, [r6, #0]
 80047ba:	4630      	mov	r0, r6
 80047bc:	f000 f80c 	bl	80047d8 <__malloc_unlock>
 80047c0:	e794      	b.n	80046ec <_malloc_r+0x20>
 80047c2:	6005      	str	r5, [r0, #0]
 80047c4:	e7d6      	b.n	8004774 <_malloc_r+0xa8>
 80047c6:	bf00      	nop
 80047c8:	20000488 	.word	0x20000488

080047cc <__malloc_lock>:
 80047cc:	4801      	ldr	r0, [pc, #4]	@ (80047d4 <__malloc_lock+0x8>)
 80047ce:	f7ff bf07 	b.w	80045e0 <__retarget_lock_acquire_recursive>
 80047d2:	bf00      	nop
 80047d4:	20000480 	.word	0x20000480

080047d8 <__malloc_unlock>:
 80047d8:	4801      	ldr	r0, [pc, #4]	@ (80047e0 <__malloc_unlock+0x8>)
 80047da:	f7ff bf02 	b.w	80045e2 <__retarget_lock_release_recursive>
 80047de:	bf00      	nop
 80047e0:	20000480 	.word	0x20000480

080047e4 <__ssputs_r>:
 80047e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e8:	688e      	ldr	r6, [r1, #8]
 80047ea:	461f      	mov	r7, r3
 80047ec:	42be      	cmp	r6, r7
 80047ee:	680b      	ldr	r3, [r1, #0]
 80047f0:	4682      	mov	sl, r0
 80047f2:	460c      	mov	r4, r1
 80047f4:	4690      	mov	r8, r2
 80047f6:	d82d      	bhi.n	8004854 <__ssputs_r+0x70>
 80047f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004800:	d026      	beq.n	8004850 <__ssputs_r+0x6c>
 8004802:	6965      	ldr	r5, [r4, #20]
 8004804:	6909      	ldr	r1, [r1, #16]
 8004806:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800480a:	eba3 0901 	sub.w	r9, r3, r1
 800480e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004812:	1c7b      	adds	r3, r7, #1
 8004814:	444b      	add	r3, r9
 8004816:	106d      	asrs	r5, r5, #1
 8004818:	429d      	cmp	r5, r3
 800481a:	bf38      	it	cc
 800481c:	461d      	movcc	r5, r3
 800481e:	0553      	lsls	r3, r2, #21
 8004820:	d527      	bpl.n	8004872 <__ssputs_r+0x8e>
 8004822:	4629      	mov	r1, r5
 8004824:	f7ff ff52 	bl	80046cc <_malloc_r>
 8004828:	4606      	mov	r6, r0
 800482a:	b360      	cbz	r0, 8004886 <__ssputs_r+0xa2>
 800482c:	6921      	ldr	r1, [r4, #16]
 800482e:	464a      	mov	r2, r9
 8004830:	f000 fae6 	bl	8004e00 <memcpy>
 8004834:	89a3      	ldrh	r3, [r4, #12]
 8004836:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800483a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800483e:	81a3      	strh	r3, [r4, #12]
 8004840:	6126      	str	r6, [r4, #16]
 8004842:	6165      	str	r5, [r4, #20]
 8004844:	444e      	add	r6, r9
 8004846:	eba5 0509 	sub.w	r5, r5, r9
 800484a:	6026      	str	r6, [r4, #0]
 800484c:	60a5      	str	r5, [r4, #8]
 800484e:	463e      	mov	r6, r7
 8004850:	42be      	cmp	r6, r7
 8004852:	d900      	bls.n	8004856 <__ssputs_r+0x72>
 8004854:	463e      	mov	r6, r7
 8004856:	6820      	ldr	r0, [r4, #0]
 8004858:	4632      	mov	r2, r6
 800485a:	4641      	mov	r1, r8
 800485c:	f000 faa6 	bl	8004dac <memmove>
 8004860:	68a3      	ldr	r3, [r4, #8]
 8004862:	1b9b      	subs	r3, r3, r6
 8004864:	60a3      	str	r3, [r4, #8]
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	4433      	add	r3, r6
 800486a:	6023      	str	r3, [r4, #0]
 800486c:	2000      	movs	r0, #0
 800486e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004872:	462a      	mov	r2, r5
 8004874:	f000 fad2 	bl	8004e1c <_realloc_r>
 8004878:	4606      	mov	r6, r0
 800487a:	2800      	cmp	r0, #0
 800487c:	d1e0      	bne.n	8004840 <__ssputs_r+0x5c>
 800487e:	6921      	ldr	r1, [r4, #16]
 8004880:	4650      	mov	r0, sl
 8004882:	f7ff feb7 	bl	80045f4 <_free_r>
 8004886:	230c      	movs	r3, #12
 8004888:	f8ca 3000 	str.w	r3, [sl]
 800488c:	89a3      	ldrh	r3, [r4, #12]
 800488e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004892:	81a3      	strh	r3, [r4, #12]
 8004894:	f04f 30ff 	mov.w	r0, #4294967295
 8004898:	e7e9      	b.n	800486e <__ssputs_r+0x8a>
	...

0800489c <_svfiprintf_r>:
 800489c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a0:	4698      	mov	r8, r3
 80048a2:	898b      	ldrh	r3, [r1, #12]
 80048a4:	061b      	lsls	r3, r3, #24
 80048a6:	b09d      	sub	sp, #116	@ 0x74
 80048a8:	4607      	mov	r7, r0
 80048aa:	460d      	mov	r5, r1
 80048ac:	4614      	mov	r4, r2
 80048ae:	d510      	bpl.n	80048d2 <_svfiprintf_r+0x36>
 80048b0:	690b      	ldr	r3, [r1, #16]
 80048b2:	b973      	cbnz	r3, 80048d2 <_svfiprintf_r+0x36>
 80048b4:	2140      	movs	r1, #64	@ 0x40
 80048b6:	f7ff ff09 	bl	80046cc <_malloc_r>
 80048ba:	6028      	str	r0, [r5, #0]
 80048bc:	6128      	str	r0, [r5, #16]
 80048be:	b930      	cbnz	r0, 80048ce <_svfiprintf_r+0x32>
 80048c0:	230c      	movs	r3, #12
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	f04f 30ff 	mov.w	r0, #4294967295
 80048c8:	b01d      	add	sp, #116	@ 0x74
 80048ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ce:	2340      	movs	r3, #64	@ 0x40
 80048d0:	616b      	str	r3, [r5, #20]
 80048d2:	2300      	movs	r3, #0
 80048d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80048d6:	2320      	movs	r3, #32
 80048d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80048e0:	2330      	movs	r3, #48	@ 0x30
 80048e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004a80 <_svfiprintf_r+0x1e4>
 80048e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80048ea:	f04f 0901 	mov.w	r9, #1
 80048ee:	4623      	mov	r3, r4
 80048f0:	469a      	mov	sl, r3
 80048f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048f6:	b10a      	cbz	r2, 80048fc <_svfiprintf_r+0x60>
 80048f8:	2a25      	cmp	r2, #37	@ 0x25
 80048fa:	d1f9      	bne.n	80048f0 <_svfiprintf_r+0x54>
 80048fc:	ebba 0b04 	subs.w	fp, sl, r4
 8004900:	d00b      	beq.n	800491a <_svfiprintf_r+0x7e>
 8004902:	465b      	mov	r3, fp
 8004904:	4622      	mov	r2, r4
 8004906:	4629      	mov	r1, r5
 8004908:	4638      	mov	r0, r7
 800490a:	f7ff ff6b 	bl	80047e4 <__ssputs_r>
 800490e:	3001      	adds	r0, #1
 8004910:	f000 80a7 	beq.w	8004a62 <_svfiprintf_r+0x1c6>
 8004914:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004916:	445a      	add	r2, fp
 8004918:	9209      	str	r2, [sp, #36]	@ 0x24
 800491a:	f89a 3000 	ldrb.w	r3, [sl]
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 809f 	beq.w	8004a62 <_svfiprintf_r+0x1c6>
 8004924:	2300      	movs	r3, #0
 8004926:	f04f 32ff 	mov.w	r2, #4294967295
 800492a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800492e:	f10a 0a01 	add.w	sl, sl, #1
 8004932:	9304      	str	r3, [sp, #16]
 8004934:	9307      	str	r3, [sp, #28]
 8004936:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800493a:	931a      	str	r3, [sp, #104]	@ 0x68
 800493c:	4654      	mov	r4, sl
 800493e:	2205      	movs	r2, #5
 8004940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004944:	484e      	ldr	r0, [pc, #312]	@ (8004a80 <_svfiprintf_r+0x1e4>)
 8004946:	f7fb fc73 	bl	8000230 <memchr>
 800494a:	9a04      	ldr	r2, [sp, #16]
 800494c:	b9d8      	cbnz	r0, 8004986 <_svfiprintf_r+0xea>
 800494e:	06d0      	lsls	r0, r2, #27
 8004950:	bf44      	itt	mi
 8004952:	2320      	movmi	r3, #32
 8004954:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004958:	0711      	lsls	r1, r2, #28
 800495a:	bf44      	itt	mi
 800495c:	232b      	movmi	r3, #43	@ 0x2b
 800495e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004962:	f89a 3000 	ldrb.w	r3, [sl]
 8004966:	2b2a      	cmp	r3, #42	@ 0x2a
 8004968:	d015      	beq.n	8004996 <_svfiprintf_r+0xfa>
 800496a:	9a07      	ldr	r2, [sp, #28]
 800496c:	4654      	mov	r4, sl
 800496e:	2000      	movs	r0, #0
 8004970:	f04f 0c0a 	mov.w	ip, #10
 8004974:	4621      	mov	r1, r4
 8004976:	f811 3b01 	ldrb.w	r3, [r1], #1
 800497a:	3b30      	subs	r3, #48	@ 0x30
 800497c:	2b09      	cmp	r3, #9
 800497e:	d94b      	bls.n	8004a18 <_svfiprintf_r+0x17c>
 8004980:	b1b0      	cbz	r0, 80049b0 <_svfiprintf_r+0x114>
 8004982:	9207      	str	r2, [sp, #28]
 8004984:	e014      	b.n	80049b0 <_svfiprintf_r+0x114>
 8004986:	eba0 0308 	sub.w	r3, r0, r8
 800498a:	fa09 f303 	lsl.w	r3, r9, r3
 800498e:	4313      	orrs	r3, r2
 8004990:	9304      	str	r3, [sp, #16]
 8004992:	46a2      	mov	sl, r4
 8004994:	e7d2      	b.n	800493c <_svfiprintf_r+0xa0>
 8004996:	9b03      	ldr	r3, [sp, #12]
 8004998:	1d19      	adds	r1, r3, #4
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	9103      	str	r1, [sp, #12]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	bfbb      	ittet	lt
 80049a2:	425b      	neglt	r3, r3
 80049a4:	f042 0202 	orrlt.w	r2, r2, #2
 80049a8:	9307      	strge	r3, [sp, #28]
 80049aa:	9307      	strlt	r3, [sp, #28]
 80049ac:	bfb8      	it	lt
 80049ae:	9204      	strlt	r2, [sp, #16]
 80049b0:	7823      	ldrb	r3, [r4, #0]
 80049b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80049b4:	d10a      	bne.n	80049cc <_svfiprintf_r+0x130>
 80049b6:	7863      	ldrb	r3, [r4, #1]
 80049b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80049ba:	d132      	bne.n	8004a22 <_svfiprintf_r+0x186>
 80049bc:	9b03      	ldr	r3, [sp, #12]
 80049be:	1d1a      	adds	r2, r3, #4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	9203      	str	r2, [sp, #12]
 80049c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049c8:	3402      	adds	r4, #2
 80049ca:	9305      	str	r3, [sp, #20]
 80049cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004a90 <_svfiprintf_r+0x1f4>
 80049d0:	7821      	ldrb	r1, [r4, #0]
 80049d2:	2203      	movs	r2, #3
 80049d4:	4650      	mov	r0, sl
 80049d6:	f7fb fc2b 	bl	8000230 <memchr>
 80049da:	b138      	cbz	r0, 80049ec <_svfiprintf_r+0x150>
 80049dc:	9b04      	ldr	r3, [sp, #16]
 80049de:	eba0 000a 	sub.w	r0, r0, sl
 80049e2:	2240      	movs	r2, #64	@ 0x40
 80049e4:	4082      	lsls	r2, r0
 80049e6:	4313      	orrs	r3, r2
 80049e8:	3401      	adds	r4, #1
 80049ea:	9304      	str	r3, [sp, #16]
 80049ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049f0:	4824      	ldr	r0, [pc, #144]	@ (8004a84 <_svfiprintf_r+0x1e8>)
 80049f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80049f6:	2206      	movs	r2, #6
 80049f8:	f7fb fc1a 	bl	8000230 <memchr>
 80049fc:	2800      	cmp	r0, #0
 80049fe:	d036      	beq.n	8004a6e <_svfiprintf_r+0x1d2>
 8004a00:	4b21      	ldr	r3, [pc, #132]	@ (8004a88 <_svfiprintf_r+0x1ec>)
 8004a02:	bb1b      	cbnz	r3, 8004a4c <_svfiprintf_r+0x1b0>
 8004a04:	9b03      	ldr	r3, [sp, #12]
 8004a06:	3307      	adds	r3, #7
 8004a08:	f023 0307 	bic.w	r3, r3, #7
 8004a0c:	3308      	adds	r3, #8
 8004a0e:	9303      	str	r3, [sp, #12]
 8004a10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a12:	4433      	add	r3, r6
 8004a14:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a16:	e76a      	b.n	80048ee <_svfiprintf_r+0x52>
 8004a18:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a1c:	460c      	mov	r4, r1
 8004a1e:	2001      	movs	r0, #1
 8004a20:	e7a8      	b.n	8004974 <_svfiprintf_r+0xd8>
 8004a22:	2300      	movs	r3, #0
 8004a24:	3401      	adds	r4, #1
 8004a26:	9305      	str	r3, [sp, #20]
 8004a28:	4619      	mov	r1, r3
 8004a2a:	f04f 0c0a 	mov.w	ip, #10
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a34:	3a30      	subs	r2, #48	@ 0x30
 8004a36:	2a09      	cmp	r2, #9
 8004a38:	d903      	bls.n	8004a42 <_svfiprintf_r+0x1a6>
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0c6      	beq.n	80049cc <_svfiprintf_r+0x130>
 8004a3e:	9105      	str	r1, [sp, #20]
 8004a40:	e7c4      	b.n	80049cc <_svfiprintf_r+0x130>
 8004a42:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a46:	4604      	mov	r4, r0
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e7f0      	b.n	8004a2e <_svfiprintf_r+0x192>
 8004a4c:	ab03      	add	r3, sp, #12
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	462a      	mov	r2, r5
 8004a52:	4b0e      	ldr	r3, [pc, #56]	@ (8004a8c <_svfiprintf_r+0x1f0>)
 8004a54:	a904      	add	r1, sp, #16
 8004a56:	4638      	mov	r0, r7
 8004a58:	f3af 8000 	nop.w
 8004a5c:	1c42      	adds	r2, r0, #1
 8004a5e:	4606      	mov	r6, r0
 8004a60:	d1d6      	bne.n	8004a10 <_svfiprintf_r+0x174>
 8004a62:	89ab      	ldrh	r3, [r5, #12]
 8004a64:	065b      	lsls	r3, r3, #25
 8004a66:	f53f af2d 	bmi.w	80048c4 <_svfiprintf_r+0x28>
 8004a6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a6c:	e72c      	b.n	80048c8 <_svfiprintf_r+0x2c>
 8004a6e:	ab03      	add	r3, sp, #12
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	462a      	mov	r2, r5
 8004a74:	4b05      	ldr	r3, [pc, #20]	@ (8004a8c <_svfiprintf_r+0x1f0>)
 8004a76:	a904      	add	r1, sp, #16
 8004a78:	4638      	mov	r0, r7
 8004a7a:	f000 f879 	bl	8004b70 <_printf_i>
 8004a7e:	e7ed      	b.n	8004a5c <_svfiprintf_r+0x1c0>
 8004a80:	08004fc4 	.word	0x08004fc4
 8004a84:	08004fce 	.word	0x08004fce
 8004a88:	00000000 	.word	0x00000000
 8004a8c:	080047e5 	.word	0x080047e5
 8004a90:	08004fca 	.word	0x08004fca

08004a94 <_printf_common>:
 8004a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a98:	4616      	mov	r6, r2
 8004a9a:	4698      	mov	r8, r3
 8004a9c:	688a      	ldr	r2, [r1, #8]
 8004a9e:	690b      	ldr	r3, [r1, #16]
 8004aa0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	bfb8      	it	lt
 8004aa8:	4613      	movlt	r3, r2
 8004aaa:	6033      	str	r3, [r6, #0]
 8004aac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ab0:	4607      	mov	r7, r0
 8004ab2:	460c      	mov	r4, r1
 8004ab4:	b10a      	cbz	r2, 8004aba <_printf_common+0x26>
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	6033      	str	r3, [r6, #0]
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	0699      	lsls	r1, r3, #26
 8004abe:	bf42      	ittt	mi
 8004ac0:	6833      	ldrmi	r3, [r6, #0]
 8004ac2:	3302      	addmi	r3, #2
 8004ac4:	6033      	strmi	r3, [r6, #0]
 8004ac6:	6825      	ldr	r5, [r4, #0]
 8004ac8:	f015 0506 	ands.w	r5, r5, #6
 8004acc:	d106      	bne.n	8004adc <_printf_common+0x48>
 8004ace:	f104 0a19 	add.w	sl, r4, #25
 8004ad2:	68e3      	ldr	r3, [r4, #12]
 8004ad4:	6832      	ldr	r2, [r6, #0]
 8004ad6:	1a9b      	subs	r3, r3, r2
 8004ad8:	42ab      	cmp	r3, r5
 8004ada:	dc26      	bgt.n	8004b2a <_printf_common+0x96>
 8004adc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ae0:	6822      	ldr	r2, [r4, #0]
 8004ae2:	3b00      	subs	r3, #0
 8004ae4:	bf18      	it	ne
 8004ae6:	2301      	movne	r3, #1
 8004ae8:	0692      	lsls	r2, r2, #26
 8004aea:	d42b      	bmi.n	8004b44 <_printf_common+0xb0>
 8004aec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004af0:	4641      	mov	r1, r8
 8004af2:	4638      	mov	r0, r7
 8004af4:	47c8      	blx	r9
 8004af6:	3001      	adds	r0, #1
 8004af8:	d01e      	beq.n	8004b38 <_printf_common+0xa4>
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	6922      	ldr	r2, [r4, #16]
 8004afe:	f003 0306 	and.w	r3, r3, #6
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	bf02      	ittt	eq
 8004b06:	68e5      	ldreq	r5, [r4, #12]
 8004b08:	6833      	ldreq	r3, [r6, #0]
 8004b0a:	1aed      	subeq	r5, r5, r3
 8004b0c:	68a3      	ldr	r3, [r4, #8]
 8004b0e:	bf0c      	ite	eq
 8004b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b14:	2500      	movne	r5, #0
 8004b16:	4293      	cmp	r3, r2
 8004b18:	bfc4      	itt	gt
 8004b1a:	1a9b      	subgt	r3, r3, r2
 8004b1c:	18ed      	addgt	r5, r5, r3
 8004b1e:	2600      	movs	r6, #0
 8004b20:	341a      	adds	r4, #26
 8004b22:	42b5      	cmp	r5, r6
 8004b24:	d11a      	bne.n	8004b5c <_printf_common+0xc8>
 8004b26:	2000      	movs	r0, #0
 8004b28:	e008      	b.n	8004b3c <_printf_common+0xa8>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	4652      	mov	r2, sl
 8004b2e:	4641      	mov	r1, r8
 8004b30:	4638      	mov	r0, r7
 8004b32:	47c8      	blx	r9
 8004b34:	3001      	adds	r0, #1
 8004b36:	d103      	bne.n	8004b40 <_printf_common+0xac>
 8004b38:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b40:	3501      	adds	r5, #1
 8004b42:	e7c6      	b.n	8004ad2 <_printf_common+0x3e>
 8004b44:	18e1      	adds	r1, r4, r3
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	2030      	movs	r0, #48	@ 0x30
 8004b4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b4e:	4422      	add	r2, r4
 8004b50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b58:	3302      	adds	r3, #2
 8004b5a:	e7c7      	b.n	8004aec <_printf_common+0x58>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	4622      	mov	r2, r4
 8004b60:	4641      	mov	r1, r8
 8004b62:	4638      	mov	r0, r7
 8004b64:	47c8      	blx	r9
 8004b66:	3001      	adds	r0, #1
 8004b68:	d0e6      	beq.n	8004b38 <_printf_common+0xa4>
 8004b6a:	3601      	adds	r6, #1
 8004b6c:	e7d9      	b.n	8004b22 <_printf_common+0x8e>
	...

08004b70 <_printf_i>:
 8004b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b74:	7e0f      	ldrb	r7, [r1, #24]
 8004b76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b78:	2f78      	cmp	r7, #120	@ 0x78
 8004b7a:	4691      	mov	r9, r2
 8004b7c:	4680      	mov	r8, r0
 8004b7e:	460c      	mov	r4, r1
 8004b80:	469a      	mov	sl, r3
 8004b82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b86:	d807      	bhi.n	8004b98 <_printf_i+0x28>
 8004b88:	2f62      	cmp	r7, #98	@ 0x62
 8004b8a:	d80a      	bhi.n	8004ba2 <_printf_i+0x32>
 8004b8c:	2f00      	cmp	r7, #0
 8004b8e:	f000 80d1 	beq.w	8004d34 <_printf_i+0x1c4>
 8004b92:	2f58      	cmp	r7, #88	@ 0x58
 8004b94:	f000 80b8 	beq.w	8004d08 <_printf_i+0x198>
 8004b98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ba0:	e03a      	b.n	8004c18 <_printf_i+0xa8>
 8004ba2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ba6:	2b15      	cmp	r3, #21
 8004ba8:	d8f6      	bhi.n	8004b98 <_printf_i+0x28>
 8004baa:	a101      	add	r1, pc, #4	@ (adr r1, 8004bb0 <_printf_i+0x40>)
 8004bac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bb0:	08004c09 	.word	0x08004c09
 8004bb4:	08004c1d 	.word	0x08004c1d
 8004bb8:	08004b99 	.word	0x08004b99
 8004bbc:	08004b99 	.word	0x08004b99
 8004bc0:	08004b99 	.word	0x08004b99
 8004bc4:	08004b99 	.word	0x08004b99
 8004bc8:	08004c1d 	.word	0x08004c1d
 8004bcc:	08004b99 	.word	0x08004b99
 8004bd0:	08004b99 	.word	0x08004b99
 8004bd4:	08004b99 	.word	0x08004b99
 8004bd8:	08004b99 	.word	0x08004b99
 8004bdc:	08004d1b 	.word	0x08004d1b
 8004be0:	08004c47 	.word	0x08004c47
 8004be4:	08004cd5 	.word	0x08004cd5
 8004be8:	08004b99 	.word	0x08004b99
 8004bec:	08004b99 	.word	0x08004b99
 8004bf0:	08004d3d 	.word	0x08004d3d
 8004bf4:	08004b99 	.word	0x08004b99
 8004bf8:	08004c47 	.word	0x08004c47
 8004bfc:	08004b99 	.word	0x08004b99
 8004c00:	08004b99 	.word	0x08004b99
 8004c04:	08004cdd 	.word	0x08004cdd
 8004c08:	6833      	ldr	r3, [r6, #0]
 8004c0a:	1d1a      	adds	r2, r3, #4
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6032      	str	r2, [r6, #0]
 8004c10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e09c      	b.n	8004d56 <_printf_i+0x1e6>
 8004c1c:	6833      	ldr	r3, [r6, #0]
 8004c1e:	6820      	ldr	r0, [r4, #0]
 8004c20:	1d19      	adds	r1, r3, #4
 8004c22:	6031      	str	r1, [r6, #0]
 8004c24:	0606      	lsls	r6, r0, #24
 8004c26:	d501      	bpl.n	8004c2c <_printf_i+0xbc>
 8004c28:	681d      	ldr	r5, [r3, #0]
 8004c2a:	e003      	b.n	8004c34 <_printf_i+0xc4>
 8004c2c:	0645      	lsls	r5, r0, #25
 8004c2e:	d5fb      	bpl.n	8004c28 <_printf_i+0xb8>
 8004c30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c34:	2d00      	cmp	r5, #0
 8004c36:	da03      	bge.n	8004c40 <_printf_i+0xd0>
 8004c38:	232d      	movs	r3, #45	@ 0x2d
 8004c3a:	426d      	negs	r5, r5
 8004c3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c40:	4858      	ldr	r0, [pc, #352]	@ (8004da4 <_printf_i+0x234>)
 8004c42:	230a      	movs	r3, #10
 8004c44:	e011      	b.n	8004c6a <_printf_i+0xfa>
 8004c46:	6821      	ldr	r1, [r4, #0]
 8004c48:	6833      	ldr	r3, [r6, #0]
 8004c4a:	0608      	lsls	r0, r1, #24
 8004c4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c50:	d402      	bmi.n	8004c58 <_printf_i+0xe8>
 8004c52:	0649      	lsls	r1, r1, #25
 8004c54:	bf48      	it	mi
 8004c56:	b2ad      	uxthmi	r5, r5
 8004c58:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c5a:	4852      	ldr	r0, [pc, #328]	@ (8004da4 <_printf_i+0x234>)
 8004c5c:	6033      	str	r3, [r6, #0]
 8004c5e:	bf14      	ite	ne
 8004c60:	230a      	movne	r3, #10
 8004c62:	2308      	moveq	r3, #8
 8004c64:	2100      	movs	r1, #0
 8004c66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c6a:	6866      	ldr	r6, [r4, #4]
 8004c6c:	60a6      	str	r6, [r4, #8]
 8004c6e:	2e00      	cmp	r6, #0
 8004c70:	db05      	blt.n	8004c7e <_printf_i+0x10e>
 8004c72:	6821      	ldr	r1, [r4, #0]
 8004c74:	432e      	orrs	r6, r5
 8004c76:	f021 0104 	bic.w	r1, r1, #4
 8004c7a:	6021      	str	r1, [r4, #0]
 8004c7c:	d04b      	beq.n	8004d16 <_printf_i+0x1a6>
 8004c7e:	4616      	mov	r6, r2
 8004c80:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c84:	fb03 5711 	mls	r7, r3, r1, r5
 8004c88:	5dc7      	ldrb	r7, [r0, r7]
 8004c8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c8e:	462f      	mov	r7, r5
 8004c90:	42bb      	cmp	r3, r7
 8004c92:	460d      	mov	r5, r1
 8004c94:	d9f4      	bls.n	8004c80 <_printf_i+0x110>
 8004c96:	2b08      	cmp	r3, #8
 8004c98:	d10b      	bne.n	8004cb2 <_printf_i+0x142>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	07df      	lsls	r7, r3, #31
 8004c9e:	d508      	bpl.n	8004cb2 <_printf_i+0x142>
 8004ca0:	6923      	ldr	r3, [r4, #16]
 8004ca2:	6861      	ldr	r1, [r4, #4]
 8004ca4:	4299      	cmp	r1, r3
 8004ca6:	bfde      	ittt	le
 8004ca8:	2330      	movle	r3, #48	@ 0x30
 8004caa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cb2:	1b92      	subs	r2, r2, r6
 8004cb4:	6122      	str	r2, [r4, #16]
 8004cb6:	f8cd a000 	str.w	sl, [sp]
 8004cba:	464b      	mov	r3, r9
 8004cbc:	aa03      	add	r2, sp, #12
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	4640      	mov	r0, r8
 8004cc2:	f7ff fee7 	bl	8004a94 <_printf_common>
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	d14a      	bne.n	8004d60 <_printf_i+0x1f0>
 8004cca:	f04f 30ff 	mov.w	r0, #4294967295
 8004cce:	b004      	add	sp, #16
 8004cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	f043 0320 	orr.w	r3, r3, #32
 8004cda:	6023      	str	r3, [r4, #0]
 8004cdc:	4832      	ldr	r0, [pc, #200]	@ (8004da8 <_printf_i+0x238>)
 8004cde:	2778      	movs	r7, #120	@ 0x78
 8004ce0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	6831      	ldr	r1, [r6, #0]
 8004ce8:	061f      	lsls	r7, r3, #24
 8004cea:	f851 5b04 	ldr.w	r5, [r1], #4
 8004cee:	d402      	bmi.n	8004cf6 <_printf_i+0x186>
 8004cf0:	065f      	lsls	r7, r3, #25
 8004cf2:	bf48      	it	mi
 8004cf4:	b2ad      	uxthmi	r5, r5
 8004cf6:	6031      	str	r1, [r6, #0]
 8004cf8:	07d9      	lsls	r1, r3, #31
 8004cfa:	bf44      	itt	mi
 8004cfc:	f043 0320 	orrmi.w	r3, r3, #32
 8004d00:	6023      	strmi	r3, [r4, #0]
 8004d02:	b11d      	cbz	r5, 8004d0c <_printf_i+0x19c>
 8004d04:	2310      	movs	r3, #16
 8004d06:	e7ad      	b.n	8004c64 <_printf_i+0xf4>
 8004d08:	4826      	ldr	r0, [pc, #152]	@ (8004da4 <_printf_i+0x234>)
 8004d0a:	e7e9      	b.n	8004ce0 <_printf_i+0x170>
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	f023 0320 	bic.w	r3, r3, #32
 8004d12:	6023      	str	r3, [r4, #0]
 8004d14:	e7f6      	b.n	8004d04 <_printf_i+0x194>
 8004d16:	4616      	mov	r6, r2
 8004d18:	e7bd      	b.n	8004c96 <_printf_i+0x126>
 8004d1a:	6833      	ldr	r3, [r6, #0]
 8004d1c:	6825      	ldr	r5, [r4, #0]
 8004d1e:	6961      	ldr	r1, [r4, #20]
 8004d20:	1d18      	adds	r0, r3, #4
 8004d22:	6030      	str	r0, [r6, #0]
 8004d24:	062e      	lsls	r6, r5, #24
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	d501      	bpl.n	8004d2e <_printf_i+0x1be>
 8004d2a:	6019      	str	r1, [r3, #0]
 8004d2c:	e002      	b.n	8004d34 <_printf_i+0x1c4>
 8004d2e:	0668      	lsls	r0, r5, #25
 8004d30:	d5fb      	bpl.n	8004d2a <_printf_i+0x1ba>
 8004d32:	8019      	strh	r1, [r3, #0]
 8004d34:	2300      	movs	r3, #0
 8004d36:	6123      	str	r3, [r4, #16]
 8004d38:	4616      	mov	r6, r2
 8004d3a:	e7bc      	b.n	8004cb6 <_printf_i+0x146>
 8004d3c:	6833      	ldr	r3, [r6, #0]
 8004d3e:	1d1a      	adds	r2, r3, #4
 8004d40:	6032      	str	r2, [r6, #0]
 8004d42:	681e      	ldr	r6, [r3, #0]
 8004d44:	6862      	ldr	r2, [r4, #4]
 8004d46:	2100      	movs	r1, #0
 8004d48:	4630      	mov	r0, r6
 8004d4a:	f7fb fa71 	bl	8000230 <memchr>
 8004d4e:	b108      	cbz	r0, 8004d54 <_printf_i+0x1e4>
 8004d50:	1b80      	subs	r0, r0, r6
 8004d52:	6060      	str	r0, [r4, #4]
 8004d54:	6863      	ldr	r3, [r4, #4]
 8004d56:	6123      	str	r3, [r4, #16]
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d5e:	e7aa      	b.n	8004cb6 <_printf_i+0x146>
 8004d60:	6923      	ldr	r3, [r4, #16]
 8004d62:	4632      	mov	r2, r6
 8004d64:	4649      	mov	r1, r9
 8004d66:	4640      	mov	r0, r8
 8004d68:	47d0      	blx	sl
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	d0ad      	beq.n	8004cca <_printf_i+0x15a>
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	079b      	lsls	r3, r3, #30
 8004d72:	d413      	bmi.n	8004d9c <_printf_i+0x22c>
 8004d74:	68e0      	ldr	r0, [r4, #12]
 8004d76:	9b03      	ldr	r3, [sp, #12]
 8004d78:	4298      	cmp	r0, r3
 8004d7a:	bfb8      	it	lt
 8004d7c:	4618      	movlt	r0, r3
 8004d7e:	e7a6      	b.n	8004cce <_printf_i+0x15e>
 8004d80:	2301      	movs	r3, #1
 8004d82:	4632      	mov	r2, r6
 8004d84:	4649      	mov	r1, r9
 8004d86:	4640      	mov	r0, r8
 8004d88:	47d0      	blx	sl
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	d09d      	beq.n	8004cca <_printf_i+0x15a>
 8004d8e:	3501      	adds	r5, #1
 8004d90:	68e3      	ldr	r3, [r4, #12]
 8004d92:	9903      	ldr	r1, [sp, #12]
 8004d94:	1a5b      	subs	r3, r3, r1
 8004d96:	42ab      	cmp	r3, r5
 8004d98:	dcf2      	bgt.n	8004d80 <_printf_i+0x210>
 8004d9a:	e7eb      	b.n	8004d74 <_printf_i+0x204>
 8004d9c:	2500      	movs	r5, #0
 8004d9e:	f104 0619 	add.w	r6, r4, #25
 8004da2:	e7f5      	b.n	8004d90 <_printf_i+0x220>
 8004da4:	08004fd5 	.word	0x08004fd5
 8004da8:	08004fe6 	.word	0x08004fe6

08004dac <memmove>:
 8004dac:	4288      	cmp	r0, r1
 8004dae:	b510      	push	{r4, lr}
 8004db0:	eb01 0402 	add.w	r4, r1, r2
 8004db4:	d902      	bls.n	8004dbc <memmove+0x10>
 8004db6:	4284      	cmp	r4, r0
 8004db8:	4623      	mov	r3, r4
 8004dba:	d807      	bhi.n	8004dcc <memmove+0x20>
 8004dbc:	1e43      	subs	r3, r0, #1
 8004dbe:	42a1      	cmp	r1, r4
 8004dc0:	d008      	beq.n	8004dd4 <memmove+0x28>
 8004dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dca:	e7f8      	b.n	8004dbe <memmove+0x12>
 8004dcc:	4402      	add	r2, r0
 8004dce:	4601      	mov	r1, r0
 8004dd0:	428a      	cmp	r2, r1
 8004dd2:	d100      	bne.n	8004dd6 <memmove+0x2a>
 8004dd4:	bd10      	pop	{r4, pc}
 8004dd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dde:	e7f7      	b.n	8004dd0 <memmove+0x24>

08004de0 <_sbrk_r>:
 8004de0:	b538      	push	{r3, r4, r5, lr}
 8004de2:	4d06      	ldr	r5, [pc, #24]	@ (8004dfc <_sbrk_r+0x1c>)
 8004de4:	2300      	movs	r3, #0
 8004de6:	4604      	mov	r4, r0
 8004de8:	4608      	mov	r0, r1
 8004dea:	602b      	str	r3, [r5, #0]
 8004dec:	f7fb fdb2 	bl	8000954 <_sbrk>
 8004df0:	1c43      	adds	r3, r0, #1
 8004df2:	d102      	bne.n	8004dfa <_sbrk_r+0x1a>
 8004df4:	682b      	ldr	r3, [r5, #0]
 8004df6:	b103      	cbz	r3, 8004dfa <_sbrk_r+0x1a>
 8004df8:	6023      	str	r3, [r4, #0]
 8004dfa:	bd38      	pop	{r3, r4, r5, pc}
 8004dfc:	2000047c 	.word	0x2000047c

08004e00 <memcpy>:
 8004e00:	440a      	add	r2, r1
 8004e02:	4291      	cmp	r1, r2
 8004e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e08:	d100      	bne.n	8004e0c <memcpy+0xc>
 8004e0a:	4770      	bx	lr
 8004e0c:	b510      	push	{r4, lr}
 8004e0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e16:	4291      	cmp	r1, r2
 8004e18:	d1f9      	bne.n	8004e0e <memcpy+0xe>
 8004e1a:	bd10      	pop	{r4, pc}

08004e1c <_realloc_r>:
 8004e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e20:	4607      	mov	r7, r0
 8004e22:	4614      	mov	r4, r2
 8004e24:	460d      	mov	r5, r1
 8004e26:	b921      	cbnz	r1, 8004e32 <_realloc_r+0x16>
 8004e28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e2c:	4611      	mov	r1, r2
 8004e2e:	f7ff bc4d 	b.w	80046cc <_malloc_r>
 8004e32:	b92a      	cbnz	r2, 8004e40 <_realloc_r+0x24>
 8004e34:	f7ff fbde 	bl	80045f4 <_free_r>
 8004e38:	4625      	mov	r5, r4
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e40:	f000 f81a 	bl	8004e78 <_malloc_usable_size_r>
 8004e44:	4284      	cmp	r4, r0
 8004e46:	4606      	mov	r6, r0
 8004e48:	d802      	bhi.n	8004e50 <_realloc_r+0x34>
 8004e4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e4e:	d8f4      	bhi.n	8004e3a <_realloc_r+0x1e>
 8004e50:	4621      	mov	r1, r4
 8004e52:	4638      	mov	r0, r7
 8004e54:	f7ff fc3a 	bl	80046cc <_malloc_r>
 8004e58:	4680      	mov	r8, r0
 8004e5a:	b908      	cbnz	r0, 8004e60 <_realloc_r+0x44>
 8004e5c:	4645      	mov	r5, r8
 8004e5e:	e7ec      	b.n	8004e3a <_realloc_r+0x1e>
 8004e60:	42b4      	cmp	r4, r6
 8004e62:	4622      	mov	r2, r4
 8004e64:	4629      	mov	r1, r5
 8004e66:	bf28      	it	cs
 8004e68:	4632      	movcs	r2, r6
 8004e6a:	f7ff ffc9 	bl	8004e00 <memcpy>
 8004e6e:	4629      	mov	r1, r5
 8004e70:	4638      	mov	r0, r7
 8004e72:	f7ff fbbf 	bl	80045f4 <_free_r>
 8004e76:	e7f1      	b.n	8004e5c <_realloc_r+0x40>

08004e78 <_malloc_usable_size_r>:
 8004e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e7c:	1f18      	subs	r0, r3, #4
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	bfbc      	itt	lt
 8004e82:	580b      	ldrlt	r3, [r1, r0]
 8004e84:	18c0      	addlt	r0, r0, r3
 8004e86:	4770      	bx	lr

08004e88 <_init>:
 8004e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8a:	bf00      	nop
 8004e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8e:	bc08      	pop	{r3}
 8004e90:	469e      	mov	lr, r3
 8004e92:	4770      	bx	lr

08004e94 <_fini>:
 8004e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e96:	bf00      	nop
 8004e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9a:	bc08      	pop	{r3}
 8004e9c:	469e      	mov	lr, r3
 8004e9e:	4770      	bx	lr
