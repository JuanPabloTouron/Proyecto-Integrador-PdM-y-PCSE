
TPFinal2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c40  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08004e10  08004e10  00005e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f58  08004f58  00006078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004f58  08004f58  00005f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f60  08004f60  00006078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f60  08004f60  00005f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f64  08004f64  00005f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08004f68  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000078  08004fe0  00006078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  08004fe0  000063f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c24c  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002219  00000000  00000000  000122f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  00014510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ca  00000000  00000000  00015070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000225e5  00000000  00000000  0001593a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ce7  00000000  00000000  00037f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb5a2  00000000  00000000  00048c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001141a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032dc  00000000  00000000  001141ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001174c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004df8 	.word	0x08004df8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08004df8 	.word	0x08004df8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 fbc4 	bl	8001d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f810 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_USART2_UART_Init();
 80005e8:	f000 f87a 	bl	80006e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  I2CInit();
 80005ec:	f001 fb38 	bl	8001c60 <I2CInit>
  ButtonsInit();
 80005f0:	f001 fa60 	bl	8001ab4 <ButtonsInit>
  AppInit();
 80005f4:	f000 fea4 	bl	8001340 <AppInit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  AppUpdate();
 80005f8:	f000 fece 	bl	8001398 <AppUpdate>
	  I2CDelay(100);
 80005fc:	2064      	movs	r0, #100	@ 0x64
 80005fe:	f001 fb23 	bl	8001c48 <I2CDelay>
	  AppUpdate();
 8000602:	bf00      	nop
 8000604:	e7f8      	b.n	80005f8 <main+0x1c>
	...

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	@ 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	2234      	movs	r2, #52	@ 0x34
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f003 ff70 	bl	80044fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b29      	ldr	r3, [pc, #164]	@ (80006d8 <SystemClock_Config+0xd0>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	4a28      	ldr	r2, [pc, #160]	@ (80006d8 <SystemClock_Config+0xd0>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	@ 0x40
 800063c:	4b26      	ldr	r3, [pc, #152]	@ (80006d8 <SystemClock_Config+0xd0>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000648:	2300      	movs	r3, #0
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	4b23      	ldr	r3, [pc, #140]	@ (80006dc <SystemClock_Config+0xd4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000654:	4a21      	ldr	r2, [pc, #132]	@ (80006dc <SystemClock_Config+0xd4>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <SystemClock_Config+0xd4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2310      	movs	r3, #16
 8000672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800067c:	2308      	movs	r3, #8
 800067e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000680:	2348      	movs	r3, #72	@ 0x48
 8000682:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800068c:	2302      	movs	r3, #2
 800068e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4618      	mov	r0, r3
 8000696:	f003 f9ad 	bl	80039f4 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006a0:	f000 f848 	bl	8000734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2102      	movs	r1, #2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 fed3 	bl	800346c <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006cc:	f000 f832 	bl	8000734 <Error_Handler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3750      	adds	r7, #80	@ 0x50
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e4:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	@ (8000730 <MX_USART2_UART_Init+0x50>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ea:	4b10      	ldr	r3, [pc, #64]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b09      	ldr	r3, [pc, #36]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b08      	ldr	r3, [pc, #32]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 8000718:	f003 fc0a 	bl	8003f30 <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000722:	f000 f807 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000094 	.word	0x20000094
 8000730:	40004400 	.word	0x40004400

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1){
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <Error_Handler+0x8>

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <HAL_MspInit+0x4c>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800074e:	4a0f      	ldr	r2, [pc, #60]	@ (800078c <HAL_MspInit+0x4c>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6453      	str	r3, [r2, #68]	@ 0x44
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <HAL_MspInit+0x4c>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <HAL_MspInit+0x4c>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076a:	4a08      	ldr	r2, [pc, #32]	@ (800078c <HAL_MspInit+0x4c>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000770:	6413      	str	r3, [r2, #64]	@ 0x40
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <HAL_MspInit+0x4c>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	@ 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a19      	ldr	r2, [pc, #100]	@ (8000814 <HAL_I2C_MspInit+0x84>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d12c      	bne.n	800080c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b18      	ldr	r3, [pc, #96]	@ (8000818 <HAL_I2C_MspInit+0x88>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a17      	ldr	r2, [pc, #92]	@ (8000818 <HAL_I2C_MspInit+0x88>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <HAL_I2C_MspInit+0x88>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d4:	2312      	movs	r3, #18
 80007d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d8:	2301      	movs	r3, #1
 80007da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007dc:	2303      	movs	r3, #3
 80007de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007e0:	2304      	movs	r3, #4
 80007e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	480c      	ldr	r0, [pc, #48]	@ (800081c <HAL_I2C_MspInit+0x8c>)
 80007ec:	f001 fc66 	bl	80020bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <HAL_I2C_MspInit+0x88>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f8:	4a07      	ldr	r2, [pc, #28]	@ (8000818 <HAL_I2C_MspInit+0x88>)
 80007fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000800:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <HAL_I2C_MspInit+0x88>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000804:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800080c:	bf00      	nop
 800080e:	3728      	adds	r7, #40	@ 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40005400 	.word	0x40005400
 8000818:	40023800 	.word	0x40023800
 800081c:	40020400 	.word	0x40020400

08000820 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	@ 0x28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a19      	ldr	r2, [pc, #100]	@ (80008a4 <HAL_UART_MspInit+0x84>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d12b      	bne.n	800089a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	4b18      	ldr	r3, [pc, #96]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084a:	4a17      	ldr	r2, [pc, #92]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 800084c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000850:	6413      	str	r3, [r2, #64]	@ 0x40
 8000852:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a10      	ldr	r2, [pc, #64]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800087a:	230c      	movs	r3, #12
 800087c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800088a:	2307      	movs	r3, #7
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	@ (80008ac <HAL_UART_MspInit+0x8c>)
 8000896:	f001 fc11 	bl	80020bc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800089a:	bf00      	nop
 800089c:	3728      	adds	r7, #40	@ 0x28
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40004400 	.word	0x40004400
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020000 	.word	0x40020000

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <NMI_Handler+0x4>

080008b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <HardFault_Handler+0x4>

080008c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <MemManage_Handler+0x4>

080008c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000906:	f001 fa83 	bl	8001e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}

0800090e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RIGHT_PIN);
 8000912:	2040      	movs	r0, #64	@ 0x40
 8000914:	f001 fd7e 	bl	8002414 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_PIN);
 8000918:	2080      	movs	r0, #128	@ 0x80
 800091a:	f001 fd7b 	bl	8002414 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_PIN);
 800091e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000922:	f001 fd77 	bl	8002414 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENTER_PIN);
 8000926:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800092a:	f001 fd73 	bl	8002414 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800093c:	4a14      	ldr	r2, [pc, #80]	@ (8000990 <_sbrk+0x5c>)
 800093e:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <_sbrk+0x60>)
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000948:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <_sbrk+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d102      	bne.n	8000956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000950:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <_sbrk+0x64>)
 8000952:	4a12      	ldr	r2, [pc, #72]	@ (800099c <_sbrk+0x68>)
 8000954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <_sbrk+0x64>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	429a      	cmp	r2, r3
 8000962:	d207      	bcs.n	8000974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000964:	f003 fdd2 	bl	800450c <__errno>
 8000968:	4603      	mov	r3, r0
 800096a:	220c      	movs	r2, #12
 800096c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800096e:	f04f 33ff 	mov.w	r3, #4294967295
 8000972:	e009      	b.n	8000988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000974:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <_sbrk+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800097a:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	4a05      	ldr	r2, [pc, #20]	@ (8000998 <_sbrk+0x64>)
 8000984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000986:	68fb      	ldr	r3, [r7, #12]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20020000 	.word	0x20020000
 8000994:	00000400 	.word	0x00000400
 8000998:	200000dc 	.word	0x200000dc
 800099c:	200003f8 	.word	0x200003f8

080009a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <SystemInit+0x20>)
 80009a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009aa:	4a05      	ldr	r2, [pc, #20]	@ (80009c0 <SystemInit+0x20>)
 80009ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009c8:	f7ff ffea 	bl	80009a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009cc:	480c      	ldr	r0, [pc, #48]	@ (8000a00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ce:	490d      	ldr	r1, [pc, #52]	@ (8000a04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a10 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009f2:	f003 fd91 	bl	8004518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009f6:	f7ff fdf1 	bl	80005dc <main>
  bx  lr    
 80009fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000a08:	08004f68 	.word	0x08004f68
  ldr r2, =_sbss
 8000a0c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000a10:	200003f8 	.word	0x200003f8

08000a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC_IRQHandler>

08000a16 <delayIsRunning>:
 * @brief Checks whether the delay is running or jot
 * @param delay: Pointer to the delay
 * @retval Boolean with the value of "running"
 * @author Juan Pablo Touron
 * */
static bool_t delayIsRunning(delay_t* delay){
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
	return delay->running;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	7a1b      	ldrb	r3, [r3, #8]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <delayInit>:
 * @param delay: Pointer to the delay
 * @param duration: Duration of the delay
 * @retval None
 * @author Juan Pablo Touron
 * */
void delayInit(delay_t* delay, tick_t duration){
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	6039      	str	r1, [r7, #0]
	delay->duration = duration;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	683a      	ldr	r2, [r7, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	721a      	strb	r2, [r3, #8]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <delayRead>:
 * @brief Checks whether the delay has ended or not. If not running, it starts the delay
 * @param delay: Pointer to the delay
 * @retval Boolean with the state of the delay (running -> true, not running -> false)
 * @author Juan Pablo Touron
 * */
bool_t delayRead(delay_t* delay){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	if (delayIsRunning(delay)){
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ffdc 	bl	8000a16 <delayIsRunning>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d00e      	beq.n	8000a82 <delayRead+0x32>
		if ((HAL_GetTick() - delay->startTime) >= delay->duration){
 8000a64:	f001 f9e8 	bl	8001e38 <HAL_GetTick>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	1ad2      	subs	r2, r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d30c      	bcc.n	8000a92 <delayRead+0x42>
			delay->running = false;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	721a      	strb	r2, [r3, #8]
			return true;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e008      	b.n	8000a94 <delayRead+0x44>
		}
	}
	else{
		delay->startTime = HAL_GetTick();
 8000a82:	f001 f9d9 	bl	8001e38 <HAL_GetTick>
 8000a86:	4602      	mov	r2, r0
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	721a      	strb	r2, [r3, #8]
	}
	return false;
 8000a92:	2300      	movs	r3, #0
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <AddToQueue>:
 * @function AddToQueue
 * @brief Adds button pressed to button buffer.
 * @param value: button pressed
 * @retval none
 */
static void AddToQueue(uint16_t value) {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	80fb      	strh	r3, [r7, #6]
    int nextTail = (tail + 1) % MAX_BUFFER;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <AddToQueue+0x50>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	4a10      	ldr	r2, [pc, #64]	@ (8000af0 <AddToQueue+0x54>)
 8000aae:	fb82 1203 	smull	r1, r2, r2, r3
 8000ab2:	1151      	asrs	r1, r2, #5
 8000ab4:	17da      	asrs	r2, r3, #31
 8000ab6:	1a8a      	subs	r2, r1, r2
 8000ab8:	2164      	movs	r1, #100	@ 0x64
 8000aba:	fb01 f202 	mul.w	r2, r1, r2
 8000abe:	1a9b      	subs	r3, r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]
    if (nextTail == head) return; /*If buffer is full*/
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <AddToQueue+0x58>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d009      	beq.n	8000ae0 <AddToQueue+0x44>
    buttonBuffer[tail] = value;
 8000acc:	4b07      	ldr	r3, [pc, #28]	@ (8000aec <AddToQueue+0x50>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4909      	ldr	r1, [pc, #36]	@ (8000af8 <AddToQueue+0x5c>)
 8000ad2:	88fa      	ldrh	r2, [r7, #6]
 8000ad4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    tail = nextTail;
 8000ad8:	4a04      	ldr	r2, [pc, #16]	@ (8000aec <AddToQueue+0x50>)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	6013      	str	r3, [r2, #0]
    return;
 8000ade:	e000      	b.n	8000ae2 <AddToQueue+0x46>
    if (nextTail == head) return; /*If buffer is full*/
 8000ae0:	bf00      	nop
}
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	200001e0 	.word	0x200001e0
 8000af0:	51eb851f 	.word	0x51eb851f
 8000af4:	200001dc 	.word	0x200001dc
 8000af8:	200000f8 	.word	0x200000f8

08000afc <CheckLeapYear>:
 * @function CheckLeapYear
 * @brief Check if a given year is leap.
 * @param year: year to be analized
 * @retval boolean to indicate if the year is leap
 */
static bool_t CheckLeapYear(uint8_t year){
 8000afc:	b490      	push	{r4, r7}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
	if ((year%400 ==0)|((year%4==0)&(year%100 !=0))) return true;
 8000b06:	79fa      	ldrb	r2, [r7, #7]
 8000b08:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <CheckLeapYear+0x78>)
 8000b0a:	fb83 1302 	smull	r1, r3, r3, r2
 8000b0e:	11d9      	asrs	r1, r3, #7
 8000b10:	17d3      	asrs	r3, r2, #31
 8000b12:	1acb      	subs	r3, r1, r3
 8000b14:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000b18:	fb01 f303 	mul.w	r3, r1, r3
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	bf0c      	ite	eq
 8000b22:	2301      	moveq	r3, #1
 8000b24:	2300      	movne	r3, #0
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	461c      	mov	r4, r3
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	f003 0303 	and.w	r3, r3, #3
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	bf0c      	ite	eq
 8000b36:	2301      	moveq	r3, #1
 8000b38:	2300      	movne	r3, #0
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	490d      	ldr	r1, [pc, #52]	@ (8000b74 <CheckLeapYear+0x78>)
 8000b40:	fba1 0103 	umull	r0, r1, r1, r3
 8000b44:	0949      	lsrs	r1, r1, #5
 8000b46:	2064      	movs	r0, #100	@ 0x64
 8000b48:	fb00 f101 	mul.w	r1, r0, r1
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	bf14      	ite	ne
 8000b54:	2301      	movne	r3, #1
 8000b56:	2300      	moveq	r3, #0
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	4323      	orrs	r3, r4
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <CheckLeapYear+0x6c>
 8000b64:	2301      	movs	r3, #1
 8000b66:	e000      	b.n	8000b6a <CheckLeapYear+0x6e>
	else return false;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc90      	pop	{r4, r7}
 8000b72:	4770      	bx	lr
 8000b74:	51eb851f 	.word	0x51eb851f

08000b78 <GetFromQueue>:
 * @function GetFromQueue
 * @brief Gets the next value from a queue and removes it.
 * @param none
 * @retval val: the next value of the queue
 */
static uint16_t GetFromQueue(void) {
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
    if (head == tail) return -1; /*If buffer is empty, return -1*/
 8000b7e:	4b12      	ldr	r3, [pc, #72]	@ (8000bc8 <GetFromQueue+0x50>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <GetFromQueue+0x54>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d102      	bne.n	8000b90 <GetFromQueue+0x18>
 8000b8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b8e:	e015      	b.n	8000bbc <GetFromQueue+0x44>
    uint16_t val = buttonBuffer[head];
 8000b90:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc8 <GetFromQueue+0x50>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd0 <GetFromQueue+0x58>)
 8000b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b9a:	80fb      	strh	r3, [r7, #6]
    head = (head + 1) % MAX_BUFFER;
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <GetFromQueue+0x50>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	1c5a      	adds	r2, r3, #1
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <GetFromQueue+0x5c>)
 8000ba4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ba8:	1159      	asrs	r1, r3, #5
 8000baa:	17d3      	asrs	r3, r2, #31
 8000bac:	1acb      	subs	r3, r1, r3
 8000bae:	2164      	movs	r1, #100	@ 0x64
 8000bb0:	fb01 f303 	mul.w	r3, r1, r3
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	4a04      	ldr	r2, [pc, #16]	@ (8000bc8 <GetFromQueue+0x50>)
 8000bb8:	6013      	str	r3, [r2, #0]
    return val;
 8000bba:	88fb      	ldrh	r3, [r7, #6]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	200001dc 	.word	0x200001dc
 8000bcc:	200001e0 	.word	0x200001e0
 8000bd0:	200000f8 	.word	0x200000f8
 8000bd4:	51eb851f 	.word	0x51eb851f

08000bd8 <MenuInit>:
 * @function MenuInit
 * @brief Initializes the menu to show time state.
 * @param none
 * @retval none
 */
static void MenuInit(){
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
	menu = SHOWTIME_M;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	@ (8000bec <MenuInit+0x14>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	701a      	strb	r2, [r3, #0]
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	200001e4 	.word	0x200001e4

08000bf0 <MenuUpdate>:
 * @function MenuUpdate
 * @brief Updates the menu state according to the button pressed.
 * @param button: button pressed
 * @retval none
 */
static void MenuUpdate(uint16_t button){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80fb      	strh	r3, [r7, #6]
	ShowOptions();
 8000bfa:	f000 f94f 	bl	8000e9c <ShowOptions>
	switch(menu){
 8000bfe:	4b35      	ldr	r3, [pc, #212]	@ (8000cd4 <MenuUpdate+0xe4>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d03e      	beq.n	8000c84 <MenuUpdate+0x94>
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	dc59      	bgt.n	8000cbe <MenuUpdate+0xce>
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d002      	beq.n	8000c14 <MenuUpdate+0x24>
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d017      	beq.n	8000c42 <MenuUpdate+0x52>
			TimeSetInit(&alarmSet);
			InitTime(&alarmToSet);
		}
		break;
	default:
		break;
 8000c12:	e054      	b.n	8000cbe <MenuUpdate+0xce>
		if (button == RIGHT_BUTTON) menu = SETTIME_M;
 8000c14:	88fb      	ldrh	r3, [r7, #6]
 8000c16:	2b40      	cmp	r3, #64	@ 0x40
 8000c18:	d103      	bne.n	8000c22 <MenuUpdate+0x32>
 8000c1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd4 <MenuUpdate+0xe4>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	701a      	strb	r2, [r3, #0]
		break;
 8000c20:	e04f      	b.n	8000cc2 <MenuUpdate+0xd2>
		else if (button == LEFT_BUTTON) menu = SETALARM_M;
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c28:	d103      	bne.n	8000c32 <MenuUpdate+0x42>
 8000c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd4 <MenuUpdate+0xe4>)
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	701a      	strb	r2, [r3, #0]
		break;
 8000c30:	e047      	b.n	8000cc2 <MenuUpdate+0xd2>
		else if (button == ENTER_BUTTON){
 8000c32:	88fb      	ldrh	r3, [r7, #6]
 8000c34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c38:	d143      	bne.n	8000cc2 <MenuUpdate+0xd2>
			app = SHOWTIME;
 8000c3a:	4b27      	ldr	r3, [pc, #156]	@ (8000cd8 <MenuUpdate+0xe8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
		break;
 8000c40:	e03f      	b.n	8000cc2 <MenuUpdate+0xd2>
		if (button == RIGHT_BUTTON) menu = SETALARM_M;
 8000c42:	88fb      	ldrh	r3, [r7, #6]
 8000c44:	2b40      	cmp	r3, #64	@ 0x40
 8000c46:	d103      	bne.n	8000c50 <MenuUpdate+0x60>
 8000c48:	4b22      	ldr	r3, [pc, #136]	@ (8000cd4 <MenuUpdate+0xe4>)
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	701a      	strb	r2, [r3, #0]
		break;
 8000c4e:	e03a      	b.n	8000cc6 <MenuUpdate+0xd6>
		else if (button == LEFT_BUTTON) menu = SHOWTIME_M;
 8000c50:	88fb      	ldrh	r3, [r7, #6]
 8000c52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c56:	d103      	bne.n	8000c60 <MenuUpdate+0x70>
 8000c58:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd4 <MenuUpdate+0xe4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
		break;
 8000c5e:	e032      	b.n	8000cc6 <MenuUpdate+0xd6>
		else if (button == ENTER_BUTTON){
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c66:	d12e      	bne.n	8000cc6 <MenuUpdate+0xd6>
			app = SETTIME;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <MenuUpdate+0xe8>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
			TimeSetInit(&datetimeSet);
 8000c6e:	481b      	ldr	r0, [pc, #108]	@ (8000cdc <MenuUpdate+0xec>)
 8000c70:	f000 f9b4 	bl	8000fdc <TimeSetInit>
			GetTime(&time);
 8000c74:	481a      	ldr	r0, [pc, #104]	@ (8000ce0 <MenuUpdate+0xf0>)
 8000c76:	f000 fcdc 	bl	8001632 <GetTime>
			CopyTime(&time,&timeToSet);
 8000c7a:	491a      	ldr	r1, [pc, #104]	@ (8000ce4 <MenuUpdate+0xf4>)
 8000c7c:	4818      	ldr	r0, [pc, #96]	@ (8000ce0 <MenuUpdate+0xf0>)
 8000c7e:	f000 fc5e 	bl	800153e <CopyTime>
		break;
 8000c82:	e020      	b.n	8000cc6 <MenuUpdate+0xd6>
		if (button == RIGHT_BUTTON) menu = SHOWTIME_M;
 8000c84:	88fb      	ldrh	r3, [r7, #6]
 8000c86:	2b40      	cmp	r3, #64	@ 0x40
 8000c88:	d103      	bne.n	8000c92 <MenuUpdate+0xa2>
 8000c8a:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <MenuUpdate+0xe4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
		break;
 8000c90:	e01b      	b.n	8000cca <MenuUpdate+0xda>
		else if (button == LEFT_BUTTON) menu = SETTIME_M;
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c98:	d103      	bne.n	8000ca2 <MenuUpdate+0xb2>
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <MenuUpdate+0xe4>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
		break;
 8000ca0:	e013      	b.n	8000cca <MenuUpdate+0xda>
		else if (button == ENTER_BUTTON){
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ca8:	d10f      	bne.n	8000cca <MenuUpdate+0xda>
			app = SETALARM;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <MenuUpdate+0xe8>)
 8000cac:	2202      	movs	r2, #2
 8000cae:	701a      	strb	r2, [r3, #0]
			TimeSetInit(&alarmSet);
 8000cb0:	480d      	ldr	r0, [pc, #52]	@ (8000ce8 <MenuUpdate+0xf8>)
 8000cb2:	f000 f993 	bl	8000fdc <TimeSetInit>
			InitTime(&alarmToSet);
 8000cb6:	480d      	ldr	r0, [pc, #52]	@ (8000cec <MenuUpdate+0xfc>)
 8000cb8:	f000 fd0a 	bl	80016d0 <InitTime>
		break;
 8000cbc:	e005      	b.n	8000cca <MenuUpdate+0xda>
		break;
 8000cbe:	bf00      	nop
 8000cc0:	e004      	b.n	8000ccc <MenuUpdate+0xdc>
		break;
 8000cc2:	bf00      	nop
 8000cc4:	e002      	b.n	8000ccc <MenuUpdate+0xdc>
		break;
 8000cc6:	bf00      	nop
 8000cc8:	e000      	b.n	8000ccc <MenuUpdate+0xdc>
		break;
 8000cca:	bf00      	nop
	}
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200001e4 	.word	0x200001e4
 8000cd8:	200000f4 	.word	0x200000f4
 8000cdc:	200001d9 	.word	0x200001d9
 8000ce0:	200001e8 	.word	0x200001e8
 8000ce4:	2000020c 	.word	0x2000020c
 8000ce8:	200000e9 	.word	0x200000e9
 8000cec:	200000ec 	.word	0x200000ec

08000cf0 <SetAlarmMode>:
 * @brief Executes all the functions for Set alarm mode this is allowing to set an alarm with minutes, hours and day of week.
 * If alarm is set, LCD displays "Alarma guardada, app and menu are sent to showtime, and alarmIsSet is set to True
 * @param currentButton: button pressed
 * @retval none
 */
static void SetAlarmMode(uint16_t currentButton){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	80fb      	strh	r3, [r7, #6]
	sprintf(timetext, "%02d:%02d",alarmToSet.Hours, alarmToSet.Minutes);
 8000cfa:	4b24      	ldr	r3, [pc, #144]	@ (8000d8c <SetAlarmMode+0x9c>)
 8000cfc:	789b      	ldrb	r3, [r3, #2]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4b22      	ldr	r3, [pc, #136]	@ (8000d8c <SetAlarmMode+0x9c>)
 8000d02:	785b      	ldrb	r3, [r3, #1]
 8000d04:	4922      	ldr	r1, [pc, #136]	@ (8000d90 <SetAlarmMode+0xa0>)
 8000d06:	4823      	ldr	r0, [pc, #140]	@ (8000d94 <SetAlarmMode+0xa4>)
 8000d08:	f003 fbd6 	bl	80044b8 <siprintf>
	sprintf(datetext, "%s",dayOfWeek[alarmToSet.Day-1]);
 8000d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d8c <SetAlarmMode+0x9c>)
 8000d0e:	78db      	ldrb	r3, [r3, #3]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	4a21      	ldr	r2, [pc, #132]	@ (8000d98 <SetAlarmMode+0xa8>)
 8000d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4920      	ldr	r1, [pc, #128]	@ (8000d9c <SetAlarmMode+0xac>)
 8000d1c:	4820      	ldr	r0, [pc, #128]	@ (8000da0 <SetAlarmMode+0xb0>)
 8000d1e:	f003 fbcb 	bl	80044b8 <siprintf>

	LCD_I2C_ClearWrite(timetext, 0, 5);
 8000d22:	2205      	movs	r2, #5
 8000d24:	2100      	movs	r1, #0
 8000d26:	481b      	ldr	r0, [pc, #108]	@ (8000d94 <SetAlarmMode+0xa4>)
 8000d28:	f000 fdac 	bl	8001884 <LCD_I2C_ClearWrite>
	LCD_I2C_ClearWrite(datetext, 1, 6);
 8000d2c:	2206      	movs	r2, #6
 8000d2e:	2101      	movs	r1, #1
 8000d30:	481b      	ldr	r0, [pc, #108]	@ (8000da0 <SetAlarmMode+0xb0>)
 8000d32:	f000 fda7 	bl	8001884 <LCD_I2C_ClearWrite>

	if (TimeSetUpdate(&alarmSet,&alarmToSet,currentButton)){
 8000d36:	88fb      	ldrh	r3, [r7, #6]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4914      	ldr	r1, [pc, #80]	@ (8000d8c <SetAlarmMode+0x9c>)
 8000d3c:	4819      	ldr	r0, [pc, #100]	@ (8000da4 <SetAlarmMode+0xb4>)
 8000d3e:	f000 f95b 	bl	8000ff8 <TimeSetUpdate>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d01c      	beq.n	8000d82 <SetAlarmMode+0x92>
		SetAlarm(&alarmToSet);
 8000d48:	4810      	ldr	r0, [pc, #64]	@ (8000d8c <SetAlarmMode+0x9c>)
 8000d4a:	f000 fd14 	bl	8001776 <SetAlarm>
		LCD_I2C_ClearWrite("Alarma",0,5);
 8000d4e:	2205      	movs	r2, #5
 8000d50:	2100      	movs	r1, #0
 8000d52:	4815      	ldr	r0, [pc, #84]	@ (8000da8 <SetAlarmMode+0xb8>)
 8000d54:	f000 fd96 	bl	8001884 <LCD_I2C_ClearWrite>
		LCD_I2C_ClearWrite("guardada.",1,4);
 8000d58:	2204      	movs	r2, #4
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	4813      	ldr	r0, [pc, #76]	@ (8000dac <SetAlarmMode+0xbc>)
 8000d5e:	f000 fd91 	bl	8001884 <LCD_I2C_ClearWrite>
		I2CDelay(1000);
 8000d62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d66:	f000 ff6f 	bl	8001c48 <I2CDelay>

		app = SHOWTIME;
 8000d6a:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <SetAlarmMode+0xc0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
		menu = SHOWTIME_M;
 8000d70:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <SetAlarmMode+0xc4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
		TimeSetInit(&alarmSet);
 8000d76:	480b      	ldr	r0, [pc, #44]	@ (8000da4 <SetAlarmMode+0xb4>)
 8000d78:	f000 f930 	bl	8000fdc <TimeSetInit>
		alarmIsSet = true;
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <SetAlarmMode+0xc8>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	701a      	strb	r2, [r3, #0]
	}

}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200000ec 	.word	0x200000ec
 8000d90:	08004e2c 	.word	0x08004e2c
 8000d94:	200001f0 	.word	0x200001f0
 8000d98:	20000004 	.word	0x20000004
 8000d9c:	08004e38 	.word	0x08004e38
 8000da0:	200001c0 	.word	0x200001c0
 8000da4:	200000e9 	.word	0x200000e9
 8000da8:	08004e3c 	.word	0x08004e3c
 8000dac:	08004e44 	.word	0x08004e44
 8000db0:	200000f4 	.word	0x200000f4
 8000db4:	200001e4 	.word	0x200001e4
 8000db8:	200000e8 	.word	0x200000e8

08000dbc <SetTimeMode>:
 * update values and set a new date and time. If a new datetime is set, LCD displays "Hora actualizada",
 * and app and menu FSM are sent to show time state
 * @param currentButton: button pressed
 * @retval none
 */
static void SetTimeMode(uint16_t currentButton){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af02      	add	r7, sp, #8
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	80fb      	strh	r3, [r7, #6]

	sprintf(timetext, "%02d:%02d:%02d",timeToSet.Hours, timeToSet.Minutes, timeToSet.Seconds);
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e70 <SetTimeMode+0xb4>)
 8000dc8:	789b      	ldrb	r3, [r3, #2]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b28      	ldr	r3, [pc, #160]	@ (8000e70 <SetTimeMode+0xb4>)
 8000dce:	785b      	ldrb	r3, [r3, #1]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4b27      	ldr	r3, [pc, #156]	@ (8000e70 <SetTimeMode+0xb4>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	4926      	ldr	r1, [pc, #152]	@ (8000e74 <SetTimeMode+0xb8>)
 8000ddc:	4826      	ldr	r0, [pc, #152]	@ (8000e78 <SetTimeMode+0xbc>)
 8000dde:	f003 fb6b 	bl	80044b8 <siprintf>
	sprintf(datetext, "%s %02d/%02d/%04d",dayOfWeek[timeToSet.Day-1],timeToSet.Date, timeToSet.Month, timeToSet.Year);
 8000de2:	4b23      	ldr	r3, [pc, #140]	@ (8000e70 <SetTimeMode+0xb4>)
 8000de4:	78db      	ldrb	r3, [r3, #3]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	4a24      	ldr	r2, [pc, #144]	@ (8000e7c <SetTimeMode+0xc0>)
 8000dea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dee:	4b20      	ldr	r3, [pc, #128]	@ (8000e70 <SetTimeMode+0xb4>)
 8000df0:	791b      	ldrb	r3, [r3, #4]
 8000df2:	4618      	mov	r0, r3
 8000df4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e70 <SetTimeMode+0xb4>)
 8000df6:	795b      	ldrb	r3, [r3, #5]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8000e70 <SetTimeMode+0xb4>)
 8000dfc:	88db      	ldrh	r3, [r3, #6]
 8000dfe:	9301      	str	r3, [sp, #4]
 8000e00:	9100      	str	r1, [sp, #0]
 8000e02:	4603      	mov	r3, r0
 8000e04:	491e      	ldr	r1, [pc, #120]	@ (8000e80 <SetTimeMode+0xc4>)
 8000e06:	481f      	ldr	r0, [pc, #124]	@ (8000e84 <SetTimeMode+0xc8>)
 8000e08:	f003 fb56 	bl	80044b8 <siprintf>

	LCD_I2C_ClearWrite(timetext, 0, 4);
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4819      	ldr	r0, [pc, #100]	@ (8000e78 <SetTimeMode+0xbc>)
 8000e12:	f000 fd37 	bl	8001884 <LCD_I2C_ClearWrite>
	LCD_I2C_ClearWrite(datetext, 1, 1);
 8000e16:	2201      	movs	r2, #1
 8000e18:	2101      	movs	r1, #1
 8000e1a:	481a      	ldr	r0, [pc, #104]	@ (8000e84 <SetTimeMode+0xc8>)
 8000e1c:	f000 fd32 	bl	8001884 <LCD_I2C_ClearWrite>

	if (TimeSetUpdate(&datetimeSet,&timeToSet,currentButton)){
 8000e20:	88fb      	ldrh	r3, [r7, #6]
 8000e22:	461a      	mov	r2, r3
 8000e24:	4912      	ldr	r1, [pc, #72]	@ (8000e70 <SetTimeMode+0xb4>)
 8000e26:	4818      	ldr	r0, [pc, #96]	@ (8000e88 <SetTimeMode+0xcc>)
 8000e28:	f000 f8e6 	bl	8000ff8 <TimeSetUpdate>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d019      	beq.n	8000e66 <SetTimeMode+0xaa>
		SetTime(&timeToSet);
 8000e32:	480f      	ldr	r0, [pc, #60]	@ (8000e70 <SetTimeMode+0xb4>)
 8000e34:	f000 fccb 	bl	80017ce <SetTime>
		LCD_I2C_ClearWrite("Hora",0,6);
 8000e38:	2206      	movs	r2, #6
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4813      	ldr	r0, [pc, #76]	@ (8000e8c <SetTimeMode+0xd0>)
 8000e3e:	f000 fd21 	bl	8001884 <LCD_I2C_ClearWrite>
		LCD_I2C_ClearWrite("actualizada.",1,2);
 8000e42:	2202      	movs	r2, #2
 8000e44:	2101      	movs	r1, #1
 8000e46:	4812      	ldr	r0, [pc, #72]	@ (8000e90 <SetTimeMode+0xd4>)
 8000e48:	f000 fd1c 	bl	8001884 <LCD_I2C_ClearWrite>
		I2CDelay(1000);
 8000e4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e50:	f000 fefa 	bl	8001c48 <I2CDelay>

		app = SHOWTIME;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <SetTimeMode+0xd8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
		menu = SHOWTIME_M;
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <SetTimeMode+0xdc>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
		TimeSetInit(&datetimeSet);
 8000e60:	4809      	ldr	r0, [pc, #36]	@ (8000e88 <SetTimeMode+0xcc>)
 8000e62:	f000 f8bb 	bl	8000fdc <TimeSetInit>
	}

}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2000020c 	.word	0x2000020c
 8000e74:	08004e50 	.word	0x08004e50
 8000e78:	200001f0 	.word	0x200001f0
 8000e7c:	20000004 	.word	0x20000004
 8000e80:	08004e60 	.word	0x08004e60
 8000e84:	200001c0 	.word	0x200001c0
 8000e88:	200001d9 	.word	0x200001d9
 8000e8c:	08004e74 	.word	0x08004e74
 8000e90:	08004e7c 	.word	0x08004e7c
 8000e94:	200000f4 	.word	0x200000f4
 8000e98:	200001e4 	.word	0x200001e4

08000e9c <ShowOptions>:
 * @function ShowOptions
 * @brief Auxiliary function to show options according to current mode
 * @param none
 * @retval none
 */
static void ShowOptions(){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	switch(menu){
 8000ea0:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <ShowOptions+0x64>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d01c      	beq.n	8000ee2 <ShowOptions+0x46>
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	dc25      	bgt.n	8000ef8 <ShowOptions+0x5c>
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d002      	beq.n	8000eb6 <ShowOptions+0x1a>
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d00b      	beq.n	8000ecc <ShowOptions+0x30>
	case SETALARM_M:
		LCD_I2C_ClearWrite("3) Poner",0,4);
		LCD_I2C_ClearWrite("alarma",1,5);
		break;
	default:
		break;
 8000eb4:	e020      	b.n	8000ef8 <ShowOptions+0x5c>
		LCD_I2C_ClearWrite("1) Ver",0,5);
 8000eb6:	2205      	movs	r2, #5
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4812      	ldr	r0, [pc, #72]	@ (8000f04 <ShowOptions+0x68>)
 8000ebc:	f000 fce2 	bl	8001884 <LCD_I2C_ClearWrite>
		LCD_I2C_ClearWrite("fecha y hora",1,2);
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	4810      	ldr	r0, [pc, #64]	@ (8000f08 <ShowOptions+0x6c>)
 8000ec6:	f000 fcdd 	bl	8001884 <LCD_I2C_ClearWrite>
		break;
 8000eca:	e016      	b.n	8000efa <ShowOptions+0x5e>
		LCD_I2C_ClearWrite("2) Ajustar",0,2);
 8000ecc:	2202      	movs	r2, #2
 8000ece:	2100      	movs	r1, #0
 8000ed0:	480e      	ldr	r0, [pc, #56]	@ (8000f0c <ShowOptions+0x70>)
 8000ed2:	f000 fcd7 	bl	8001884 <LCD_I2C_ClearWrite>
		LCD_I2C_ClearWrite("hora y fecha",1,2);
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	2101      	movs	r1, #1
 8000eda:	480d      	ldr	r0, [pc, #52]	@ (8000f10 <ShowOptions+0x74>)
 8000edc:	f000 fcd2 	bl	8001884 <LCD_I2C_ClearWrite>
		break;
 8000ee0:	e00b      	b.n	8000efa <ShowOptions+0x5e>
		LCD_I2C_ClearWrite("3) Poner",0,4);
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	480b      	ldr	r0, [pc, #44]	@ (8000f14 <ShowOptions+0x78>)
 8000ee8:	f000 fccc 	bl	8001884 <LCD_I2C_ClearWrite>
		LCD_I2C_ClearWrite("alarma",1,5);
 8000eec:	2205      	movs	r2, #5
 8000eee:	2101      	movs	r1, #1
 8000ef0:	4809      	ldr	r0, [pc, #36]	@ (8000f18 <ShowOptions+0x7c>)
 8000ef2:	f000 fcc7 	bl	8001884 <LCD_I2C_ClearWrite>
		break;
 8000ef6:	e000      	b.n	8000efa <ShowOptions+0x5e>
		break;
 8000ef8:	bf00      	nop
	}
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200001e4 	.word	0x200001e4
 8000f04:	08004e8c 	.word	0x08004e8c
 8000f08:	08004e94 	.word	0x08004e94
 8000f0c:	08004ea4 	.word	0x08004ea4
 8000f10:	08004eb0 	.word	0x08004eb0
 8000f14:	08004ec0 	.word	0x08004ec0
 8000f18:	08004ecc 	.word	0x08004ecc

08000f1c <ShowTimeMode>:
 * @function ShowTimeMode
 * @brief Executes all the actions for the show time mode, this is displaying date, time and alarm indicator on screen.
 * @param none
 * @retval none
 */
static void ShowTimeMode(){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af02      	add	r7, sp, #8
	  GetTime(&time);
 8000f22:	4826      	ldr	r0, [pc, #152]	@ (8000fbc <ShowTimeMode+0xa0>)
 8000f24:	f000 fb85 	bl	8001632 <GetTime>
	  uint8_t col;

	  if (alarmIsSet){
 8000f28:	4b25      	ldr	r3, [pc, #148]	@ (8000fc0 <ShowTimeMode+0xa4>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d010      	beq.n	8000f52 <ShowTimeMode+0x36>
		  sprintf(timetext, "A   %02d:%02d:%02d",time.Hours, time.Minutes, time.Seconds);
 8000f30:	4b22      	ldr	r3, [pc, #136]	@ (8000fbc <ShowTimeMode+0xa0>)
 8000f32:	789b      	ldrb	r3, [r3, #2]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b21      	ldr	r3, [pc, #132]	@ (8000fbc <ShowTimeMode+0xa0>)
 8000f38:	785b      	ldrb	r3, [r3, #1]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fbc <ShowTimeMode+0xa0>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	460b      	mov	r3, r1
 8000f44:	491f      	ldr	r1, [pc, #124]	@ (8000fc4 <ShowTimeMode+0xa8>)
 8000f46:	4820      	ldr	r0, [pc, #128]	@ (8000fc8 <ShowTimeMode+0xac>)
 8000f48:	f003 fab6 	bl	80044b8 <siprintf>
		  col = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	e00f      	b.n	8000f72 <ShowTimeMode+0x56>
	  }
	  else{
		  sprintf(timetext, "%02d:%02d:%02d",time.Hours, time.Minutes, time.Seconds);
 8000f52:	4b1a      	ldr	r3, [pc, #104]	@ (8000fbc <ShowTimeMode+0xa0>)
 8000f54:	789b      	ldrb	r3, [r3, #2]
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <ShowTimeMode+0xa0>)
 8000f5a:	785b      	ldrb	r3, [r3, #1]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4b17      	ldr	r3, [pc, #92]	@ (8000fbc <ShowTimeMode+0xa0>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	460b      	mov	r3, r1
 8000f66:	4919      	ldr	r1, [pc, #100]	@ (8000fcc <ShowTimeMode+0xb0>)
 8000f68:	4817      	ldr	r0, [pc, #92]	@ (8000fc8 <ShowTimeMode+0xac>)
 8000f6a:	f003 faa5 	bl	80044b8 <siprintf>
		  col=4;
 8000f6e:	2304      	movs	r3, #4
 8000f70:	71fb      	strb	r3, [r7, #7]
	  }

	  sprintf(datetext, "%s %02d/%02d/%04d",dayOfWeek[time.Day-1],time.Date, time.Month, time.Year);
 8000f72:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <ShowTimeMode+0xa0>)
 8000f74:	78db      	ldrb	r3, [r3, #3]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	4a15      	ldr	r2, [pc, #84]	@ (8000fd0 <ShowTimeMode+0xb4>)
 8000f7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <ShowTimeMode+0xa0>)
 8000f80:	791b      	ldrb	r3, [r3, #4]
 8000f82:	4618      	mov	r0, r3
 8000f84:	4b0d      	ldr	r3, [pc, #52]	@ (8000fbc <ShowTimeMode+0xa0>)
 8000f86:	795b      	ldrb	r3, [r3, #5]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <ShowTimeMode+0xa0>)
 8000f8c:	88db      	ldrh	r3, [r3, #6]
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	9100      	str	r1, [sp, #0]
 8000f92:	4603      	mov	r3, r0
 8000f94:	490f      	ldr	r1, [pc, #60]	@ (8000fd4 <ShowTimeMode+0xb8>)
 8000f96:	4810      	ldr	r0, [pc, #64]	@ (8000fd8 <ShowTimeMode+0xbc>)
 8000f98:	f003 fa8e 	bl	80044b8 <siprintf>

	  LCD_I2C_ClearWrite(timetext, 0, col);
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4809      	ldr	r0, [pc, #36]	@ (8000fc8 <ShowTimeMode+0xac>)
 8000fa4:	f000 fc6e 	bl	8001884 <LCD_I2C_ClearWrite>
	  LCD_I2C_ClearWrite(datetext, 1, 1);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2101      	movs	r1, #1
 8000fac:	480a      	ldr	r0, [pc, #40]	@ (8000fd8 <ShowTimeMode+0xbc>)
 8000fae:	f000 fc69 	bl	8001884 <LCD_I2C_ClearWrite>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200001e8 	.word	0x200001e8
 8000fc0:	200000e8 	.word	0x200000e8
 8000fc4:	08004ed4 	.word	0x08004ed4
 8000fc8:	200001f0 	.word	0x200001f0
 8000fcc:	08004e50 	.word	0x08004e50
 8000fd0:	20000004 	.word	0x20000004
 8000fd4:	08004e60 	.word	0x08004e60
 8000fd8:	200001c0 	.word	0x200001c0

08000fdc <TimeSetInit>:
 * @function TimeSetInit
 * @brief Initializes the time set object to hour setting.
 * @param none
 * @retval none
 */
void TimeSetInit(datetime_t *dt){
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	*dt = HOUR_DT;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <TimeSetUpdate>:
 * @param dt: pointer to the datetime_t object to be analized
 * @param timeSet: pointer to the DS3231_DateTime object to be filled
 * @param button: button pressed
 * @retval boolean to indicate whether the time/alarm set is complete
 */
bool_t TimeSetUpdate(uint16_t *dt,DS3231_DateTime *timeSet, uint16_t button){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	4613      	mov	r3, r2
 8001004:	80fb      	strh	r3, [r7, #6]
	uint8_t maxDay[12] = {31,28,31,30,31,30,31,31,30,31,30,31};
 8001006:	4a93      	ldr	r2, [pc, #588]	@ (8001254 <TimeSetUpdate+0x25c>)
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	ca07      	ldmia	r2, {r0, r1, r2}
 800100e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (CheckLeapYear(timeSet->Year)) maxDay[1] = 29;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	88db      	ldrh	r3, [r3, #6]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fd6f 	bl	8000afc <CheckLeapYear>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <TimeSetUpdate+0x30>
 8001024:	231d      	movs	r3, #29
 8001026:	757b      	strb	r3, [r7, #21]
	SwitchCursor(&dt);
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	4618      	mov	r0, r3
 800102e:	f000 fa0f 	bl	8001450 <SwitchCursor>
	switch(*dt){
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	2b06      	cmp	r3, #6
 8001038:	f200 816d 	bhi.w	8001316 <TimeSetUpdate+0x31e>
 800103c:	a201      	add	r2, pc, #4	@ (adr r2, 8001044 <TimeSetUpdate+0x4c>)
 800103e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001042:	bf00      	nop
 8001044:	08001061 	.word	0x08001061
 8001048:	080010bd 	.word	0x080010bd
 800104c:	08001131 	.word	0x08001131
 8001050:	080012c1 	.word	0x080012c1
 8001054:	08001245 	.word	0x08001245
 8001058:	080011e9 	.word	0x080011e9
 800105c:	0800118d 	.word	0x0800118d
	case HOUR_DT:
		if (button == ENTER_BUTTON) *dt = MINUTE_DT;
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001066:	d103      	bne.n	8001070 <TimeSetUpdate+0x78>
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2201      	movs	r2, #1
 800106c:	801a      	strh	r2, [r3, #0]
			if (timeSet->Hours == 0){
				timeSet->Hours = 23;
			}
			else timeSet->Hours--;
		}
		break;
 800106e:	e154      	b.n	800131a <TimeSetUpdate+0x322>
		else if (button == RIGHT_BUTTON){
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	2b40      	cmp	r3, #64	@ 0x40
 8001074:	d10e      	bne.n	8001094 <TimeSetUpdate+0x9c>
			if (timeSet->Hours == 23){
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	789b      	ldrb	r3, [r3, #2]
 800107a:	2b17      	cmp	r3, #23
 800107c:	d103      	bne.n	8001086 <TimeSetUpdate+0x8e>
				timeSet->Hours = 0;
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	2200      	movs	r2, #0
 8001082:	709a      	strb	r2, [r3, #2]
		break;
 8001084:	e149      	b.n	800131a <TimeSetUpdate+0x322>
			else timeSet->Hours++;
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	789b      	ldrb	r3, [r3, #2]
 800108a:	3301      	adds	r3, #1
 800108c:	b2da      	uxtb	r2, r3
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	709a      	strb	r2, [r3, #2]
		break;
 8001092:	e142      	b.n	800131a <TimeSetUpdate+0x322>
		else if (button == LEFT_BUTTON){
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800109a:	f040 813e 	bne.w	800131a <TimeSetUpdate+0x322>
			if (timeSet->Hours == 0){
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	789b      	ldrb	r3, [r3, #2]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d103      	bne.n	80010ae <TimeSetUpdate+0xb6>
				timeSet->Hours = 23;
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	2217      	movs	r2, #23
 80010aa:	709a      	strb	r2, [r3, #2]
		break;
 80010ac:	e135      	b.n	800131a <TimeSetUpdate+0x322>
			else timeSet->Hours--;
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	789b      	ldrb	r3, [r3, #2]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	709a      	strb	r2, [r3, #2]
		break;
 80010ba:	e12e      	b.n	800131a <TimeSetUpdate+0x322>
	case MINUTE_DT:
		if (button == ENTER_BUTTON){
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010c2:	d10f      	bne.n	80010e4 <TimeSetUpdate+0xec>
			if (app == SETTIME) *dt = SECOND_DT;
 80010c4:	4b64      	ldr	r3, [pc, #400]	@ (8001258 <TimeSetUpdate+0x260>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d102      	bne.n	80010d2 <TimeSetUpdate+0xda>
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2202      	movs	r2, #2
 80010d0:	801a      	strh	r2, [r3, #0]
			if (app == SETALARM) *dt = DAY_DT;
 80010d2:	4b61      	ldr	r3, [pc, #388]	@ (8001258 <TimeSetUpdate+0x260>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	f040 8121 	bne.w	800131e <TimeSetUpdate+0x326>
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2203      	movs	r2, #3
 80010e0:	801a      	strh	r2, [r3, #0]
			if (timeSet->Minutes == 0){
				timeSet->Minutes = 59;
			}
			else timeSet->Minutes--;
		}
		break;
 80010e2:	e11c      	b.n	800131e <TimeSetUpdate+0x326>
		else if (button == RIGHT_BUTTON){
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	2b40      	cmp	r3, #64	@ 0x40
 80010e8:	d10e      	bne.n	8001108 <TimeSetUpdate+0x110>
			if (timeSet->Minutes == 59){
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	785b      	ldrb	r3, [r3, #1]
 80010ee:	2b3b      	cmp	r3, #59	@ 0x3b
 80010f0:	d103      	bne.n	80010fa <TimeSetUpdate+0x102>
				timeSet->Minutes = 0;
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	2200      	movs	r2, #0
 80010f6:	705a      	strb	r2, [r3, #1]
		break;
 80010f8:	e111      	b.n	800131e <TimeSetUpdate+0x326>
			else timeSet->Minutes++;
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	785b      	ldrb	r3, [r3, #1]
 80010fe:	3301      	adds	r3, #1
 8001100:	b2da      	uxtb	r2, r3
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	705a      	strb	r2, [r3, #1]
		break;
 8001106:	e10a      	b.n	800131e <TimeSetUpdate+0x326>
		else if (button == LEFT_BUTTON){
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800110e:	f040 8106 	bne.w	800131e <TimeSetUpdate+0x326>
			if (timeSet->Minutes == 0){
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	785b      	ldrb	r3, [r3, #1]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d103      	bne.n	8001122 <TimeSetUpdate+0x12a>
				timeSet->Minutes = 59;
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	223b      	movs	r2, #59	@ 0x3b
 800111e:	705a      	strb	r2, [r3, #1]
		break;
 8001120:	e0fd      	b.n	800131e <TimeSetUpdate+0x326>
			else timeSet->Minutes--;
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	785b      	ldrb	r3, [r3, #1]
 8001126:	3b01      	subs	r3, #1
 8001128:	b2da      	uxtb	r2, r3
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	705a      	strb	r2, [r3, #1]
		break;
 800112e:	e0f6      	b.n	800131e <TimeSetUpdate+0x326>
	case SECOND_DT:
		if (button == ENTER_BUTTON) *dt = YEAR_DT;
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001136:	d103      	bne.n	8001140 <TimeSetUpdate+0x148>
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2206      	movs	r2, #6
 800113c:	801a      	strh	r2, [r3, #0]
			if (timeSet->Seconds == 0){
				timeSet->Seconds = 59;
			}
			else timeSet->Seconds--;
		}
		break;
 800113e:	e0f0      	b.n	8001322 <TimeSetUpdate+0x32a>
		else if (button == RIGHT_BUTTON){
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	2b40      	cmp	r3, #64	@ 0x40
 8001144:	d10e      	bne.n	8001164 <TimeSetUpdate+0x16c>
			if (timeSet->Seconds == 59){
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b3b      	cmp	r3, #59	@ 0x3b
 800114c:	d103      	bne.n	8001156 <TimeSetUpdate+0x15e>
				timeSet->Seconds = 0;
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
		break;
 8001154:	e0e5      	b.n	8001322 <TimeSetUpdate+0x32a>
			else timeSet->Seconds++;
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	3301      	adds	r3, #1
 800115c:	b2da      	uxtb	r2, r3
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	701a      	strb	r2, [r3, #0]
		break;
 8001162:	e0de      	b.n	8001322 <TimeSetUpdate+0x32a>
		else if (button == LEFT_BUTTON){
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800116a:	f040 80da 	bne.w	8001322 <TimeSetUpdate+0x32a>
			if (timeSet->Seconds == 0){
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d103      	bne.n	800117e <TimeSetUpdate+0x186>
				timeSet->Seconds = 59;
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	223b      	movs	r2, #59	@ 0x3b
 800117a:	701a      	strb	r2, [r3, #0]
		break;
 800117c:	e0d1      	b.n	8001322 <TimeSetUpdate+0x32a>
			else timeSet->Seconds--;
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	3b01      	subs	r3, #1
 8001184:	b2da      	uxtb	r2, r3
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	701a      	strb	r2, [r3, #0]
		break;
 800118a:	e0ca      	b.n	8001322 <TimeSetUpdate+0x32a>
	case YEAR_DT:
		if (button == ENTER_BUTTON) *dt = MONTH_DT;
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001192:	d103      	bne.n	800119c <TimeSetUpdate+0x1a4>
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2205      	movs	r2, #5
 8001198:	801a      	strh	r2, [r3, #0]
			if (timeSet->Year == 0){
				timeSet->Year = 99;
			}
			else timeSet->Year--;
		}
		break;
 800119a:	e0c4      	b.n	8001326 <TimeSetUpdate+0x32e>
		else if (button == RIGHT_BUTTON){
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	2b40      	cmp	r3, #64	@ 0x40
 80011a0:	d10e      	bne.n	80011c0 <TimeSetUpdate+0x1c8>
			if (timeSet->Year == 99){
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	88db      	ldrh	r3, [r3, #6]
 80011a6:	2b63      	cmp	r3, #99	@ 0x63
 80011a8:	d103      	bne.n	80011b2 <TimeSetUpdate+0x1ba>
				timeSet->Year = 0;
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	2200      	movs	r2, #0
 80011ae:	80da      	strh	r2, [r3, #6]
		break;
 80011b0:	e0b9      	b.n	8001326 <TimeSetUpdate+0x32e>
			else timeSet->Year++;
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	88db      	ldrh	r3, [r3, #6]
 80011b6:	3301      	adds	r3, #1
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	80da      	strh	r2, [r3, #6]
		break;
 80011be:	e0b2      	b.n	8001326 <TimeSetUpdate+0x32e>
		else if (button == LEFT_BUTTON){
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011c6:	f040 80ae 	bne.w	8001326 <TimeSetUpdate+0x32e>
			if (timeSet->Year == 0){
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	88db      	ldrh	r3, [r3, #6]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d103      	bne.n	80011da <TimeSetUpdate+0x1e2>
				timeSet->Year = 99;
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	2263      	movs	r2, #99	@ 0x63
 80011d6:	80da      	strh	r2, [r3, #6]
		break;
 80011d8:	e0a5      	b.n	8001326 <TimeSetUpdate+0x32e>
			else timeSet->Year--;
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	88db      	ldrh	r3, [r3, #6]
 80011de:	3b01      	subs	r3, #1
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	80da      	strh	r2, [r3, #6]
		break;
 80011e6:	e09e      	b.n	8001326 <TimeSetUpdate+0x32e>
	case MONTH_DT:
		if (button == ENTER_BUTTON) *dt = DATE_DT;
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011ee:	d103      	bne.n	80011f8 <TimeSetUpdate+0x200>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2204      	movs	r2, #4
 80011f4:	801a      	strh	r2, [r3, #0]
			if (timeSet->Month == 1){
				timeSet->Month = 12;
			}
			else timeSet->Month--;
		}
		break;
 80011f6:	e098      	b.n	800132a <TimeSetUpdate+0x332>
		else if (button == RIGHT_BUTTON){
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	2b40      	cmp	r3, #64	@ 0x40
 80011fc:	d10e      	bne.n	800121c <TimeSetUpdate+0x224>
			if (timeSet->Month == 12){
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	795b      	ldrb	r3, [r3, #5]
 8001202:	2b0c      	cmp	r3, #12
 8001204:	d103      	bne.n	800120e <TimeSetUpdate+0x216>
				timeSet->Month = 1;
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	2201      	movs	r2, #1
 800120a:	715a      	strb	r2, [r3, #5]
		break;
 800120c:	e08d      	b.n	800132a <TimeSetUpdate+0x332>
			else timeSet->Month++;
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	795b      	ldrb	r3, [r3, #5]
 8001212:	3301      	adds	r3, #1
 8001214:	b2da      	uxtb	r2, r3
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	715a      	strb	r2, [r3, #5]
		break;
 800121a:	e086      	b.n	800132a <TimeSetUpdate+0x332>
		else if (button == LEFT_BUTTON){
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001222:	f040 8082 	bne.w	800132a <TimeSetUpdate+0x332>
			if (timeSet->Month == 1){
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	795b      	ldrb	r3, [r3, #5]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d103      	bne.n	8001236 <TimeSetUpdate+0x23e>
				timeSet->Month = 12;
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	220c      	movs	r2, #12
 8001232:	715a      	strb	r2, [r3, #5]
		break;
 8001234:	e079      	b.n	800132a <TimeSetUpdate+0x332>
			else timeSet->Month--;
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	795b      	ldrb	r3, [r3, #5]
 800123a:	3b01      	subs	r3, #1
 800123c:	b2da      	uxtb	r2, r3
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	715a      	strb	r2, [r3, #5]
		break;
 8001242:	e072      	b.n	800132a <TimeSetUpdate+0x332>
	case DATE_DT:
		if (button == ENTER_BUTTON) *dt = DAY_DT;
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800124a:	d107      	bne.n	800125c <TimeSetUpdate+0x264>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2203      	movs	r2, #3
 8001250:	801a      	strh	r2, [r3, #0]
			if (timeSet->Date == 1){
				timeSet->Date = maxDay[(timeSet->Month)-1];
			}
			else timeSet->Date--;
		}
		break;
 8001252:	e06c      	b.n	800132e <TimeSetUpdate+0x336>
 8001254:	08004ee8 	.word	0x08004ee8
 8001258:	200000f4 	.word	0x200000f4
		else if (button == RIGHT_BUTTON){
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	2b40      	cmp	r3, #64	@ 0x40
 8001260:	d115      	bne.n	800128e <TimeSetUpdate+0x296>
			if (timeSet->Date == maxDay[(timeSet->Month)-1]){
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	791a      	ldrb	r2, [r3, #4]
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	795b      	ldrb	r3, [r3, #5]
 800126a:	3b01      	subs	r3, #1
 800126c:	3320      	adds	r3, #32
 800126e:	443b      	add	r3, r7
 8001270:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001274:	429a      	cmp	r2, r3
 8001276:	d103      	bne.n	8001280 <TimeSetUpdate+0x288>
				timeSet->Date = 1;
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	2201      	movs	r2, #1
 800127c:	711a      	strb	r2, [r3, #4]
		break;
 800127e:	e056      	b.n	800132e <TimeSetUpdate+0x336>
			else timeSet->Date++;
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	791b      	ldrb	r3, [r3, #4]
 8001284:	3301      	adds	r3, #1
 8001286:	b2da      	uxtb	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	711a      	strb	r2, [r3, #4]
		break;
 800128c:	e04f      	b.n	800132e <TimeSetUpdate+0x336>
		else if (button == LEFT_BUTTON){
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001294:	d14b      	bne.n	800132e <TimeSetUpdate+0x336>
			if (timeSet->Date == 1){
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	791b      	ldrb	r3, [r3, #4]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d109      	bne.n	80012b2 <TimeSetUpdate+0x2ba>
				timeSet->Date = maxDay[(timeSet->Month)-1];
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	795b      	ldrb	r3, [r3, #5]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	3320      	adds	r3, #32
 80012a6:	443b      	add	r3, r7
 80012a8:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	711a      	strb	r2, [r3, #4]
		break;
 80012b0:	e03d      	b.n	800132e <TimeSetUpdate+0x336>
			else timeSet->Date--;
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	791b      	ldrb	r3, [r3, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	711a      	strb	r2, [r3, #4]
		break;
 80012be:	e036      	b.n	800132e <TimeSetUpdate+0x336>
	case DAY_DT:
		if (button == ENTER_BUTTON) return true;
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012c6:	d101      	bne.n	80012cc <TimeSetUpdate+0x2d4>
 80012c8:	2301      	movs	r3, #1
 80012ca:	e034      	b.n	8001336 <TimeSetUpdate+0x33e>
		else if (button == RIGHT_BUTTON){
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	2b40      	cmp	r3, #64	@ 0x40
 80012d0:	d10e      	bne.n	80012f0 <TimeSetUpdate+0x2f8>
			if (timeSet->Day == 7){
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	78db      	ldrb	r3, [r3, #3]
 80012d6:	2b07      	cmp	r3, #7
 80012d8:	d103      	bne.n	80012e2 <TimeSetUpdate+0x2ea>
				timeSet->Day = 1;
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	2201      	movs	r2, #1
 80012de:	70da      	strb	r2, [r3, #3]
			if (timeSet->Day == 1){
				timeSet->Day = 7;
			}
			else timeSet->Day--;
		}
		break;
 80012e0:	e027      	b.n	8001332 <TimeSetUpdate+0x33a>
			else timeSet->Day++;
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	78db      	ldrb	r3, [r3, #3]
 80012e6:	3301      	adds	r3, #1
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	70da      	strb	r2, [r3, #3]
		break;
 80012ee:	e020      	b.n	8001332 <TimeSetUpdate+0x33a>
		else if (button == LEFT_BUTTON){
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012f6:	d11c      	bne.n	8001332 <TimeSetUpdate+0x33a>
			if (timeSet->Day == 1){
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	78db      	ldrb	r3, [r3, #3]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d103      	bne.n	8001308 <TimeSetUpdate+0x310>
				timeSet->Day = 7;
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	2207      	movs	r2, #7
 8001304:	70da      	strb	r2, [r3, #3]
		break;
 8001306:	e014      	b.n	8001332 <TimeSetUpdate+0x33a>
			else timeSet->Day--;
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	78db      	ldrb	r3, [r3, #3]
 800130c:	3b01      	subs	r3, #1
 800130e:	b2da      	uxtb	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	70da      	strb	r2, [r3, #3]
		break;
 8001314:	e00d      	b.n	8001332 <TimeSetUpdate+0x33a>
	default:
		break;
 8001316:	bf00      	nop
 8001318:	e00c      	b.n	8001334 <TimeSetUpdate+0x33c>
		break;
 800131a:	bf00      	nop
 800131c:	e00a      	b.n	8001334 <TimeSetUpdate+0x33c>
		break;
 800131e:	bf00      	nop
 8001320:	e008      	b.n	8001334 <TimeSetUpdate+0x33c>
		break;
 8001322:	bf00      	nop
 8001324:	e006      	b.n	8001334 <TimeSetUpdate+0x33c>
		break;
 8001326:	bf00      	nop
 8001328:	e004      	b.n	8001334 <TimeSetUpdate+0x33c>
		break;
 800132a:	bf00      	nop
 800132c:	e002      	b.n	8001334 <TimeSetUpdate+0x33c>
		break;
 800132e:	bf00      	nop
 8001330:	e000      	b.n	8001334 <TimeSetUpdate+0x33c>
		break;
 8001332:	bf00      	nop
	}
	return false;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3720      	adds	r7, #32
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop

08001340 <AppInit>:
 * Also gets alarm from DS3231 to check whether an alarm is set. If so, turns alarmIsSet to true, to display
 * an indicator on screen. Finally, initializes the main app FSM in ShowTime mode.
 * @param none
 * @retval none
 */
void AppInit(){
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0

	LCD_I2C_Init();
 8001344:	f000 faca 	bl	80018dc <LCD_I2C_Init>
	I2CDelay(1000);
 8001348:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800134c:	f000 fc7c 	bl	8001c48 <I2CDelay>
	LCD_I2C_ClearWrite("",0,0);
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	480c      	ldr	r0, [pc, #48]	@ (8001388 <AppInit+0x48>)
 8001356:	f000 fa95 	bl	8001884 <LCD_I2C_ClearWrite>
	LCD_I2C_ClearWrite("",1,0);
 800135a:	2200      	movs	r2, #0
 800135c:	2101      	movs	r1, #1
 800135e:	480a      	ldr	r0, [pc, #40]	@ (8001388 <AppInit+0x48>)
 8001360:	f000 fa90 	bl	8001884 <LCD_I2C_ClearWrite>
	MenuInit();
 8001364:	f7ff fc38 	bl	8000bd8 <MenuInit>
	GetAlarm(&alarm);
 8001368:	4808      	ldr	r0, [pc, #32]	@ (800138c <AppInit+0x4c>)
 800136a:	f000 f935 	bl	80015d8 <GetAlarm>
	alarmIsSet = IsAlarmSet(&alarm);
 800136e:	4807      	ldr	r0, [pc, #28]	@ (800138c <AppInit+0x4c>)
 8001370:	f000 f9e9 	bl	8001746 <IsAlarmSet>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	4b05      	ldr	r3, [pc, #20]	@ (8001390 <AppInit+0x50>)
 800137a:	701a      	strb	r2, [r3, #0]
	app = SHOWTIME;
 800137c:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <AppInit+0x54>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	08004ef4 	.word	0x08004ef4
 800138c:	200000e0 	.word	0x200000e0
 8001390:	200000e8 	.word	0x200000e8
 8001394:	200000f4 	.word	0x200000f4

08001398 <AppUpdate>:
 * @function AppUpdate
 * @brief Updates the main app FSM according to the current button pressed. It switches between modes and menu states
 * @param none
 * @retval none
 */
void AppUpdate(){
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
	uint16_t currentButton;
	currentButton = GetFromQueue();
 800139e:	f7ff fbeb 	bl	8000b78 <GetFromQueue>
 80013a2:	4603      	mov	r3, r0
 80013a4:	80fb      	strh	r3, [r7, #6]
	if (currentButton == -1) currentButton = 0;
	switch(app){
 80013a6:	4b20      	ldr	r3, [pc, #128]	@ (8001428 <AppUpdate+0x90>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d837      	bhi.n	800141e <AppUpdate+0x86>
 80013ae:	a201      	add	r2, pc, #4	@ (adr r2, 80013b4 <AppUpdate+0x1c>)
 80013b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b4:	080013c5 	.word	0x080013c5
 80013b8:	080013d9 	.word	0x080013d9
 80013bc:	080013f7 	.word	0x080013f7
 80013c0:	08001415 	.word	0x08001415
	case SHOWTIME:
		if (currentButton == MENU_BUTTON) app = MENU;
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	2b80      	cmp	r3, #128	@ 0x80
 80013c8:	d103      	bne.n	80013d2 <AppUpdate+0x3a>
 80013ca:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <AppUpdate+0x90>)
 80013cc:	2203      	movs	r2, #3
 80013ce:	701a      	strb	r2, [r3, #0]
		else ShowTimeMode();
		break;
 80013d0:	e026      	b.n	8001420 <AppUpdate+0x88>
		else ShowTimeMode();
 80013d2:	f7ff fda3 	bl	8000f1c <ShowTimeMode>
		break;
 80013d6:	e023      	b.n	8001420 <AppUpdate+0x88>
	case SETTIME:
		if (currentButton == MENU_BUTTON){
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	2b80      	cmp	r3, #128	@ 0x80
 80013dc:	d106      	bne.n	80013ec <AppUpdate+0x54>
			TimeSetInit(&datetimeSet);
 80013de:	4813      	ldr	r0, [pc, #76]	@ (800142c <AppUpdate+0x94>)
 80013e0:	f7ff fdfc 	bl	8000fdc <TimeSetInit>
			app = MENU;
 80013e4:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <AppUpdate+0x90>)
 80013e6:	2203      	movs	r2, #3
 80013e8:	701a      	strb	r2, [r3, #0]
		}
		else SetTimeMode(currentButton);
		break;
 80013ea:	e019      	b.n	8001420 <AppUpdate+0x88>
		else SetTimeMode(currentButton);
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fce4 	bl	8000dbc <SetTimeMode>
		break;
 80013f4:	e014      	b.n	8001420 <AppUpdate+0x88>
	case SETALARM:
		if (currentButton == MENU_BUTTON){
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	2b80      	cmp	r3, #128	@ 0x80
 80013fa:	d106      	bne.n	800140a <AppUpdate+0x72>
			TimeSetInit(&alarmSet);
 80013fc:	480c      	ldr	r0, [pc, #48]	@ (8001430 <AppUpdate+0x98>)
 80013fe:	f7ff fded 	bl	8000fdc <TimeSetInit>
			app = MENU;
 8001402:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <AppUpdate+0x90>)
 8001404:	2203      	movs	r2, #3
 8001406:	701a      	strb	r2, [r3, #0]
		}
		else SetAlarmMode(currentButton);
		break;
 8001408:	e00a      	b.n	8001420 <AppUpdate+0x88>
		else SetAlarmMode(currentButton);
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fc6f 	bl	8000cf0 <SetAlarmMode>
		break;
 8001412:	e005      	b.n	8001420 <AppUpdate+0x88>
	case MENU:
		MenuUpdate(currentButton);
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fbea 	bl	8000bf0 <MenuUpdate>
		break;
 800141c:	e000      	b.n	8001420 <AppUpdate+0x88>
	default:
		break;
 800141e:	bf00      	nop
	}
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200000f4 	.word	0x200000f4
 800142c:	200001d9 	.word	0x200001d9
 8001430:	200000e9 	.word	0x200000e9

08001434 <ButtonPressed>:
 * @function ButtonPressed
 * @brief Callback function triggered by button interruption. Adds button pressed to a queue
 * @param GPIO_Pin: number of pin pressed
 * @retval none
 */
void ButtonPressed(uint16_t GPIO_Pin){
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]
	AddToQueue(GPIO_Pin);
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fb2b 	bl	8000a9c <AddToQueue>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <SwitchCursor>:
 * @function SwitchCursor
 * @brief Switches cursor according to the state of the time/alarm set FSM
 * @param dt: pointer to the timeset object to be analized
 * @retval none
 */
void SwitchCursor(uint16_t *dt){
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	switch(*dt){
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	2b06      	cmp	r3, #6
 800145e:	d84f      	bhi.n	8001500 <SwitchCursor+0xb0>
 8001460:	a201      	add	r2, pc, #4	@ (adr r2, 8001468 <SwitchCursor+0x18>)
 8001462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001466:	bf00      	nop
 8001468:	08001485 	.word	0x08001485
 800146c:	080014a1 	.word	0x080014a1
 8001470:	080014bd 	.word	0x080014bd
 8001474:	080014c7 	.word	0x080014c7
 8001478:	080014e3 	.word	0x080014e3
 800147c:	080014ed 	.word	0x080014ed
 8001480:	080014f7 	.word	0x080014f7
	case HOUR_DT:
		if (app == SETTIME) LCD_I2C_SetCursor(0,3);
 8001484:	4b20      	ldr	r3, [pc, #128]	@ (8001508 <SwitchCursor+0xb8>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d104      	bne.n	8001496 <SwitchCursor+0x46>
 800148c:	2103      	movs	r1, #3
 800148e:	2000      	movs	r0, #0
 8001490:	f000 faae 	bl	80019f0 <LCD_I2C_SetCursor>
		else LCD_I2C_SetCursor(0,4);
		break;
 8001494:	e034      	b.n	8001500 <SwitchCursor+0xb0>
		else LCD_I2C_SetCursor(0,4);
 8001496:	2104      	movs	r1, #4
 8001498:	2000      	movs	r0, #0
 800149a:	f000 faa9 	bl	80019f0 <LCD_I2C_SetCursor>
		break;
 800149e:	e02f      	b.n	8001500 <SwitchCursor+0xb0>
	case MINUTE_DT:
		if (app == SETTIME) LCD_I2C_SetCursor(0,6);
 80014a0:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <SwitchCursor+0xb8>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d104      	bne.n	80014b2 <SwitchCursor+0x62>
 80014a8:	2106      	movs	r1, #6
 80014aa:	2000      	movs	r0, #0
 80014ac:	f000 faa0 	bl	80019f0 <LCD_I2C_SetCursor>
		else LCD_I2C_SetCursor(0,7);
		break;
 80014b0:	e026      	b.n	8001500 <SwitchCursor+0xb0>
		else LCD_I2C_SetCursor(0,7);
 80014b2:	2107      	movs	r1, #7
 80014b4:	2000      	movs	r0, #0
 80014b6:	f000 fa9b 	bl	80019f0 <LCD_I2C_SetCursor>
		break;
 80014ba:	e021      	b.n	8001500 <SwitchCursor+0xb0>
	case SECOND_DT: LCD_I2C_SetCursor(0,9); break;
 80014bc:	2109      	movs	r1, #9
 80014be:	2000      	movs	r0, #0
 80014c0:	f000 fa96 	bl	80019f0 <LCD_I2C_SetCursor>
 80014c4:	e01c      	b.n	8001500 <SwitchCursor+0xb0>
	case DAY_DT:
		if (app == SETTIME) LCD_I2C_SetCursor(1,0);
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <SwitchCursor+0xb8>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d104      	bne.n	80014d8 <SwitchCursor+0x88>
 80014ce:	2100      	movs	r1, #0
 80014d0:	2001      	movs	r0, #1
 80014d2:	f000 fa8d 	bl	80019f0 <LCD_I2C_SetCursor>
		else LCD_I2C_SetCursor(1,5);
		break;
 80014d6:	e013      	b.n	8001500 <SwitchCursor+0xb0>
		else LCD_I2C_SetCursor(1,5);
 80014d8:	2105      	movs	r1, #5
 80014da:	2001      	movs	r0, #1
 80014dc:	f000 fa88 	bl	80019f0 <LCD_I2C_SetCursor>
		break;
 80014e0:	e00e      	b.n	8001500 <SwitchCursor+0xb0>
	case DATE_DT: LCD_I2C_SetCursor(1,4); break;
 80014e2:	2104      	movs	r1, #4
 80014e4:	2001      	movs	r0, #1
 80014e6:	f000 fa83 	bl	80019f0 <LCD_I2C_SetCursor>
 80014ea:	e009      	b.n	8001500 <SwitchCursor+0xb0>
	case MONTH_DT: LCD_I2C_SetCursor(1,7); break;
 80014ec:	2107      	movs	r1, #7
 80014ee:	2001      	movs	r0, #1
 80014f0:	f000 fa7e 	bl	80019f0 <LCD_I2C_SetCursor>
 80014f4:	e004      	b.n	8001500 <SwitchCursor+0xb0>
	case YEAR_DT: LCD_I2C_SetCursor(1,10); break;
 80014f6:	210a      	movs	r1, #10
 80014f8:	2001      	movs	r0, #1
 80014fa:	f000 fa79 	bl	80019f0 <LCD_I2C_SetCursor>
 80014fe:	bf00      	nop
	}
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200000f4 	.word	0x200000f4

0800150c <BcdToDec>:
 * @brief Includes the header file of this library.
 */
#include "ds3231.h"

/*Convert a BCD-encoded value to decimal. Declared in header file*/
uint8_t BcdToDec(uint8_t val) {
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
    return ((val >> NIBBLE_SIZE) * 10) + (val & LOW_NIBBLE_MASK); /**< Not necessary to consider special cases because of the solution addressed*/
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	b2db      	uxtb	r3, r3
 800151c:	461a      	mov	r2, r3
 800151e:	0092      	lsls	r2, r2, #2
 8001520:	4413      	add	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	b2da      	uxtb	r2, r3
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 030f 	and.w	r3, r3, #15
 800152c:	b2db      	uxtb	r3, r3
 800152e:	4413      	add	r3, r2
 8001530:	b2db      	uxtb	r3, r3
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <CopyTime>:

/*Copies the info of a time struct into another. Declared in header file*/
void CopyTime(DS3231_DateTime *timeToCopy, DS3231_DateTime *timeToPaste){
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	6039      	str	r1, [r7, #0]
	timeToPaste->Seconds = timeToCopy->Seconds;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	781a      	ldrb	r2, [r3, #0]
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	701a      	strb	r2, [r3, #0]
	timeToPaste->Minutes = timeToCopy->Minutes;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	785a      	ldrb	r2, [r3, #1]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	705a      	strb	r2, [r3, #1]
	timeToPaste->Hours = timeToCopy->Hours;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	789a      	ldrb	r2, [r3, #2]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	709a      	strb	r2, [r3, #2]
	timeToPaste->Day = timeToCopy->Day;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	78da      	ldrb	r2, [r3, #3]
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	70da      	strb	r2, [r3, #3]
	timeToPaste->Date = timeToCopy->Date;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	791a      	ldrb	r2, [r3, #4]
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	711a      	strb	r2, [r3, #4]
	timeToPaste->Month = timeToCopy->Month;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	795a      	ldrb	r2, [r3, #5]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	715a      	strb	r2, [r3, #5]
	timeToPaste->Year = timeToCopy->Year;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	88da      	ldrh	r2, [r3, #6]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	80da      	strh	r2, [r3, #6]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <DecToBcd>:

/*Convert a decimal value to BCD-encoded. Declared in header file*/
uint8_t DecToBcd(uint8_t val) {
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
    return ((val / 10) << NIBBLE_SIZE) | (val % 10); /**< Not necessary to consider special cases because of the solution addressed*/
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	4a0e      	ldr	r2, [pc, #56]	@ (80015d4 <DecToBcd+0x48>)
 800159a:	fba2 2303 	umull	r2, r3, r2, r3
 800159e:	08db      	lsrs	r3, r3, #3
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	b25b      	sxtb	r3, r3
 80015a4:	011b      	lsls	r3, r3, #4
 80015a6:	b258      	sxtb	r0, r3
 80015a8:	79fa      	ldrb	r2, [r7, #7]
 80015aa:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <DecToBcd+0x48>)
 80015ac:	fba3 1302 	umull	r1, r3, r3, r2
 80015b0:	08d9      	lsrs	r1, r3, #3
 80015b2:	460b      	mov	r3, r1
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	b25b      	sxtb	r3, r3
 80015c0:	4303      	orrs	r3, r0
 80015c2:	b25b      	sxtb	r3, r3
 80015c4:	b2db      	uxtb	r3, r3
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	cccccccd 	.word	0xcccccccd

080015d8 <GetAlarm>:

/*Gets the alarm from the DS3231 RTC. Declared in header file*/
void GetAlarm(DS3231_DateTime *time) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
    uint8_t buffer[ALARM_SIZE-1]; /**< In this case, it is not necessary to indicate start register in the data to transmit cause MemRead is used*/
    I2CReadMemory(ALARM_START_REGISTER,DS3231_ADDR,buffer,ALARM_SIZE-1);
 80015e0:	f107 020c 	add.w	r2, r7, #12
 80015e4:	2303      	movs	r3, #3
 80015e6:	21d0      	movs	r1, #208	@ 0xd0
 80015e8:	2008      	movs	r0, #8
 80015ea:	f000 fba1 	bl	8001d30 <I2CReadMemory>

    time->Minutes = BcdToDec(buffer[0]);
 80015ee:	7b3b      	ldrb	r3, [r7, #12]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff8b 	bl	800150c <BcdToDec>
 80015f6:	4603      	mov	r3, r0
 80015f8:	461a      	mov	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	705a      	strb	r2, [r3, #1]
    time->Hours = BcdToDec(buffer[1] & MODE24_MASK); /**< Implemented only in 24H mode*/
 80015fe:	7b7b      	ldrb	r3, [r7, #13]
 8001600:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ff80 	bl	800150c <BcdToDec>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	709a      	strb	r2, [r3, #2]
    time->Day   = BcdToDec(buffer[2] & LOW_NIBBLE_MASK);  /**< Implemented only in Day of the week alarm mode*/
 8001614:	7bbb      	ldrb	r3, [r7, #14]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	b2db      	uxtb	r3, r3
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff75 	bl	800150c <BcdToDec>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	70da      	strb	r2, [r3, #3]
}
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <GetTime>:

/*Gets the time from the DS3231 RTC. Declared in header file*/
void GetTime(DS3231_DateTime *time) {
 8001632:	b580      	push	{r7, lr}
 8001634:	b084      	sub	sp, #16
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
    uint8_t buffer[TIME_SIZE-1]; /**< In this case, it is not necesary to indicate start register in the data to transmit cause MemRead is used*/
    I2CReadMemory(TIME_START_REGISTER,DS3231_ADDR,buffer,TIME_SIZE-1);
 800163a:	f107 0208 	add.w	r2, r7, #8
 800163e:	2307      	movs	r3, #7
 8001640:	21d0      	movs	r1, #208	@ 0xd0
 8001642:	2000      	movs	r0, #0
 8001644:	f000 fb74 	bl	8001d30 <I2CReadMemory>

    time->Seconds = BcdToDec(buffer[0]);
 8001648:	7a3b      	ldrb	r3, [r7, #8]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ff5e 	bl	800150c <BcdToDec>
 8001650:	4603      	mov	r3, r0
 8001652:	461a      	mov	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	701a      	strb	r2, [r3, #0]
    time->Minutes = BcdToDec(buffer[1]);
 8001658:	7a7b      	ldrb	r3, [r7, #9]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff ff56 	bl	800150c <BcdToDec>
 8001660:	4603      	mov	r3, r0
 8001662:	461a      	mov	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	705a      	strb	r2, [r3, #1]
    time->Hours   = BcdToDec(buffer[2] & MODE24_MASK);  /**< Implemented only in 24H mode*/
 8001668:	7abb      	ldrb	r3, [r7, #10]
 800166a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800166e:	b2db      	uxtb	r3, r3
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff4b 	bl	800150c <BcdToDec>
 8001676:	4603      	mov	r3, r0
 8001678:	461a      	mov	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	709a      	strb	r2, [r3, #2]
    time->Day     = BcdToDec(buffer[3]);
 800167e:	7afb      	ldrb	r3, [r7, #11]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff43 	bl	800150c <BcdToDec>
 8001686:	4603      	mov	r3, r0
 8001688:	461a      	mov	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	70da      	strb	r2, [r3, #3]
    time->Date    = BcdToDec(buffer[4]);
 800168e:	7b3b      	ldrb	r3, [r7, #12]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff3b 	bl	800150c <BcdToDec>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	711a      	strb	r2, [r3, #4]
    time->Month   = BcdToDec(buffer[5] & CENTURY_MASK); /**< Cleans the MSB that is associated to the century change*/
 800169e:	7b7b      	ldrb	r3, [r7, #13]
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ff30 	bl	800150c <BcdToDec>
 80016ac:	4603      	mov	r3, r0
 80016ae:	461a      	mov	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	715a      	strb	r2, [r3, #5]
    time->Year    = YEAR_CORRECTION + BcdToDec(buffer[6]);
 80016b4:	7bbb      	ldrb	r3, [r7, #14]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ff28 	bl	800150c <BcdToDec>
 80016bc:	4603      	mov	r3, r0
 80016be:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	80da      	strh	r2, [r3, #6]
}
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <InitTime>:

/*Initializes a time struct. Declared in header file*/
void InitTime(DS3231_DateTime *time){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	time->Seconds = BcdToDec(MIDNIGHT);
 80016d8:	2000      	movs	r0, #0
 80016da:	f7ff ff17 	bl	800150c <BcdToDec>
 80016de:	4603      	mov	r3, r0
 80016e0:	461a      	mov	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	701a      	strb	r2, [r3, #0]
	time->Minutes = BcdToDec(MIDNIGHT);
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7ff ff10 	bl	800150c <BcdToDec>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	705a      	strb	r2, [r3, #1]
	time->Hours = BcdToDec(MIDNIGHT);
 80016f4:	2000      	movs	r0, #0
 80016f6:	f7ff ff09 	bl	800150c <BcdToDec>
 80016fa:	4603      	mov	r3, r0
 80016fc:	461a      	mov	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	709a      	strb	r2, [r3, #2]
	time->Day = BcdToDec(FIRST_DAY);
 8001702:	2001      	movs	r0, #1
 8001704:	f7ff ff02 	bl	800150c <BcdToDec>
 8001708:	4603      	mov	r3, r0
 800170a:	461a      	mov	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	70da      	strb	r2, [r3, #3]
	time->Date = BcdToDec(FIRST);
 8001710:	2001      	movs	r0, #1
 8001712:	f7ff fefb 	bl	800150c <BcdToDec>
 8001716:	4603      	mov	r3, r0
 8001718:	461a      	mov	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	711a      	strb	r2, [r3, #4]
	time->Month = BcdToDec(JANUARY);
 800171e:	2001      	movs	r0, #1
 8001720:	f7ff fef4 	bl	800150c <BcdToDec>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	715a      	strb	r2, [r3, #5]
	time->Year = YEAR_CORRECTION + BcdToDec(Y2K);
 800172c:	2000      	movs	r0, #0
 800172e:	f7ff feed 	bl	800150c <BcdToDec>
 8001732:	4603      	mov	r3, r0
 8001734:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001738:	b29a      	uxth	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	80da      	strh	r2, [r3, #6]
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <IsAlarmSet>:

/*Checks whether there is an alarm set to the DS3231 RTC. Declared in header file*/
bool IsAlarmSet(DS3231_DateTime *alarm) {
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
    return ((alarm->Day >= FIRST_DAY)&&(alarm->Day <= LAST_DAY)); /**< If alarm is set, Day byte varies from 1 to 7. Otherwise, no alarm is set*/
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	78db      	ldrb	r3, [r3, #3]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d005      	beq.n	8001762 <IsAlarmSet+0x1c>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	78db      	ldrb	r3, [r3, #3]
 800175a:	2b07      	cmp	r3, #7
 800175c:	d801      	bhi.n	8001762 <IsAlarmSet+0x1c>
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <IsAlarmSet+0x1e>
 8001762:	2300      	movs	r3, #0
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	b2db      	uxtb	r3, r3
}
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <SetAlarm>:

/*Sets the alarm of the DS3231 RTC. Declared in header file*/
void SetAlarm(DS3231_DateTime *time){
 8001776:	b580      	push	{r7, lr}
 8001778:	b084      	sub	sp, #16
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
	uint8_t buffer[ALARM_SIZE];

	buffer[0] = ALARM_START_REGISTER;
 800177e:	2308      	movs	r3, #8
 8001780:	733b      	strb	r3, [r7, #12]
	buffer[1] = DecToBcd(time->Minutes);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	785b      	ldrb	r3, [r3, #1]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff ff00 	bl	800158c <DecToBcd>
 800178c:	4603      	mov	r3, r0
 800178e:	737b      	strb	r3, [r7, #13]
	buffer[2] = DecToBcd(time->Hours) & MODE24_MASK; /**< Implemented only in 24H mode*/
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	789b      	ldrb	r3, [r3, #2]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fef9 	bl	800158c <DecToBcd>
 800179a:	4603      	mov	r3, r0
 800179c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	73bb      	strb	r3, [r7, #14]
	buffer[3] = DecToBcd(time->Day) & LOW_NIBBLE_MASK; /**< Implemented only in Day of the week alarm mode*/
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	78db      	ldrb	r3, [r3, #3]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff feef 	bl	800158c <DecToBcd>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f003 030f 	and.w	r3, r3, #15
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	73fb      	strb	r3, [r7, #15]

	I2CMasterTransmit(DS3231_ADDR, buffer, ALARM_SIZE);
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	2204      	movs	r2, #4
 80017be:	4619      	mov	r1, r3
 80017c0:	20d0      	movs	r0, #208	@ 0xd0
 80017c2:	f000 fa9d 	bl	8001d00 <I2CMasterTransmit>
}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <SetTime>:

/*Sets the time of the DS3231 RTC. Declared in header file*/
void SetTime(DS3231_DateTime *time) {
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b084      	sub	sp, #16
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
    uint8_t buffer[TIME_SIZE];

    buffer[0] = TIME_START_REGISTER;
 80017d6:	2300      	movs	r3, #0
 80017d8:	723b      	strb	r3, [r7, #8]
    buffer[1] = DecToBcd(time->Seconds) & CONTROL_REGISTER_MASK;  /**< Cleans the MSB that if set to 1 indicates to reset RTC*/
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fed4 	bl	800158c <DecToBcd>
 80017e4:	4603      	mov	r3, r0
 80017e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	727b      	strb	r3, [r7, #9]
    buffer[2] = DecToBcd(time->Minutes);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	785b      	ldrb	r3, [r3, #1]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff feca 	bl	800158c <DecToBcd>
 80017f8:	4603      	mov	r3, r0
 80017fa:	72bb      	strb	r3, [r7, #10]
    buffer[3] = DecToBcd(time->Hours) & MODE24_MASK; /**< Implemented only in 24H mode*/
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	789b      	ldrb	r3, [r3, #2]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fec3 	bl	800158c <DecToBcd>
 8001806:	4603      	mov	r3, r0
 8001808:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800180c:	b2db      	uxtb	r3, r3
 800180e:	72fb      	strb	r3, [r7, #11]
    buffer[4] = DecToBcd(time->Day);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	78db      	ldrb	r3, [r3, #3]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff feb9 	bl	800158c <DecToBcd>
 800181a:	4603      	mov	r3, r0
 800181c:	733b      	strb	r3, [r7, #12]
    buffer[5] = DecToBcd(time->Date);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	791b      	ldrb	r3, [r3, #4]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff feb2 	bl	800158c <DecToBcd>
 8001828:	4603      	mov	r3, r0
 800182a:	737b      	strb	r3, [r7, #13]
    buffer[6] = DecToBcd(time->Month) & CENTURY_MASK;  /**< Cleans the MSB that is associated to the century change*/
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	795b      	ldrb	r3, [r3, #5]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff feab 	bl	800158c <DecToBcd>
 8001836:	4603      	mov	r3, r0
 8001838:	f003 031f 	and.w	r3, r3, #31
 800183c:	b2db      	uxtb	r3, r3
 800183e:	73bb      	strb	r3, [r7, #14]
    buffer[7] = DecToBcd(time->Year - YEAR_CORRECTION);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	88db      	ldrh	r3, [r3, #6]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	3330      	adds	r3, #48	@ 0x30
 8001848:	b2db      	uxtb	r3, r3
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fe9e 	bl	800158c <DecToBcd>
 8001850:	4603      	mov	r3, r0
 8001852:	73fb      	strb	r3, [r7, #15]

    I2CMasterTransmit(DS3231_ADDR, buffer, TIME_SIZE);
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	2208      	movs	r2, #8
 800185a:	4619      	mov	r1, r3
 800185c:	20d0      	movs	r0, #208	@ 0xd0
 800185e:	f000 fa4f 	bl	8001d00 <I2CMasterTransmit>
}
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <LCD_I2C_Clear>:
 * @brief Includes the header file of this library.
 */
#include "lcd_i2c.h"

/*Clears the display. Declared in header file*/
void LCD_I2C_Clear() {
 800186a:	b580      	push	{r7, lr}
 800186c:	af00      	add	r7, sp, #0
    LCD_I2C_SendControlByte(0x00); // Clear display command
 800186e:	2000      	movs	r0, #0
 8001870:	f000 f8b0 	bl	80019d4 <LCD_I2C_SendControlByte>
    LCD_I2C_SendControlByte(0x10);
 8001874:	2010      	movs	r0, #16
 8001876:	f000 f8ad 	bl	80019d4 <LCD_I2C_SendControlByte>
    //LCD_I2C_SendControlByte(0x01);
    I2CDelay(2);
 800187a:	2002      	movs	r0, #2
 800187c:	f000 f9e4 	bl	8001c48 <I2CDelay>
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}

08001884 <LCD_I2C_ClearWrite>:

/*Clears and write a string in the indicated row. Declared in header file*/
void LCD_I2C_ClearWrite(char *str,uint8_t row, uint8_t col){
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	70fb      	strb	r3, [r7, #3]
 8001890:	4613      	mov	r3, r2
 8001892:	70bb      	strb	r3, [r7, #2]
	LCD_I2C_SetCursor(row, 0);
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f000 f8a9 	bl	80019f0 <LCD_I2C_SetCursor>
	I2CDelay(2);
 800189e:	2002      	movs	r0, #2
 80018a0:	f000 f9d2 	bl	8001c48 <I2CDelay>
	LCD_I2C_WriteString("                ");
 80018a4:	480c      	ldr	r0, [pc, #48]	@ (80018d8 <LCD_I2C_ClearWrite+0x54>)
 80018a6:	f000 f8bf 	bl	8001a28 <LCD_I2C_WriteString>
	I2CDelay(2);
 80018aa:	2002      	movs	r0, #2
 80018ac:	f000 f9cc 	bl	8001c48 <I2CDelay>
	LCD_I2C_SetCursor(row,col);
 80018b0:	78ba      	ldrb	r2, [r7, #2]
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	4611      	mov	r1, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 f89a 	bl	80019f0 <LCD_I2C_SetCursor>
	I2CDelay(2);
 80018bc:	2002      	movs	r0, #2
 80018be:	f000 f9c3 	bl	8001c48 <I2CDelay>
	LCD_I2C_WriteString(str);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f8b0 	bl	8001a28 <LCD_I2C_WriteString>
	I2CDelay(2);
 80018c8:	2002      	movs	r0, #2
 80018ca:	f000 f9bd 	bl	8001c48 <I2CDelay>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	08004ef8 	.word	0x08004ef8

080018dc <LCD_I2C_Init>:

/*Initializes the LCD. Declared in header file*/
void LCD_I2C_Init() {
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
    I2CDelay(50);
 80018e0:	2032      	movs	r0, #50	@ 0x32
 80018e2:	f000 f9b1 	bl	8001c48 <I2CDelay>

    // Initialization sequence (adapted for 4-bit mode)
    LCD_I2C_SendControlByte(0x30);
 80018e6:	2030      	movs	r0, #48	@ 0x30
 80018e8:	f000 f874 	bl	80019d4 <LCD_I2C_SendControlByte>
    I2CDelay(5);
 80018ec:	2005      	movs	r0, #5
 80018ee:	f000 f9ab 	bl	8001c48 <I2CDelay>
    LCD_I2C_SendControlByte(0x30);
 80018f2:	2030      	movs	r0, #48	@ 0x30
 80018f4:	f000 f86e 	bl	80019d4 <LCD_I2C_SendControlByte>
    I2CDelay(5);
 80018f8:	2005      	movs	r0, #5
 80018fa:	f000 f9a5 	bl	8001c48 <I2CDelay>
    LCD_I2C_SendControlByte(0x30);
 80018fe:	2030      	movs	r0, #48	@ 0x30
 8001900:	f000 f868 	bl	80019d4 <LCD_I2C_SendControlByte>
    I2CDelay(5);
 8001904:	2005      	movs	r0, #5
 8001906:	f000 f99f 	bl	8001c48 <I2CDelay>

    LCD_I2C_SendControlByte(0x20);
 800190a:	2020      	movs	r0, #32
 800190c:	f000 f862 	bl	80019d4 <LCD_I2C_SendControlByte>
    I2CDelay(1);
 8001910:	2001      	movs	r0, #1
 8001912:	f000 f999 	bl	8001c48 <I2CDelay>

    LCD_I2C_SendControlByte(0x20);  // Function set: 4-bit, 2 lines, 5x8 font
 8001916:	2020      	movs	r0, #32
 8001918:	f000 f85c 	bl	80019d4 <LCD_I2C_SendControlByte>
    LCD_I2C_SendControlByte(0x80);
 800191c:	2080      	movs	r0, #128	@ 0x80
 800191e:	f000 f859 	bl	80019d4 <LCD_I2C_SendControlByte>
    I2CDelay(1);
 8001922:	2001      	movs	r0, #1
 8001924:	f000 f990 	bl	8001c48 <I2CDelay>

    LCD_I2C_SendControlByte(0x00);  // Display control: Display off, Cursor off, Blink off
 8001928:	2000      	movs	r0, #0
 800192a:	f000 f853 	bl	80019d4 <LCD_I2C_SendControlByte>
    LCD_I2C_SendControlByte(0xF0);
 800192e:	20f0      	movs	r0, #240	@ 0xf0
 8001930:	f000 f850 	bl	80019d4 <LCD_I2C_SendControlByte>
    I2CDelay(1);
 8001934:	2001      	movs	r0, #1
 8001936:	f000 f987 	bl	8001c48 <I2CDelay>

    LCD_I2C_SendControlByte(0x00);  // Entry mode set: Increment, no shift
 800193a:	2000      	movs	r0, #0
 800193c:	f000 f84a 	bl	80019d4 <LCD_I2C_SendControlByte>
    LCD_I2C_SendControlByte(0x60);
 8001940:	2060      	movs	r0, #96	@ 0x60
 8001942:	f000 f847 	bl	80019d4 <LCD_I2C_SendControlByte>
    I2CDelay(1);
 8001946:	2001      	movs	r0, #1
 8001948:	f000 f97e 	bl	8001c48 <I2CDelay>

    LCD_I2C_Clear();
 800194c:	f7ff ff8d 	bl	800186a <LCD_I2C_Clear>
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}

08001954 <LCD_I2C_Send>:

/*Send one 8-bit byte to the display. It sends each nibble twice, latching the enable bit. Declared in header file*/
void LCD_I2C_Send(uint8_t data, uint8_t rs) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	460a      	mov	r2, r1
 800195e:	71fb      	strb	r3, [r7, #7]
 8001960:	4613      	mov	r3, r2
 8001962:	71bb      	strb	r3, [r7, #6]
    uint8_t data_u, data_l;
    uint8_t data_t[BYTES_PER_BYTE];
    data_u = (data&HIGH_NIBBLE_MASK)|rs|BACKLIGHT|READWRITE; /* masking the upper nibble and adding the control, backlight and write command */
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	f023 030f 	bic.w	r3, r3, #15
 800196c:	b25a      	sxtb	r2, r3
 800196e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001972:	4313      	orrs	r3, r2
 8001974:	b25b      	sxtb	r3, r3
 8001976:	f043 0308 	orr.w	r3, r3, #8
 800197a:	b25b      	sxtb	r3, r3
 800197c:	73fb      	strb	r3, [r7, #15]
    data_l = ((data<<4)&HIGH_NIBBLE_MASK)|rs|BACKLIGHT|READWRITE;  /* masking the lower nibble and adding the control, backlight and write command */
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	b25a      	sxtb	r2, r3
 8001986:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800198a:	4313      	orrs	r3, r2
 800198c:	b25b      	sxtb	r3, r3
 800198e:	f043 0308 	orr.w	r3, r3, #8
 8001992:	b25b      	sxtb	r3, r3
 8001994:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u|ENABLE;
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	b2db      	uxtb	r3, r3
 800199e:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u & ~ENABLE;
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	f023 0304 	bic.w	r3, r3, #4
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l|ENABLE;
 80019aa:	7bbb      	ldrb	r3, [r7, #14]
 80019ac:	f043 0304 	orr.w	r3, r3, #4
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l & ~ENABLE;
 80019b4:	7bbb      	ldrb	r3, [r7, #14]
 80019b6:	f023 0304 	bic.w	r3, r3, #4
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	72fb      	strb	r3, [r7, #11]
    I2CMasterTransmit(LCD_ADDR, data_t, BYTES_PER_BYTE);
 80019be:	f107 0308 	add.w	r3, r7, #8
 80019c2:	2204      	movs	r2, #4
 80019c4:	4619      	mov	r1, r3
 80019c6:	204e      	movs	r0, #78	@ 0x4e
 80019c8:	f000 f99a 	bl	8001d00 <I2CMasterTransmit>
}
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <LCD_I2C_SendControlByte>:

/*Send one 8-bit instruction byte to the display. Declared in header file*/
void LCD_I2C_SendControlByte(uint8_t data) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
    LCD_I2C_Send(data,0);
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff ffb6 	bl	8001954 <LCD_I2C_Send>
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <LCD_I2C_SetCursor>:

/*Sets the cursor. Declared in header file*/
void LCD_I2C_SetCursor(uint8_t row, uint8_t col) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	460a      	mov	r2, r1
 80019fa:	71fb      	strb	r3, [r7, #7]
 80019fc:	4613      	mov	r3, r2
 80019fe:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    if (row == 0) {
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d102      	bne.n	8001a0c <LCD_I2C_SetCursor+0x1c>
        address = 0x00 + col;
 8001a06:	79bb      	ldrb	r3, [r7, #6]
 8001a08:	73fb      	strb	r3, [r7, #15]
 8001a0a:	e002      	b.n	8001a12 <LCD_I2C_SetCursor+0x22>
    } else {
        address = 0x40 + col;
 8001a0c:	79bb      	ldrb	r3, [r7, #6]
 8001a0e:	3340      	adds	r3, #64	@ 0x40
 8001a10:	73fb      	strb	r3, [r7, #15]
    }
    LCD_I2C_SendControlByte(0x80|(address)); // Set DDRAM address command
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ffda 	bl	80019d4 <LCD_I2C_SendControlByte>
}
 8001a20:	bf00      	nop
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <LCD_I2C_WriteString>:

/*Writes a string in the display. Declared in header file*/
void LCD_I2C_WriteString(char *str) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001a30:	e008      	b.n	8001a44 <LCD_I2C_WriteString+0x1c>
        LCD_I2C_Send(*str, REGISTER_SELECT);  // Send character with RS=1 (data)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2101      	movs	r1, #1
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff8b 	bl	8001954 <LCD_I2C_Send>
        str++;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3301      	adds	r3, #1
 8001a42:	607b      	str	r3, [r7, #4]
    while (*str) {
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f2      	bne.n	8001a32 <LCD_I2C_WriteString+0xa>
    }
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <buttonReset>:
static void buttonReset(tick_t buttonNumber);

/**
 * @brief Definition of the function to reset button state. It changes "pressed" to false and initializes the delay
 */
static void buttonReset(tick_t buttonNumber){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	buttons[buttonNumber].pressed = false;
 8001a60:	4a09      	ldr	r2, [pc, #36]	@ (8001a88 <buttonReset+0x30>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	4413      	add	r3, r2
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
	delayInit(&(buttons[buttonNumber].delay),DELAY);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	4a05      	ldr	r2, [pc, #20]	@ (8001a88 <buttonReset+0x30>)
 8001a72:	4413      	add	r3, r2
 8001a74:	3304      	adds	r3, #4
 8001a76:	2128      	movs	r1, #40	@ 0x28
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe ffd8 	bl	8000a2e <delayInit>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000214 	.word	0x20000214

08001a8c <buttonsReset>:

/**
 * @brief Loops over buttons and resets them
 */
static void buttonsReset(void){
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
	for (tick_t i = 0;i<NUMBER_OF_BUTTONS;i++){
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	e005      	b.n	8001aa4 <buttonsReset+0x18>
		buttonReset(i);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ffdd 	bl	8001a58 <buttonReset>
	for (tick_t i = 0;i<NUMBER_OF_BUTTONS;i++){
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d9f6      	bls.n	8001a98 <buttonsReset+0xc>
	}
}
 8001aaa:	bf00      	nop
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <ButtonsInit>:

/*Initializes the buttons. Declared in header file*/
void ButtonsInit(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	@ 0x28
 8001ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
 8001ac8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	4b29      	ldr	r3, [pc, #164]	@ (8001b74 <ButtonsInit+0xc0>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	4a28      	ldr	r2, [pc, #160]	@ (8001b74 <ButtonsInit+0xc0>)
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ada:	4b26      	ldr	r3, [pc, #152]	@ (8001b74 <ButtonsInit+0xc0>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	4b22      	ldr	r3, [pc, #136]	@ (8001b74 <ButtonsInit+0xc0>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	4a21      	ldr	r2, [pc, #132]	@ (8001b74 <ButtonsInit+0xc0>)
 8001af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b74 <ButtonsInit+0xc0>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <ButtonsInit+0xc0>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	4a1a      	ldr	r2, [pc, #104]	@ (8001b74 <ButtonsInit+0xc0>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b12:	4b18      	ldr	r3, [pc, #96]	@ (8001b74 <ButtonsInit+0xc0>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	4b14      	ldr	r3, [pc, #80]	@ (8001b74 <ButtonsInit+0xc0>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	4a13      	ldr	r2, [pc, #76]	@ (8001b74 <ButtonsInit+0xc0>)
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2e:	4b11      	ldr	r3, [pc, #68]	@ (8001b74 <ButtonsInit+0xc0>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = RIGHT_PIN|MENU_PIN|LEFT_PIN|ENTER_PIN;
 8001b3a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b40:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b46:	2301      	movs	r3, #1
 8001b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENTER_GPIO_PORT, &GPIO_InitStruct); /**< In this case I use GPIO for Enter button but it's the same for any of them */
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4809      	ldr	r0, [pc, #36]	@ (8001b78 <ButtonsInit+0xc4>)
 8001b52:	f000 fab3 	bl	80020bc <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(ENTER_EXTI_IRQN, 0, 0); /**< In this case I use the EXTI line for Enter button but it's the same for any of them */
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	2017      	movs	r0, #23
 8001b5c:	f000 fa77 	bl	800204e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ENTER_EXTI_IRQN); /**< If there was more than one EXTI line used, all of them should be initialized */
 8001b60:	2017      	movs	r0, #23
 8001b62:	f000 fa90 	bl	8002086 <HAL_NVIC_EnableIRQ>

  buttonsReset();
 8001b66:	f7ff ff91 	bl	8001a8c <buttonsReset>
}
 8001b6a:	bf00      	nop
 8001b6c:	3728      	adds	r7, #40	@ 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40020000 	.word	0x40020000

08001b7c <HAL_GPIO_EXTI_Callback>:

/*Checks if button is pressed (taking debounce into account) and invokes callback function. Declared in header file*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == RIGHT_PIN) pos = 0;
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	2b40      	cmp	r3, #64	@ 0x40
 8001b8a:	d103      	bne.n	8001b94 <HAL_GPIO_EXTI_Callback+0x18>
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c3c <HAL_GPIO_EXTI_Callback+0xc0>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	e015      	b.n	8001bc0 <HAL_GPIO_EXTI_Callback+0x44>
    else if (GPIO_Pin == MENU_PIN) pos = 1;
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	2b80      	cmp	r3, #128	@ 0x80
 8001b98:	d103      	bne.n	8001ba2 <HAL_GPIO_EXTI_Callback+0x26>
 8001b9a:	4b28      	ldr	r3, [pc, #160]	@ (8001c3c <HAL_GPIO_EXTI_Callback+0xc0>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	e00e      	b.n	8001bc0 <HAL_GPIO_EXTI_Callback+0x44>
    else if (GPIO_Pin == LEFT_PIN) pos = 2;
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ba8:	d103      	bne.n	8001bb2 <HAL_GPIO_EXTI_Callback+0x36>
 8001baa:	4b24      	ldr	r3, [pc, #144]	@ (8001c3c <HAL_GPIO_EXTI_Callback+0xc0>)
 8001bac:	2202      	movs	r2, #2
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_EXTI_Callback+0x44>
    else if (GPIO_Pin == ENTER_PIN) pos = 3;
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bb8:	d13c      	bne.n	8001c34 <HAL_GPIO_EXTI_Callback+0xb8>
 8001bba:	4b20      	ldr	r3, [pc, #128]	@ (8001c3c <HAL_GPIO_EXTI_Callback+0xc0>)
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	601a      	str	r2, [r3, #0]
    else return;

    if (!buttons[pos].pressed) {
 8001bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c3c <HAL_GPIO_EXTI_Callback+0xc0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a1e      	ldr	r2, [pc, #120]	@ (8001c40 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	4413      	add	r3, r2
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	f083 0301 	eor.w	r3, r3, #1
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d010      	beq.n	8001bf8 <HAL_GPIO_EXTI_Callback+0x7c>
        buttons[pos].pressed = true;
 8001bd6:	4b19      	ldr	r3, [pc, #100]	@ (8001c3c <HAL_GPIO_EXTI_Callback+0xc0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a19      	ldr	r2, [pc, #100]	@ (8001c40 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	4413      	add	r3, r2
 8001be0:	2201      	movs	r2, #1
 8001be2:	701a      	strb	r2, [r3, #0]
        delayRead(&(buttons[pos].delay));
 8001be4:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <HAL_GPIO_EXTI_Callback+0xc0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	011b      	lsls	r3, r3, #4
 8001bea:	4a15      	ldr	r2, [pc, #84]	@ (8001c40 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001bec:	4413      	add	r3, r2
 8001bee:	3304      	adds	r3, #4
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe ff2d 	bl	8000a50 <delayRead>
        return;
 8001bf6:	e01e      	b.n	8001c36 <HAL_GPIO_EXTI_Callback+0xba>
    }

    if (delayRead(&(buttons[pos].delay))) {
 8001bf8:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <HAL_GPIO_EXTI_Callback+0xc0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	4a10      	ldr	r2, [pc, #64]	@ (8001c40 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001c00:	4413      	add	r3, r2
 8001c02:	3304      	adds	r3, #4
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe ff23 	bl	8000a50 <delayRead>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d012      	beq.n	8001c36 <HAL_GPIO_EXTI_Callback+0xba>
        if (HAL_GPIO_ReadPin(ENTER_GPIO_PORT, GPIO_Pin) == GPIO_PIN_RESET) {
 8001c10:	88fb      	ldrh	r3, [r7, #6]
 8001c12:	4619      	mov	r1, r3
 8001c14:	480b      	ldr	r0, [pc, #44]	@ (8001c44 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001c16:	f000 fbe5 	bl	80023e4 <HAL_GPIO_ReadPin>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d103      	bne.n	8001c28 <HAL_GPIO_EXTI_Callback+0xac>
            ButtonPressed(GPIO_Pin);
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fc06 	bl	8001434 <ButtonPressed>
        }

        buttonReset(pos);
 8001c28:	4b04      	ldr	r3, [pc, #16]	@ (8001c3c <HAL_GPIO_EXTI_Callback+0xc0>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff13 	bl	8001a58 <buttonReset>
 8001c32:	e000      	b.n	8001c36 <HAL_GPIO_EXTI_Callback+0xba>
    else return;
 8001c34:	bf00      	nop
    }
}
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000254 	.word	0x20000254
 8001c40:	20000214 	.word	0x20000214
 8001c44:	40020000 	.word	0x40020000

08001c48 <I2CDelay>:

/* Declaration of the I2C handle (defined in the stm32f4xx_hal.h library).*/
I2C_HandleTypeDef hi2c1;

/*Delays the app for delayTime miliseconds. Declared in header file*/
void I2CDelay(uint32_t delayTime){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	HAL_Delay(delayTime);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f8fd 	bl	8001e50 <HAL_Delay>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <I2CInit>:

/*Initialize the I2C protocol handle. Declared in header file*/
void I2CInit(){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
  __HAL_RCC_I2C1_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	4b21      	ldr	r3, [pc, #132]	@ (8001cf0 <I2CInit+0x90>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	4a20      	ldr	r2, [pc, #128]	@ (8001cf0 <I2CInit+0x90>)
 8001c70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c76:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf0 <I2CInit+0x90>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	603b      	str	r3, [r7, #0]
 8001c86:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf0 <I2CInit+0x90>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	4a19      	ldr	r2, [pc, #100]	@ (8001cf0 <I2CInit+0x90>)
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c92:	4b17      	ldr	r3, [pc, #92]	@ (8001cf0 <I2CInit+0x90>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	683b      	ldr	r3, [r7, #0]
  hi2c1.Instance = I2C1;
 8001c9e:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <I2CInit+0x94>)
 8001ca0:	4a15      	ldr	r2, [pc, #84]	@ (8001cf8 <I2CInit+0x98>)
 8001ca2:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = CLOCKSPEED;
 8001ca4:	4b13      	ldr	r3, [pc, #76]	@ (8001cf4 <I2CInit+0x94>)
 8001ca6:	4a15      	ldr	r2, [pc, #84]	@ (8001cfc <I2CInit+0x9c>)
 8001ca8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001caa:	4b12      	ldr	r3, [pc, #72]	@ (8001cf4 <I2CInit+0x94>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cb0:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <I2CInit+0x94>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf4 <I2CInit+0x94>)
 8001cb8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf4 <I2CInit+0x94>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <I2CInit+0x94>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cca:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf4 <I2CInit+0x94>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cd0:	4b08      	ldr	r3, [pc, #32]	@ (8001cf4 <I2CInit+0x94>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cd6:	4807      	ldr	r0, [pc, #28]	@ (8001cf4 <I2CInit+0x94>)
 8001cd8:	f000 fbb4 	bl	8002444 <HAL_I2C_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <I2CInit+0x86>
  {
    Error_Handler();
 8001ce2:	f7fe fd27 	bl	8000734 <Error_Handler>
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	20000258 	.word	0x20000258
 8001cf8:	40005400 	.word	0x40005400
 8001cfc:	000186a0 	.word	0x000186a0

08001d00 <I2CMasterTransmit>:

/*Writes the data buffer to the slave. Declared in header file*/
void I2CMasterTransmit(uint16_t devAddr, uint8_t *buffer, uint16_t size){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af02      	add	r7, sp, #8
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	80fb      	strh	r3, [r7, #6]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, devAddr, buffer, size, TIMEOUT);
 8001d10:	88bb      	ldrh	r3, [r7, #4]
 8001d12:	88f9      	ldrh	r1, [r7, #6]
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
 8001d18:	9200      	str	r2, [sp, #0]
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	4803      	ldr	r0, [pc, #12]	@ (8001d2c <I2CMasterTransmit+0x2c>)
 8001d1e:	f000 fcd5 	bl	80026cc <HAL_I2C_Master_Transmit>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000258 	.word	0x20000258

08001d30 <I2CReadMemory>:

/*Reads specific memory registers from a given IC. Declared in header file*/
void I2CReadMemory(uint16_t startReg, uint16_t devAddr, uint8_t *buffer, uint16_t size){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af04      	add	r7, sp, #16
 8001d36:	60ba      	str	r2, [r7, #8]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	81fb      	strh	r3, [r7, #14]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	81bb      	strh	r3, [r7, #12]
 8001d42:	4613      	mov	r3, r2
 8001d44:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, devAddr, startReg, REG_SIZE, buffer, size, TIMEOUT);
 8001d46:	89fa      	ldrh	r2, [r7, #14]
 8001d48:	89b9      	ldrh	r1, [r7, #12]
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4e:	9302      	str	r3, [sp, #8]
 8001d50:	88fb      	ldrh	r3, [r7, #6]
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	2301      	movs	r3, #1
 8001d5a:	4803      	ldr	r0, [pc, #12]	@ (8001d68 <I2CReadMemory+0x38>)
 8001d5c:	f000 fdb4 	bl	80028c8 <HAL_I2C_Mem_Read>
}
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000258 	.word	0x20000258

08001d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d70:	4b0e      	ldr	r3, [pc, #56]	@ (8001dac <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0d      	ldr	r2, [pc, #52]	@ (8001dac <HAL_Init+0x40>)
 8001d76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dac <HAL_Init+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0a      	ldr	r2, [pc, #40]	@ (8001dac <HAL_Init+0x40>)
 8001d82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d88:	4b08      	ldr	r3, [pc, #32]	@ (8001dac <HAL_Init+0x40>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a07      	ldr	r2, [pc, #28]	@ (8001dac <HAL_Init+0x40>)
 8001d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d94:	2003      	movs	r0, #3
 8001d96:	f000 f94f 	bl	8002038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d9a:	200f      	movs	r0, #15
 8001d9c:	f000 f808 	bl	8001db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da0:	f7fe fcce 	bl	8000740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023c00 	.word	0x40023c00

08001db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db8:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <HAL_InitTick+0x54>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <HAL_InitTick+0x58>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f967 	bl	80020a2 <HAL_SYSTICK_Config>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00e      	b.n	8001dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b0f      	cmp	r3, #15
 8001de2:	d80a      	bhi.n	8001dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de4:	2200      	movs	r2, #0
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dec:	f000 f92f 	bl	800204e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df0:	4a06      	ldr	r2, [pc, #24]	@ (8001e0c <HAL_InitTick+0x5c>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	e000      	b.n	8001dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000000 	.word	0x20000000
 8001e08:	20000024 	.word	0x20000024
 8001e0c:	20000020 	.word	0x20000020

08001e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e14:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <HAL_IncTick+0x20>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <HAL_IncTick+0x24>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	@ (8001e34 <HAL_IncTick+0x24>)
 8001e22:	6013      	str	r3, [r2, #0]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000024 	.word	0x20000024
 8001e34:	200002ac 	.word	0x200002ac

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	@ (8001e4c <HAL_GetTick+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	200002ac 	.word	0x200002ac

08001e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff ffee 	bl	8001e38 <HAL_GetTick>
 8001e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d005      	beq.n	8001e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e94 <HAL_Delay+0x44>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e76:	bf00      	nop
 8001e78:	f7ff ffde 	bl	8001e38 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d8f7      	bhi.n	8001e78 <HAL_Delay+0x28>
  {
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000024 	.word	0x20000024

08001e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eca:	4a04      	ldr	r2, [pc, #16]	@ (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	60d3      	str	r3, [r2, #12]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee4:	4b04      	ldr	r3, [pc, #16]	@ (8001ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	f003 0307 	and.w	r3, r3, #7
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	db0b      	blt.n	8001f26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	f003 021f 	and.w	r2, r3, #31
 8001f14:	4907      	ldr	r1, [pc, #28]	@ (8001f34 <__NVIC_EnableIRQ+0x38>)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	095b      	lsrs	r3, r3, #5
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000e100 	.word	0xe000e100

08001f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	6039      	str	r1, [r7, #0]
 8001f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	db0a      	blt.n	8001f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	490c      	ldr	r1, [pc, #48]	@ (8001f84 <__NVIC_SetPriority+0x4c>)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f60:	e00a      	b.n	8001f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4908      	ldr	r1, [pc, #32]	@ (8001f88 <__NVIC_SetPriority+0x50>)
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	3b04      	subs	r3, #4
 8001f70:	0112      	lsls	r2, r2, #4
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	440b      	add	r3, r1
 8001f76:	761a      	strb	r2, [r3, #24]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000e100 	.word	0xe000e100
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	@ 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f1c3 0307 	rsb	r3, r3, #7
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	bf28      	it	cs
 8001faa:	2304      	movcs	r3, #4
 8001fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d902      	bls.n	8001fbc <NVIC_EncodePriority+0x30>
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3b03      	subs	r3, #3
 8001fba:	e000      	b.n	8001fbe <NVIC_EncodePriority+0x32>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	401a      	ands	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	43d9      	mvns	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	4313      	orrs	r3, r2
         );
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3724      	adds	r7, #36	@ 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002004:	d301      	bcc.n	800200a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002006:	2301      	movs	r3, #1
 8002008:	e00f      	b.n	800202a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800200a:	4a0a      	ldr	r2, [pc, #40]	@ (8002034 <SysTick_Config+0x40>)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002012:	210f      	movs	r1, #15
 8002014:	f04f 30ff 	mov.w	r0, #4294967295
 8002018:	f7ff ff8e 	bl	8001f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800201c:	4b05      	ldr	r3, [pc, #20]	@ (8002034 <SysTick_Config+0x40>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002022:	4b04      	ldr	r3, [pc, #16]	@ (8002034 <SysTick_Config+0x40>)
 8002024:	2207      	movs	r2, #7
 8002026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	e000e010 	.word	0xe000e010

08002038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ff29 	bl	8001e98 <__NVIC_SetPriorityGrouping>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800204e:	b580      	push	{r7, lr}
 8002050:	b086      	sub	sp, #24
 8002052:	af00      	add	r7, sp, #0
 8002054:	4603      	mov	r3, r0
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002060:	f7ff ff3e 	bl	8001ee0 <__NVIC_GetPriorityGrouping>
 8002064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	6978      	ldr	r0, [r7, #20]
 800206c:	f7ff ff8e 	bl	8001f8c <NVIC_EncodePriority>
 8002070:	4602      	mov	r2, r0
 8002072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff5d 	bl	8001f38 <__NVIC_SetPriority>
}
 800207e:	bf00      	nop
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	4603      	mov	r3, r0
 800208e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff31 	bl	8001efc <__NVIC_EnableIRQ>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff ffa2 	bl	8001ff4 <SysTick_Config>
 80020b0:	4603      	mov	r3, r0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	@ 0x24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	e165      	b.n	80023a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020d8:	2201      	movs	r2, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	f040 8154 	bne.w	800239e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d005      	beq.n	800210e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800210a:	2b02      	cmp	r3, #2
 800210c:	d130      	bne.n	8002170 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	2203      	movs	r2, #3
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002144:	2201      	movs	r2, #1
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 0201 	and.w	r2, r3, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	2b03      	cmp	r3, #3
 800217a:	d017      	beq.n	80021ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d123      	bne.n	8002200 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	08da      	lsrs	r2, r3, #3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3208      	adds	r2, #8
 80021c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	220f      	movs	r2, #15
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	08da      	lsrs	r2, r3, #3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3208      	adds	r2, #8
 80021fa:	69b9      	ldr	r1, [r7, #24]
 80021fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	2203      	movs	r2, #3
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0203 	and.w	r2, r3, #3
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80ae 	beq.w	800239e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	4b5d      	ldr	r3, [pc, #372]	@ (80023bc <HAL_GPIO_Init+0x300>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224a:	4a5c      	ldr	r2, [pc, #368]	@ (80023bc <HAL_GPIO_Init+0x300>)
 800224c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002250:	6453      	str	r3, [r2, #68]	@ 0x44
 8002252:	4b5a      	ldr	r3, [pc, #360]	@ (80023bc <HAL_GPIO_Init+0x300>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002256:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800225e:	4a58      	ldr	r2, [pc, #352]	@ (80023c0 <HAL_GPIO_Init+0x304>)
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	089b      	lsrs	r3, r3, #2
 8002264:	3302      	adds	r3, #2
 8002266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	220f      	movs	r2, #15
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a4f      	ldr	r2, [pc, #316]	@ (80023c4 <HAL_GPIO_Init+0x308>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d025      	beq.n	80022d6 <HAL_GPIO_Init+0x21a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a4e      	ldr	r2, [pc, #312]	@ (80023c8 <HAL_GPIO_Init+0x30c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d01f      	beq.n	80022d2 <HAL_GPIO_Init+0x216>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a4d      	ldr	r2, [pc, #308]	@ (80023cc <HAL_GPIO_Init+0x310>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d019      	beq.n	80022ce <HAL_GPIO_Init+0x212>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a4c      	ldr	r2, [pc, #304]	@ (80023d0 <HAL_GPIO_Init+0x314>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d013      	beq.n	80022ca <HAL_GPIO_Init+0x20e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a4b      	ldr	r2, [pc, #300]	@ (80023d4 <HAL_GPIO_Init+0x318>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d00d      	beq.n	80022c6 <HAL_GPIO_Init+0x20a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a4a      	ldr	r2, [pc, #296]	@ (80023d8 <HAL_GPIO_Init+0x31c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d007      	beq.n	80022c2 <HAL_GPIO_Init+0x206>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a49      	ldr	r2, [pc, #292]	@ (80023dc <HAL_GPIO_Init+0x320>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d101      	bne.n	80022be <HAL_GPIO_Init+0x202>
 80022ba:	2306      	movs	r3, #6
 80022bc:	e00c      	b.n	80022d8 <HAL_GPIO_Init+0x21c>
 80022be:	2307      	movs	r3, #7
 80022c0:	e00a      	b.n	80022d8 <HAL_GPIO_Init+0x21c>
 80022c2:	2305      	movs	r3, #5
 80022c4:	e008      	b.n	80022d8 <HAL_GPIO_Init+0x21c>
 80022c6:	2304      	movs	r3, #4
 80022c8:	e006      	b.n	80022d8 <HAL_GPIO_Init+0x21c>
 80022ca:	2303      	movs	r3, #3
 80022cc:	e004      	b.n	80022d8 <HAL_GPIO_Init+0x21c>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e002      	b.n	80022d8 <HAL_GPIO_Init+0x21c>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <HAL_GPIO_Init+0x21c>
 80022d6:	2300      	movs	r3, #0
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	f002 0203 	and.w	r2, r2, #3
 80022de:	0092      	lsls	r2, r2, #2
 80022e0:	4093      	lsls	r3, r2
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e8:	4935      	ldr	r1, [pc, #212]	@ (80023c0 <HAL_GPIO_Init+0x304>)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	089b      	lsrs	r3, r3, #2
 80022ee:	3302      	adds	r3, #2
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022f6:	4b3a      	ldr	r3, [pc, #232]	@ (80023e0 <HAL_GPIO_Init+0x324>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800231a:	4a31      	ldr	r2, [pc, #196]	@ (80023e0 <HAL_GPIO_Init+0x324>)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002320:	4b2f      	ldr	r3, [pc, #188]	@ (80023e0 <HAL_GPIO_Init+0x324>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002344:	4a26      	ldr	r2, [pc, #152]	@ (80023e0 <HAL_GPIO_Init+0x324>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800234a:	4b25      	ldr	r3, [pc, #148]	@ (80023e0 <HAL_GPIO_Init+0x324>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800236e:	4a1c      	ldr	r2, [pc, #112]	@ (80023e0 <HAL_GPIO_Init+0x324>)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002374:	4b1a      	ldr	r3, [pc, #104]	@ (80023e0 <HAL_GPIO_Init+0x324>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002398:	4a11      	ldr	r2, [pc, #68]	@ (80023e0 <HAL_GPIO_Init+0x324>)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3301      	adds	r3, #1
 80023a2:	61fb      	str	r3, [r7, #28]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	2b0f      	cmp	r3, #15
 80023a8:	f67f ae96 	bls.w	80020d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	3724      	adds	r7, #36	@ 0x24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40013800 	.word	0x40013800
 80023c4:	40020000 	.word	0x40020000
 80023c8:	40020400 	.word	0x40020400
 80023cc:	40020800 	.word	0x40020800
 80023d0:	40020c00 	.word	0x40020c00
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40021400 	.word	0x40021400
 80023dc:	40021800 	.word	0x40021800
 80023e0:	40013c00 	.word	0x40013c00

080023e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	887b      	ldrh	r3, [r7, #2]
 80023f6:	4013      	ands	r3, r2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
 8002400:	e001      	b.n	8002406 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002402:	2300      	movs	r3, #0
 8002404:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002406:	7bfb      	ldrb	r3, [r7, #15]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800241e:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002420:	695a      	ldr	r2, [r3, #20]
 8002422:	88fb      	ldrh	r3, [r7, #6]
 8002424:	4013      	ands	r3, r2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d006      	beq.n	8002438 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800242a:	4a05      	ldr	r2, [pc, #20]	@ (8002440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff fba2 	bl	8001b7c <HAL_GPIO_EXTI_Callback>
  }
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40013c00 	.word	0x40013c00

08002444 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e12b      	b.n	80026ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d106      	bne.n	8002470 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7fe f990 	bl	8000790 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2224      	movs	r2, #36	@ 0x24
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0201 	bic.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002496:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024a8:	f001 f8d2 	bl	8003650 <HAL_RCC_GetPCLK1Freq>
 80024ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4a81      	ldr	r2, [pc, #516]	@ (80026b8 <HAL_I2C_Init+0x274>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d807      	bhi.n	80024c8 <HAL_I2C_Init+0x84>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4a80      	ldr	r2, [pc, #512]	@ (80026bc <HAL_I2C_Init+0x278>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	bf94      	ite	ls
 80024c0:	2301      	movls	r3, #1
 80024c2:	2300      	movhi	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	e006      	b.n	80024d6 <HAL_I2C_Init+0x92>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4a7d      	ldr	r2, [pc, #500]	@ (80026c0 <HAL_I2C_Init+0x27c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	bf94      	ite	ls
 80024d0:	2301      	movls	r3, #1
 80024d2:	2300      	movhi	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e0e7      	b.n	80026ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4a78      	ldr	r2, [pc, #480]	@ (80026c4 <HAL_I2C_Init+0x280>)
 80024e2:	fba2 2303 	umull	r2, r3, r2, r3
 80024e6:	0c9b      	lsrs	r3, r3, #18
 80024e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4a6a      	ldr	r2, [pc, #424]	@ (80026b8 <HAL_I2C_Init+0x274>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d802      	bhi.n	8002518 <HAL_I2C_Init+0xd4>
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	3301      	adds	r3, #1
 8002516:	e009      	b.n	800252c <HAL_I2C_Init+0xe8>
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800251e:	fb02 f303 	mul.w	r3, r2, r3
 8002522:	4a69      	ldr	r2, [pc, #420]	@ (80026c8 <HAL_I2C_Init+0x284>)
 8002524:	fba2 2303 	umull	r2, r3, r2, r3
 8002528:	099b      	lsrs	r3, r3, #6
 800252a:	3301      	adds	r3, #1
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	430b      	orrs	r3, r1
 8002532:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800253e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	495c      	ldr	r1, [pc, #368]	@ (80026b8 <HAL_I2C_Init+0x274>)
 8002548:	428b      	cmp	r3, r1
 800254a:	d819      	bhi.n	8002580 <HAL_I2C_Init+0x13c>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1e59      	subs	r1, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	fbb1 f3f3 	udiv	r3, r1, r3
 800255a:	1c59      	adds	r1, r3, #1
 800255c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002560:	400b      	ands	r3, r1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00a      	beq.n	800257c <HAL_I2C_Init+0x138>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1e59      	subs	r1, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	fbb1 f3f3 	udiv	r3, r1, r3
 8002574:	3301      	adds	r3, #1
 8002576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800257a:	e051      	b.n	8002620 <HAL_I2C_Init+0x1dc>
 800257c:	2304      	movs	r3, #4
 800257e:	e04f      	b.n	8002620 <HAL_I2C_Init+0x1dc>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d111      	bne.n	80025ac <HAL_I2C_Init+0x168>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1e58      	subs	r0, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	440b      	add	r3, r1
 8002596:	fbb0 f3f3 	udiv	r3, r0, r3
 800259a:	3301      	adds	r3, #1
 800259c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bf0c      	ite	eq
 80025a4:	2301      	moveq	r3, #1
 80025a6:	2300      	movne	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	e012      	b.n	80025d2 <HAL_I2C_Init+0x18e>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1e58      	subs	r0, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6859      	ldr	r1, [r3, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	0099      	lsls	r1, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bf0c      	ite	eq
 80025cc:	2301      	moveq	r3, #1
 80025ce:	2300      	movne	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_I2C_Init+0x196>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e022      	b.n	8002620 <HAL_I2C_Init+0x1dc>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10e      	bne.n	8002600 <HAL_I2C_Init+0x1bc>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1e58      	subs	r0, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6859      	ldr	r1, [r3, #4]
 80025ea:	460b      	mov	r3, r1
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	440b      	add	r3, r1
 80025f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f4:	3301      	adds	r3, #1
 80025f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025fe:	e00f      	b.n	8002620 <HAL_I2C_Init+0x1dc>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1e58      	subs	r0, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	0099      	lsls	r1, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	fbb0 f3f3 	udiv	r3, r0, r3
 8002616:	3301      	adds	r3, #1
 8002618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	6809      	ldr	r1, [r1, #0]
 8002624:	4313      	orrs	r3, r2
 8002626:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69da      	ldr	r2, [r3, #28]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800264e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6911      	ldr	r1, [r2, #16]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68d2      	ldr	r2, [r2, #12]
 800265a:	4311      	orrs	r1, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	430b      	orrs	r3, r1
 8002662:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	000186a0 	.word	0x000186a0
 80026bc:	001e847f 	.word	0x001e847f
 80026c0:	003d08ff 	.word	0x003d08ff
 80026c4:	431bde83 	.word	0x431bde83
 80026c8:	10624dd3 	.word	0x10624dd3

080026cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	461a      	mov	r2, r3
 80026d8:	460b      	mov	r3, r1
 80026da:	817b      	strh	r3, [r7, #10]
 80026dc:	4613      	mov	r3, r2
 80026de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026e0:	f7ff fbaa 	bl	8001e38 <HAL_GetTick>
 80026e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	f040 80e0 	bne.w	80028b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	2319      	movs	r3, #25
 80026fa:	2201      	movs	r2, #1
 80026fc:	4970      	ldr	r1, [pc, #448]	@ (80028c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 fc7e 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800270a:	2302      	movs	r3, #2
 800270c:	e0d3      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_I2C_Master_Transmit+0x50>
 8002718:	2302      	movs	r3, #2
 800271a:	e0cc      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x1ea>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b01      	cmp	r3, #1
 8002730:	d007      	beq.n	8002742 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0201 	orr.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002750:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2221      	movs	r2, #33	@ 0x21
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2210      	movs	r2, #16
 800275e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	893a      	ldrh	r2, [r7, #8]
 8002772:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4a50      	ldr	r2, [pc, #320]	@ (80028c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002782:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002784:	8979      	ldrh	r1, [r7, #10]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	6a3a      	ldr	r2, [r7, #32]
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 face 	bl	8002d2c <I2C_MasterRequestWrite>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e08d      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027b0:	e066      	b.n	8002880 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	6a39      	ldr	r1, [r7, #32]
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 fd3c 	bl	8003234 <I2C_WaitOnTXEFlagUntilTimeout>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00d      	beq.n	80027de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d107      	bne.n	80027da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e06b      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e2:	781a      	ldrb	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b04      	cmp	r3, #4
 800281a:	d11b      	bne.n	8002854 <HAL_I2C_Master_Transmit+0x188>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002820:	2b00      	cmp	r3, #0
 8002822:	d017      	beq.n	8002854 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002828:	781a      	ldrb	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	6a39      	ldr	r1, [r7, #32]
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 fd33 	bl	80032c4 <I2C_WaitOnBTFFlagUntilTimeout>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00d      	beq.n	8002880 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002868:	2b04      	cmp	r3, #4
 800286a:	d107      	bne.n	800287c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800287a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e01a      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002884:	2b00      	cmp	r3, #0
 8002886:	d194      	bne.n	80027b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	e000      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028b4:	2302      	movs	r3, #2
  }
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	00100002 	.word	0x00100002
 80028c4:	ffff0000 	.word	0xffff0000

080028c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08c      	sub	sp, #48	@ 0x30
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	4608      	mov	r0, r1
 80028d2:	4611      	mov	r1, r2
 80028d4:	461a      	mov	r2, r3
 80028d6:	4603      	mov	r3, r0
 80028d8:	817b      	strh	r3, [r7, #10]
 80028da:	460b      	mov	r3, r1
 80028dc:	813b      	strh	r3, [r7, #8]
 80028de:	4613      	mov	r3, r2
 80028e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028e2:	f7ff faa9 	bl	8001e38 <HAL_GetTick>
 80028e6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	f040 8214 	bne.w	8002d1e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	2319      	movs	r3, #25
 80028fc:	2201      	movs	r2, #1
 80028fe:	497b      	ldr	r1, [pc, #492]	@ (8002aec <HAL_I2C_Mem_Read+0x224>)
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 fb7d 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800290c:	2302      	movs	r3, #2
 800290e:	e207      	b.n	8002d20 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_I2C_Mem_Read+0x56>
 800291a:	2302      	movs	r3, #2
 800291c:	e200      	b.n	8002d20 <HAL_I2C_Mem_Read+0x458>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b01      	cmp	r3, #1
 8002932:	d007      	beq.n	8002944 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002952:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2222      	movs	r2, #34	@ 0x22
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2240      	movs	r2, #64	@ 0x40
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800296e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002974:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4a5b      	ldr	r2, [pc, #364]	@ (8002af0 <HAL_I2C_Mem_Read+0x228>)
 8002984:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002986:	88f8      	ldrh	r0, [r7, #6]
 8002988:	893a      	ldrh	r2, [r7, #8]
 800298a:	8979      	ldrh	r1, [r7, #10]
 800298c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298e:	9301      	str	r3, [sp, #4]
 8002990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	4603      	mov	r3, r0
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fa4a 	bl	8002e30 <I2C_RequestMemoryRead>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e1bc      	b.n	8002d20 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d113      	bne.n	80029d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ae:	2300      	movs	r3, #0
 80029b0:	623b      	str	r3, [r7, #32]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	623b      	str	r3, [r7, #32]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	623b      	str	r3, [r7, #32]
 80029c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	e190      	b.n	8002cf8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d11b      	bne.n	8002a16 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	61fb      	str	r3, [r7, #28]
 8002a02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	e170      	b.n	8002cf8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d11b      	bne.n	8002a56 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	61bb      	str	r3, [r7, #24]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	61bb      	str	r3, [r7, #24]
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	e150      	b.n	8002cf8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a6c:	e144      	b.n	8002cf8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	f200 80f1 	bhi.w	8002c5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d123      	bne.n	8002ac8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 fc65 	bl	8003354 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e145      	b.n	8002d20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ac6:	e117      	b.n	8002cf8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d14e      	bne.n	8002b6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	4906      	ldr	r1, [pc, #24]	@ (8002af4 <HAL_I2C_Mem_Read+0x22c>)
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fa90 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d008      	beq.n	8002af8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e11a      	b.n	8002d20 <HAL_I2C_Mem_Read+0x458>
 8002aea:	bf00      	nop
 8002aec:	00100002 	.word	0x00100002
 8002af0:	ffff0000 	.word	0xffff0000
 8002af4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b6c:	e0c4      	b.n	8002cf8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b74:	2200      	movs	r2, #0
 8002b76:	496c      	ldr	r1, [pc, #432]	@ (8002d28 <HAL_I2C_Mem_Read+0x460>)
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 fa41 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0cb      	b.n	8002d20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	4955      	ldr	r1, [pc, #340]	@ (8002d28 <HAL_I2C_Mem_Read+0x460>)
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 fa13 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e09d      	b.n	8002d20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c58:	e04e      	b.n	8002cf8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c5c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 fb78 	bl	8003354 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e058      	b.n	8002d20 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d124      	bne.n	8002cf8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d107      	bne.n	8002cc6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cc4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f47f aeb6 	bne.w	8002a6e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e000      	b.n	8002d20 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002d1e:	2302      	movs	r3, #2
  }
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3728      	adds	r7, #40	@ 0x28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	00010004 	.word	0x00010004

08002d2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d006      	beq.n	8002d56 <I2C_MasterRequestWrite+0x2a>
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d003      	beq.n	8002d56 <I2C_MasterRequestWrite+0x2a>
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d54:	d108      	bne.n	8002d68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	e00b      	b.n	8002d80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6c:	2b12      	cmp	r3, #18
 8002d6e:	d107      	bne.n	8002d80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 f937 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00d      	beq.n	8002db4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002da6:	d103      	bne.n	8002db0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e035      	b.n	8002e20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002dbc:	d108      	bne.n	8002dd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dbe:	897b      	ldrh	r3, [r7, #10]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002dcc:	611a      	str	r2, [r3, #16]
 8002dce:	e01b      	b.n	8002e08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002dd0:	897b      	ldrh	r3, [r7, #10]
 8002dd2:	11db      	asrs	r3, r3, #7
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	f003 0306 	and.w	r3, r3, #6
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	f063 030f 	orn	r3, r3, #15
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	490e      	ldr	r1, [pc, #56]	@ (8002e28 <I2C_MasterRequestWrite+0xfc>)
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f980 	bl	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e010      	b.n	8002e20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dfe:	897b      	ldrh	r3, [r7, #10]
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	4907      	ldr	r1, [pc, #28]	@ (8002e2c <I2C_MasterRequestWrite+0x100>)
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f970 	bl	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	00010008 	.word	0x00010008
 8002e2c:	00010002 	.word	0x00010002

08002e30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b088      	sub	sp, #32
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	4608      	mov	r0, r1
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4603      	mov	r3, r0
 8002e40:	817b      	strh	r3, [r7, #10]
 8002e42:	460b      	mov	r3, r1
 8002e44:	813b      	strh	r3, [r7, #8]
 8002e46:	4613      	mov	r3, r2
 8002e48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f8c2 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00d      	beq.n	8002e9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e90:	d103      	bne.n	8002e9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e98:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e0aa      	b.n	8002ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e9e:	897b      	ldrh	r3, [r7, #10]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002eac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	6a3a      	ldr	r2, [r7, #32]
 8002eb2:	4952      	ldr	r1, [pc, #328]	@ (8002ffc <I2C_RequestMemoryRead+0x1cc>)
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f91d 	bl	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e097      	b.n	8002ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002edc:	6a39      	ldr	r1, [r7, #32]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f9a8 	bl	8003234 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00d      	beq.n	8002f06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d107      	bne.n	8002f02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e076      	b.n	8002ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d105      	bne.n	8002f18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f0c:	893b      	ldrh	r3, [r7, #8]
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	611a      	str	r2, [r3, #16]
 8002f16:	e021      	b.n	8002f5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f18:	893b      	ldrh	r3, [r7, #8]
 8002f1a:	0a1b      	lsrs	r3, r3, #8
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f28:	6a39      	ldr	r1, [r7, #32]
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f982 	bl	8003234 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00d      	beq.n	8002f52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d107      	bne.n	8002f4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e050      	b.n	8002ff4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f52:	893b      	ldrh	r3, [r7, #8]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f5e:	6a39      	ldr	r1, [r7, #32]
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f967 	bl	8003234 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00d      	beq.n	8002f88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d107      	bne.n	8002f84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e035      	b.n	8002ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 f82b 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00d      	beq.n	8002fcc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fbe:	d103      	bne.n	8002fc8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e013      	b.n	8002ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002fcc:	897b      	ldrh	r3, [r7, #10]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fde:	6a3a      	ldr	r2, [r7, #32]
 8002fe0:	4906      	ldr	r1, [pc, #24]	@ (8002ffc <I2C_RequestMemoryRead+0x1cc>)
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f886 	bl	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	00010002 	.word	0x00010002

08003000 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	4613      	mov	r3, r2
 800300e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003010:	e048      	b.n	80030a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003018:	d044      	beq.n	80030a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301a:	f7fe ff0d 	bl	8001e38 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d302      	bcc.n	8003030 <I2C_WaitOnFlagUntilTimeout+0x30>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d139      	bne.n	80030a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	0c1b      	lsrs	r3, r3, #16
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b01      	cmp	r3, #1
 8003038:	d10d      	bne.n	8003056 <I2C_WaitOnFlagUntilTimeout+0x56>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	43da      	mvns	r2, r3
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	4013      	ands	r3, r2
 8003046:	b29b      	uxth	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	e00c      	b.n	8003070 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	43da      	mvns	r2, r3
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	4013      	ands	r3, r2
 8003062:	b29b      	uxth	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf0c      	ite	eq
 8003068:	2301      	moveq	r3, #1
 800306a:	2300      	movne	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	461a      	mov	r2, r3
 8003070:	79fb      	ldrb	r3, [r7, #7]
 8003072:	429a      	cmp	r2, r3
 8003074:	d116      	bne.n	80030a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003090:	f043 0220 	orr.w	r2, r3, #32
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e023      	b.n	80030ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	0c1b      	lsrs	r3, r3, #16
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d10d      	bne.n	80030ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	43da      	mvns	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	4013      	ands	r3, r2
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2300      	movne	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	461a      	mov	r2, r3
 80030c8:	e00c      	b.n	80030e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	43da      	mvns	r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	4013      	ands	r3, r2
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d093      	beq.n	8003012 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003102:	e071      	b.n	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800310e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003112:	d123      	bne.n	800315c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003122:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800312c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003148:	f043 0204 	orr.w	r2, r3, #4
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e067      	b.n	800322c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003162:	d041      	beq.n	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003164:	f7fe fe68 	bl	8001e38 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	429a      	cmp	r2, r3
 8003172:	d302      	bcc.n	800317a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d136      	bne.n	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	0c1b      	lsrs	r3, r3, #16
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b01      	cmp	r3, #1
 8003182:	d10c      	bne.n	800319e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	43da      	mvns	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	4013      	ands	r3, r2
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	bf14      	ite	ne
 8003196:	2301      	movne	r3, #1
 8003198:	2300      	moveq	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	e00b      	b.n	80031b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	43da      	mvns	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	4013      	ands	r3, r2
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bf14      	ite	ne
 80031b0:	2301      	movne	r3, #1
 80031b2:	2300      	moveq	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d016      	beq.n	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	f043 0220 	orr.w	r2, r3, #32
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e021      	b.n	800322c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	0c1b      	lsrs	r3, r3, #16
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d10c      	bne.n	800320c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	43da      	mvns	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	4013      	ands	r3, r2
 80031fe:	b29b      	uxth	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	bf14      	ite	ne
 8003204:	2301      	movne	r3, #1
 8003206:	2300      	moveq	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	e00b      	b.n	8003224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	43da      	mvns	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4013      	ands	r3, r2
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	bf14      	ite	ne
 800321e:	2301      	movne	r3, #1
 8003220:	2300      	moveq	r3, #0
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	f47f af6d 	bne.w	8003104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003240:	e034      	b.n	80032ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f8e3 	bl	800340e <I2C_IsAcknowledgeFailed>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e034      	b.n	80032bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003258:	d028      	beq.n	80032ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800325a:	f7fe fded 	bl	8001e38 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	429a      	cmp	r2, r3
 8003268:	d302      	bcc.n	8003270 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d11d      	bne.n	80032ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800327a:	2b80      	cmp	r3, #128	@ 0x80
 800327c:	d016      	beq.n	80032ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003298:	f043 0220 	orr.w	r2, r3, #32
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e007      	b.n	80032bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032b6:	2b80      	cmp	r3, #128	@ 0x80
 80032b8:	d1c3      	bne.n	8003242 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032d0:	e034      	b.n	800333c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f89b 	bl	800340e <I2C_IsAcknowledgeFailed>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e034      	b.n	800334c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d028      	beq.n	800333c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ea:	f7fe fda5 	bl	8001e38 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d302      	bcc.n	8003300 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d11d      	bne.n	800333c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b04      	cmp	r3, #4
 800330c:	d016      	beq.n	800333c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003328:	f043 0220 	orr.w	r2, r3, #32
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e007      	b.n	800334c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b04      	cmp	r3, #4
 8003348:	d1c3      	bne.n	80032d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003360:	e049      	b.n	80033f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	2b10      	cmp	r3, #16
 800336e:	d119      	bne.n	80033a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f06f 0210 	mvn.w	r2, #16
 8003378:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e030      	b.n	8003406 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a4:	f7fe fd48 	bl	8001e38 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d302      	bcc.n	80033ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d11d      	bne.n	80033f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c4:	2b40      	cmp	r3, #64	@ 0x40
 80033c6:	d016      	beq.n	80033f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e2:	f043 0220 	orr.w	r2, r3, #32
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e007      	b.n	8003406 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003400:	2b40      	cmp	r3, #64	@ 0x40
 8003402:	d1ae      	bne.n	8003362 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003424:	d11b      	bne.n	800345e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800342e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344a:	f043 0204 	orr.w	r2, r3, #4
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0cc      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003480:	4b68      	ldr	r3, [pc, #416]	@ (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d90c      	bls.n	80034a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348e:	4b65      	ldr	r3, [pc, #404]	@ (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003496:	4b63      	ldr	r3, [pc, #396]	@ (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0b8      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d020      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034c0:	4b59      	ldr	r3, [pc, #356]	@ (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	4a58      	ldr	r2, [pc, #352]	@ (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80034ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034d8:	4b53      	ldr	r3, [pc, #332]	@ (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	4a52      	ldr	r2, [pc, #328]	@ (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80034e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034e4:	4b50      	ldr	r3, [pc, #320]	@ (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	494d      	ldr	r1, [pc, #308]	@ (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d044      	beq.n	800358c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d107      	bne.n	800351a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350a:	4b47      	ldr	r3, [pc, #284]	@ (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d119      	bne.n	800354a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e07f      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d003      	beq.n	800352a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003526:	2b03      	cmp	r3, #3
 8003528:	d107      	bne.n	800353a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352a:	4b3f      	ldr	r3, [pc, #252]	@ (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e06f      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353a:	4b3b      	ldr	r3, [pc, #236]	@ (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e067      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800354a:	4b37      	ldr	r3, [pc, #220]	@ (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f023 0203 	bic.w	r2, r3, #3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4934      	ldr	r1, [pc, #208]	@ (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 8003558:	4313      	orrs	r3, r2
 800355a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800355c:	f7fe fc6c 	bl	8001e38 <HAL_GetTick>
 8003560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003562:	e00a      	b.n	800357a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003564:	f7fe fc68 	bl	8001e38 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e04f      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357a:	4b2b      	ldr	r3, [pc, #172]	@ (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 020c 	and.w	r2, r3, #12
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	429a      	cmp	r2, r3
 800358a:	d1eb      	bne.n	8003564 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800358c:	4b25      	ldr	r3, [pc, #148]	@ (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d20c      	bcs.n	80035b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b22      	ldr	r3, [pc, #136]	@ (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	4b20      	ldr	r3, [pc, #128]	@ (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e032      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c0:	4b19      	ldr	r3, [pc, #100]	@ (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	4916      	ldr	r1, [pc, #88]	@ (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d009      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035de:	4b12      	ldr	r3, [pc, #72]	@ (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	490e      	ldr	r1, [pc, #56]	@ (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035f2:	f000 f855 	bl	80036a0 <HAL_RCC_GetSysClockFreq>
 80035f6:	4602      	mov	r2, r0
 80035f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	091b      	lsrs	r3, r3, #4
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	490a      	ldr	r1, [pc, #40]	@ (800362c <HAL_RCC_ClockConfig+0x1c0>)
 8003604:	5ccb      	ldrb	r3, [r1, r3]
 8003606:	fa22 f303 	lsr.w	r3, r2, r3
 800360a:	4a09      	ldr	r2, [pc, #36]	@ (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 800360c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800360e:	4b09      	ldr	r3, [pc, #36]	@ (8003634 <HAL_RCC_ClockConfig+0x1c8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7fe fbcc 	bl	8001db0 <HAL_InitTick>

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40023c00 	.word	0x40023c00
 8003628:	40023800 	.word	0x40023800
 800362c:	08004f0c 	.word	0x08004f0c
 8003630:	20000000 	.word	0x20000000
 8003634:	20000020 	.word	0x20000020

08003638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800363c:	4b03      	ldr	r3, [pc, #12]	@ (800364c <HAL_RCC_GetHCLKFreq+0x14>)
 800363e:	681b      	ldr	r3, [r3, #0]
}
 8003640:	4618      	mov	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	20000000 	.word	0x20000000

08003650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003654:	f7ff fff0 	bl	8003638 <HAL_RCC_GetHCLKFreq>
 8003658:	4602      	mov	r2, r0
 800365a:	4b05      	ldr	r3, [pc, #20]	@ (8003670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	0a9b      	lsrs	r3, r3, #10
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	4903      	ldr	r1, [pc, #12]	@ (8003674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003666:	5ccb      	ldrb	r3, [r1, r3]
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800366c:	4618      	mov	r0, r3
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40023800 	.word	0x40023800
 8003674:	08004f1c 	.word	0x08004f1c

08003678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800367c:	f7ff ffdc 	bl	8003638 <HAL_RCC_GetHCLKFreq>
 8003680:	4602      	mov	r2, r0
 8003682:	4b05      	ldr	r3, [pc, #20]	@ (8003698 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	0b5b      	lsrs	r3, r3, #13
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	4903      	ldr	r1, [pc, #12]	@ (800369c <HAL_RCC_GetPCLK2Freq+0x24>)
 800368e:	5ccb      	ldrb	r3, [r1, r3]
 8003690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003694:	4618      	mov	r0, r3
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40023800 	.word	0x40023800
 800369c:	08004f1c 	.word	0x08004f1c

080036a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a4:	b0a6      	sub	sp, #152	@ 0x98
 80036a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036c6:	4bc8      	ldr	r3, [pc, #800]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x348>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 030c 	and.w	r3, r3, #12
 80036ce:	2b0c      	cmp	r3, #12
 80036d0:	f200 817e 	bhi.w	80039d0 <HAL_RCC_GetSysClockFreq+0x330>
 80036d4:	a201      	add	r2, pc, #4	@ (adr r2, 80036dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80036d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036da:	bf00      	nop
 80036dc:	08003711 	.word	0x08003711
 80036e0:	080039d1 	.word	0x080039d1
 80036e4:	080039d1 	.word	0x080039d1
 80036e8:	080039d1 	.word	0x080039d1
 80036ec:	08003719 	.word	0x08003719
 80036f0:	080039d1 	.word	0x080039d1
 80036f4:	080039d1 	.word	0x080039d1
 80036f8:	080039d1 	.word	0x080039d1
 80036fc:	08003721 	.word	0x08003721
 8003700:	080039d1 	.word	0x080039d1
 8003704:	080039d1 	.word	0x080039d1
 8003708:	080039d1 	.word	0x080039d1
 800370c:	0800388b 	.word	0x0800388b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003710:	4bb6      	ldr	r3, [pc, #728]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x34c>)
 8003712:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003716:	e15f      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003718:	4bb5      	ldr	r3, [pc, #724]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x350>)
 800371a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800371e:	e15b      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003720:	4bb1      	ldr	r3, [pc, #708]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003728:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800372c:	4bae      	ldr	r3, [pc, #696]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x348>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d031      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003738:	4bab      	ldr	r3, [pc, #684]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x348>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	099b      	lsrs	r3, r3, #6
 800373e:	2200      	movs	r2, #0
 8003740:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003742:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003744:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800374a:	663b      	str	r3, [r7, #96]	@ 0x60
 800374c:	2300      	movs	r3, #0
 800374e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003750:	4ba7      	ldr	r3, [pc, #668]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x350>)
 8003752:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003756:	462a      	mov	r2, r5
 8003758:	fb03 f202 	mul.w	r2, r3, r2
 800375c:	2300      	movs	r3, #0
 800375e:	4621      	mov	r1, r4
 8003760:	fb01 f303 	mul.w	r3, r1, r3
 8003764:	4413      	add	r3, r2
 8003766:	4aa2      	ldr	r2, [pc, #648]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x350>)
 8003768:	4621      	mov	r1, r4
 800376a:	fba1 1202 	umull	r1, r2, r1, r2
 800376e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003770:	460a      	mov	r2, r1
 8003772:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003774:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003776:	4413      	add	r3, r2
 8003778:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800377a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800377e:	2200      	movs	r2, #0
 8003780:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003782:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003784:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003788:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800378c:	f7fc fd90 	bl	80002b0 <__aeabi_uldivmod>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4613      	mov	r3, r2
 8003796:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800379a:	e064      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800379c:	4b92      	ldr	r3, [pc, #584]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x348>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	099b      	lsrs	r3, r3, #6
 80037a2:	2200      	movs	r2, #0
 80037a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80037a6:	657a      	str	r2, [r7, #84]	@ 0x54
 80037a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037b0:	2300      	movs	r3, #0
 80037b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037b4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80037b8:	4622      	mov	r2, r4
 80037ba:	462b      	mov	r3, r5
 80037bc:	f04f 0000 	mov.w	r0, #0
 80037c0:	f04f 0100 	mov.w	r1, #0
 80037c4:	0159      	lsls	r1, r3, #5
 80037c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037ca:	0150      	lsls	r0, r2, #5
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4621      	mov	r1, r4
 80037d2:	1a51      	subs	r1, r2, r1
 80037d4:	6139      	str	r1, [r7, #16]
 80037d6:	4629      	mov	r1, r5
 80037d8:	eb63 0301 	sbc.w	r3, r3, r1
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037ea:	4659      	mov	r1, fp
 80037ec:	018b      	lsls	r3, r1, #6
 80037ee:	4651      	mov	r1, sl
 80037f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037f4:	4651      	mov	r1, sl
 80037f6:	018a      	lsls	r2, r1, #6
 80037f8:	4651      	mov	r1, sl
 80037fa:	ebb2 0801 	subs.w	r8, r2, r1
 80037fe:	4659      	mov	r1, fp
 8003800:	eb63 0901 	sbc.w	r9, r3, r1
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003810:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003814:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003818:	4690      	mov	r8, r2
 800381a:	4699      	mov	r9, r3
 800381c:	4623      	mov	r3, r4
 800381e:	eb18 0303 	adds.w	r3, r8, r3
 8003822:	60bb      	str	r3, [r7, #8]
 8003824:	462b      	mov	r3, r5
 8003826:	eb49 0303 	adc.w	r3, r9, r3
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003838:	4629      	mov	r1, r5
 800383a:	028b      	lsls	r3, r1, #10
 800383c:	4621      	mov	r1, r4
 800383e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003842:	4621      	mov	r1, r4
 8003844:	028a      	lsls	r2, r1, #10
 8003846:	4610      	mov	r0, r2
 8003848:	4619      	mov	r1, r3
 800384a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800384e:	2200      	movs	r2, #0
 8003850:	643b      	str	r3, [r7, #64]	@ 0x40
 8003852:	647a      	str	r2, [r7, #68]	@ 0x44
 8003854:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003858:	f7fc fd2a 	bl	80002b0 <__aeabi_uldivmod>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4613      	mov	r3, r2
 8003862:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003866:	4b60      	ldr	r3, [pc, #384]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	0c1b      	lsrs	r3, r3, #16
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	3301      	adds	r3, #1
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003878:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800387c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003880:	fbb2 f3f3 	udiv	r3, r2, r3
 8003884:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003888:	e0a6      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800388a:	4b57      	ldr	r3, [pc, #348]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x348>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003892:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003896:	4b54      	ldr	r3, [pc, #336]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d02a      	beq.n	80038f8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a2:	4b51      	ldr	r3, [pc, #324]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x348>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	099b      	lsrs	r3, r3, #6
 80038a8:	2200      	movs	r2, #0
 80038aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80038ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038b4:	2100      	movs	r1, #0
 80038b6:	4b4e      	ldr	r3, [pc, #312]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x350>)
 80038b8:	fb03 f201 	mul.w	r2, r3, r1
 80038bc:	2300      	movs	r3, #0
 80038be:	fb00 f303 	mul.w	r3, r0, r3
 80038c2:	4413      	add	r3, r2
 80038c4:	4a4a      	ldr	r2, [pc, #296]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x350>)
 80038c6:	fba0 1202 	umull	r1, r2, r0, r2
 80038ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80038cc:	460a      	mov	r2, r1
 80038ce:	673a      	str	r2, [r7, #112]	@ 0x70
 80038d0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80038d2:	4413      	add	r3, r2
 80038d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80038d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038da:	2200      	movs	r2, #0
 80038dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80038de:	637a      	str	r2, [r7, #52]	@ 0x34
 80038e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80038e4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80038e8:	f7fc fce2 	bl	80002b0 <__aeabi_uldivmod>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4613      	mov	r3, r2
 80038f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80038f6:	e05b      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038f8:	4b3b      	ldr	r3, [pc, #236]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x348>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	099b      	lsrs	r3, r3, #6
 80038fe:	2200      	movs	r2, #0
 8003900:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003902:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800390a:	623b      	str	r3, [r7, #32]
 800390c:	2300      	movs	r3, #0
 800390e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003910:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003914:	4642      	mov	r2, r8
 8003916:	464b      	mov	r3, r9
 8003918:	f04f 0000 	mov.w	r0, #0
 800391c:	f04f 0100 	mov.w	r1, #0
 8003920:	0159      	lsls	r1, r3, #5
 8003922:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003926:	0150      	lsls	r0, r2, #5
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4641      	mov	r1, r8
 800392e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003932:	4649      	mov	r1, r9
 8003934:	eb63 0b01 	sbc.w	fp, r3, r1
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003944:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003948:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800394c:	ebb2 040a 	subs.w	r4, r2, sl
 8003950:	eb63 050b 	sbc.w	r5, r3, fp
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	00eb      	lsls	r3, r5, #3
 800395e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003962:	00e2      	lsls	r2, r4, #3
 8003964:	4614      	mov	r4, r2
 8003966:	461d      	mov	r5, r3
 8003968:	4643      	mov	r3, r8
 800396a:	18e3      	adds	r3, r4, r3
 800396c:	603b      	str	r3, [r7, #0]
 800396e:	464b      	mov	r3, r9
 8003970:	eb45 0303 	adc.w	r3, r5, r3
 8003974:	607b      	str	r3, [r7, #4]
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003982:	4629      	mov	r1, r5
 8003984:	028b      	lsls	r3, r1, #10
 8003986:	4621      	mov	r1, r4
 8003988:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800398c:	4621      	mov	r1, r4
 800398e:	028a      	lsls	r2, r1, #10
 8003990:	4610      	mov	r0, r2
 8003992:	4619      	mov	r1, r3
 8003994:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003998:	2200      	movs	r2, #0
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	61fa      	str	r2, [r7, #28]
 800399e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039a2:	f7fc fc85 	bl	80002b0 <__aeabi_uldivmod>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4613      	mov	r3, r2
 80039ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80039b0:	4b0d      	ldr	r3, [pc, #52]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x348>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	0f1b      	lsrs	r3, r3, #28
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80039be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80039ce:	e003      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039d0:	4b06      	ldr	r3, [pc, #24]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x34c>)
 80039d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80039d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3798      	adds	r7, #152	@ 0x98
 80039e0:	46bd      	mov	sp, r7
 80039e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800
 80039ec:	00f42400 	.word	0x00f42400
 80039f0:	017d7840 	.word	0x017d7840

080039f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e28d      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 8083 	beq.w	8003b1a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a14:	4b94      	ldr	r3, [pc, #592]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 030c 	and.w	r3, r3, #12
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d019      	beq.n	8003a54 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003a20:	4b91      	ldr	r3, [pc, #580]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 030c 	and.w	r3, r3, #12
        || \
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d106      	bne.n	8003a3a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003a2c:	4b8e      	ldr	r3, [pc, #568]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a38:	d00c      	beq.n	8003a54 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a3a:	4b8b      	ldr	r3, [pc, #556]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003a42:	2b0c      	cmp	r3, #12
 8003a44:	d112      	bne.n	8003a6c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a46:	4b88      	ldr	r3, [pc, #544]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a52:	d10b      	bne.n	8003a6c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a54:	4b84      	ldr	r3, [pc, #528]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d05b      	beq.n	8003b18 <HAL_RCC_OscConfig+0x124>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d157      	bne.n	8003b18 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e25a      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a74:	d106      	bne.n	8003a84 <HAL_RCC_OscConfig+0x90>
 8003a76:	4b7c      	ldr	r3, [pc, #496]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a7b      	ldr	r2, [pc, #492]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e01d      	b.n	8003ac0 <HAL_RCC_OscConfig+0xcc>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a8c:	d10c      	bne.n	8003aa8 <HAL_RCC_OscConfig+0xb4>
 8003a8e:	4b76      	ldr	r3, [pc, #472]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a75      	ldr	r2, [pc, #468]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	4b73      	ldr	r3, [pc, #460]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a72      	ldr	r2, [pc, #456]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e00b      	b.n	8003ac0 <HAL_RCC_OscConfig+0xcc>
 8003aa8:	4b6f      	ldr	r3, [pc, #444]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a6e      	ldr	r2, [pc, #440]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003aae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	4b6c      	ldr	r3, [pc, #432]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a6b      	ldr	r2, [pc, #428]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003aba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d013      	beq.n	8003af0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7fe f9b6 	bl	8001e38 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad0:	f7fe f9b2 	bl	8001e38 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	@ 0x64
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e21f      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	4b61      	ldr	r3, [pc, #388]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0xdc>
 8003aee:	e014      	b.n	8003b1a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af0:	f7fe f9a2 	bl	8001e38 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af8:	f7fe f99e 	bl	8001e38 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b64      	cmp	r3, #100	@ 0x64
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e20b      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b0a:	4b57      	ldr	r3, [pc, #348]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x104>
 8003b16:	e000      	b.n	8003b1a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d06f      	beq.n	8003c06 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b26:	4b50      	ldr	r3, [pc, #320]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d017      	beq.n	8003b62 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003b32:	4b4d      	ldr	r3, [pc, #308]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
        || \
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d105      	bne.n	8003b4a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00b      	beq.n	8003b62 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b4a:	4b47      	ldr	r3, [pc, #284]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d11c      	bne.n	8003b90 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b56:	4b44      	ldr	r3, [pc, #272]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d116      	bne.n	8003b90 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b62:	4b41      	ldr	r3, [pc, #260]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_RCC_OscConfig+0x186>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d001      	beq.n	8003b7a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e1d3      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4937      	ldr	r1, [pc, #220]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b8e:	e03a      	b.n	8003c06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d020      	beq.n	8003bda <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b98:	4b34      	ldr	r3, [pc, #208]	@ (8003c6c <HAL_RCC_OscConfig+0x278>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9e:	f7fe f94b 	bl	8001e38 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba6:	f7fe f947 	bl	8001e38 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e1b4      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc4:	4b28      	ldr	r3, [pc, #160]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	4925      	ldr	r1, [pc, #148]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	600b      	str	r3, [r1, #0]
 8003bd8:	e015      	b.n	8003c06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bda:	4b24      	ldr	r3, [pc, #144]	@ (8003c6c <HAL_RCC_OscConfig+0x278>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be0:	f7fe f92a 	bl	8001e38 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003be8:	f7fe f926 	bl	8001e38 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e193      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d036      	beq.n	8003c80 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d016      	beq.n	8003c48 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c1a:	4b15      	ldr	r3, [pc, #84]	@ (8003c70 <HAL_RCC_OscConfig+0x27c>)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c20:	f7fe f90a 	bl	8001e38 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c28:	f7fe f906 	bl	8001e38 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e173      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0f0      	beq.n	8003c28 <HAL_RCC_OscConfig+0x234>
 8003c46:	e01b      	b.n	8003c80 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c48:	4b09      	ldr	r3, [pc, #36]	@ (8003c70 <HAL_RCC_OscConfig+0x27c>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4e:	f7fe f8f3 	bl	8001e38 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c54:	e00e      	b.n	8003c74 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c56:	f7fe f8ef 	bl	8001e38 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d907      	bls.n	8003c74 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e15c      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	42470000 	.word	0x42470000
 8003c70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c74:	4b8a      	ldr	r3, [pc, #552]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003c76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1ea      	bne.n	8003c56 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 8097 	beq.w	8003dbc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c92:	4b83      	ldr	r3, [pc, #524]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10f      	bne.n	8003cbe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cae:	4b7c      	ldr	r3, [pc, #496]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbe:	4b79      	ldr	r3, [pc, #484]	@ (8003ea4 <HAL_RCC_OscConfig+0x4b0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d118      	bne.n	8003cfc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cca:	4b76      	ldr	r3, [pc, #472]	@ (8003ea4 <HAL_RCC_OscConfig+0x4b0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a75      	ldr	r2, [pc, #468]	@ (8003ea4 <HAL_RCC_OscConfig+0x4b0>)
 8003cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd6:	f7fe f8af 	bl	8001e38 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cde:	f7fe f8ab 	bl	8001e38 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e118      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf0:	4b6c      	ldr	r3, [pc, #432]	@ (8003ea4 <HAL_RCC_OscConfig+0x4b0>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0f0      	beq.n	8003cde <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d106      	bne.n	8003d12 <HAL_RCC_OscConfig+0x31e>
 8003d04:	4b66      	ldr	r3, [pc, #408]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d08:	4a65      	ldr	r2, [pc, #404]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d10:	e01c      	b.n	8003d4c <HAL_RCC_OscConfig+0x358>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b05      	cmp	r3, #5
 8003d18:	d10c      	bne.n	8003d34 <HAL_RCC_OscConfig+0x340>
 8003d1a:	4b61      	ldr	r3, [pc, #388]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1e:	4a60      	ldr	r2, [pc, #384]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003d20:	f043 0304 	orr.w	r3, r3, #4
 8003d24:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d26:	4b5e      	ldr	r3, [pc, #376]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2a:	4a5d      	ldr	r2, [pc, #372]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d32:	e00b      	b.n	8003d4c <HAL_RCC_OscConfig+0x358>
 8003d34:	4b5a      	ldr	r3, [pc, #360]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d38:	4a59      	ldr	r2, [pc, #356]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003d3a:	f023 0301 	bic.w	r3, r3, #1
 8003d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d40:	4b57      	ldr	r3, [pc, #348]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d44:	4a56      	ldr	r2, [pc, #344]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003d46:	f023 0304 	bic.w	r3, r3, #4
 8003d4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d015      	beq.n	8003d80 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d54:	f7fe f870 	bl	8001e38 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5a:	e00a      	b.n	8003d72 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5c:	f7fe f86c 	bl	8001e38 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e0d7      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d72:	4b4b      	ldr	r3, [pc, #300]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0ee      	beq.n	8003d5c <HAL_RCC_OscConfig+0x368>
 8003d7e:	e014      	b.n	8003daa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d80:	f7fe f85a 	bl	8001e38 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d86:	e00a      	b.n	8003d9e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d88:	f7fe f856 	bl	8001e38 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e0c1      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d9e:	4b40      	ldr	r3, [pc, #256]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1ee      	bne.n	8003d88 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003daa:	7dfb      	ldrb	r3, [r7, #23]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d105      	bne.n	8003dbc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db4:	4a3a      	ldr	r2, [pc, #232]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003db6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 80ad 	beq.w	8003f20 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dc6:	4b36      	ldr	r3, [pc, #216]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d060      	beq.n	8003e94 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d145      	bne.n	8003e66 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dda:	4b33      	ldr	r3, [pc, #204]	@ (8003ea8 <HAL_RCC_OscConfig+0x4b4>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de0:	f7fe f82a 	bl	8001e38 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fe f826 	bl	8001e38 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e093      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfa:	4b29      	ldr	r3, [pc, #164]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69da      	ldr	r2, [r3, #28]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e14:	019b      	lsls	r3, r3, #6
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1c:	085b      	lsrs	r3, r3, #1
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	041b      	lsls	r3, r3, #16
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e28:	061b      	lsls	r3, r3, #24
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e30:	071b      	lsls	r3, r3, #28
 8003e32:	491b      	ldr	r1, [pc, #108]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e38:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea8 <HAL_RCC_OscConfig+0x4b4>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3e:	f7fd fffb 	bl	8001e38 <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e46:	f7fd fff7 	bl	8001e38 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e064      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e58:	4b11      	ldr	r3, [pc, #68]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0f0      	beq.n	8003e46 <HAL_RCC_OscConfig+0x452>
 8003e64:	e05c      	b.n	8003f20 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e66:	4b10      	ldr	r3, [pc, #64]	@ (8003ea8 <HAL_RCC_OscConfig+0x4b4>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6c:	f7fd ffe4 	bl	8001e38 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e74:	f7fd ffe0 	bl	8001e38 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e04d      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e86:	4b06      	ldr	r3, [pc, #24]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ac>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x480>
 8003e92:	e045      	b.n	8003f20 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d107      	bne.n	8003eac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e040      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	40007000 	.word	0x40007000
 8003ea8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eac:	4b1f      	ldr	r3, [pc, #124]	@ (8003f2c <HAL_RCC_OscConfig+0x538>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d030      	beq.n	8003f1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d129      	bne.n	8003f1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d122      	bne.n	8003f1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003edc:	4013      	ands	r3, r2
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ee2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d119      	bne.n	8003f1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef2:	085b      	lsrs	r3, r3, #1
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d10f      	bne.n	8003f1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d107      	bne.n	8003f1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f16:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800

08003f30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e042      	b.n	8003fc8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7fc fc62 	bl	8000820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2224      	movs	r2, #36	@ 0x24
 8003f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f82b 	bl	8003fd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695a      	ldr	r2, [r3, #20]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fa8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fd4:	b0c0      	sub	sp, #256	@ 0x100
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fec:	68d9      	ldr	r1, [r3, #12]
 8003fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	ea40 0301 	orr.w	r3, r0, r1
 8003ff8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	431a      	orrs	r2, r3
 8004008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	431a      	orrs	r2, r3
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004028:	f021 010c 	bic.w	r1, r1, #12
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004036:	430b      	orrs	r3, r1
 8004038:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800403a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800404a:	6999      	ldr	r1, [r3, #24]
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	ea40 0301 	orr.w	r3, r0, r1
 8004056:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	4b8f      	ldr	r3, [pc, #572]	@ (800429c <UART_SetConfig+0x2cc>)
 8004060:	429a      	cmp	r2, r3
 8004062:	d005      	beq.n	8004070 <UART_SetConfig+0xa0>
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	4b8d      	ldr	r3, [pc, #564]	@ (80042a0 <UART_SetConfig+0x2d0>)
 800406c:	429a      	cmp	r2, r3
 800406e:	d104      	bne.n	800407a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004070:	f7ff fb02 	bl	8003678 <HAL_RCC_GetPCLK2Freq>
 8004074:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004078:	e003      	b.n	8004082 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800407a:	f7ff fae9 	bl	8003650 <HAL_RCC_GetPCLK1Freq>
 800407e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800408c:	f040 810c 	bne.w	80042a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004094:	2200      	movs	r2, #0
 8004096:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800409a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800409e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80040a2:	4622      	mov	r2, r4
 80040a4:	462b      	mov	r3, r5
 80040a6:	1891      	adds	r1, r2, r2
 80040a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80040aa:	415b      	adcs	r3, r3
 80040ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040b2:	4621      	mov	r1, r4
 80040b4:	eb12 0801 	adds.w	r8, r2, r1
 80040b8:	4629      	mov	r1, r5
 80040ba:	eb43 0901 	adc.w	r9, r3, r1
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040d2:	4690      	mov	r8, r2
 80040d4:	4699      	mov	r9, r3
 80040d6:	4623      	mov	r3, r4
 80040d8:	eb18 0303 	adds.w	r3, r8, r3
 80040dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80040e0:	462b      	mov	r3, r5
 80040e2:	eb49 0303 	adc.w	r3, r9, r3
 80040e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80040fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80040fe:	460b      	mov	r3, r1
 8004100:	18db      	adds	r3, r3, r3
 8004102:	653b      	str	r3, [r7, #80]	@ 0x50
 8004104:	4613      	mov	r3, r2
 8004106:	eb42 0303 	adc.w	r3, r2, r3
 800410a:	657b      	str	r3, [r7, #84]	@ 0x54
 800410c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004110:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004114:	f7fc f8cc 	bl	80002b0 <__aeabi_uldivmod>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4b61      	ldr	r3, [pc, #388]	@ (80042a4 <UART_SetConfig+0x2d4>)
 800411e:	fba3 2302 	umull	r2, r3, r3, r2
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	011c      	lsls	r4, r3, #4
 8004126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800412a:	2200      	movs	r2, #0
 800412c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004130:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004134:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004138:	4642      	mov	r2, r8
 800413a:	464b      	mov	r3, r9
 800413c:	1891      	adds	r1, r2, r2
 800413e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004140:	415b      	adcs	r3, r3
 8004142:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004144:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004148:	4641      	mov	r1, r8
 800414a:	eb12 0a01 	adds.w	sl, r2, r1
 800414e:	4649      	mov	r1, r9
 8004150:	eb43 0b01 	adc.w	fp, r3, r1
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	f04f 0300 	mov.w	r3, #0
 800415c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004160:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004164:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004168:	4692      	mov	sl, r2
 800416a:	469b      	mov	fp, r3
 800416c:	4643      	mov	r3, r8
 800416e:	eb1a 0303 	adds.w	r3, sl, r3
 8004172:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004176:	464b      	mov	r3, r9
 8004178:	eb4b 0303 	adc.w	r3, fp, r3
 800417c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800418c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004190:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004194:	460b      	mov	r3, r1
 8004196:	18db      	adds	r3, r3, r3
 8004198:	643b      	str	r3, [r7, #64]	@ 0x40
 800419a:	4613      	mov	r3, r2
 800419c:	eb42 0303 	adc.w	r3, r2, r3
 80041a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80041a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80041a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80041aa:	f7fc f881 	bl	80002b0 <__aeabi_uldivmod>
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	4611      	mov	r1, r2
 80041b4:	4b3b      	ldr	r3, [pc, #236]	@ (80042a4 <UART_SetConfig+0x2d4>)
 80041b6:	fba3 2301 	umull	r2, r3, r3, r1
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	2264      	movs	r2, #100	@ 0x64
 80041be:	fb02 f303 	mul.w	r3, r2, r3
 80041c2:	1acb      	subs	r3, r1, r3
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80041ca:	4b36      	ldr	r3, [pc, #216]	@ (80042a4 <UART_SetConfig+0x2d4>)
 80041cc:	fba3 2302 	umull	r2, r3, r3, r2
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80041d8:	441c      	add	r4, r3
 80041da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041de:	2200      	movs	r2, #0
 80041e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80041e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80041ec:	4642      	mov	r2, r8
 80041ee:	464b      	mov	r3, r9
 80041f0:	1891      	adds	r1, r2, r2
 80041f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041f4:	415b      	adcs	r3, r3
 80041f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80041fc:	4641      	mov	r1, r8
 80041fe:	1851      	adds	r1, r2, r1
 8004200:	6339      	str	r1, [r7, #48]	@ 0x30
 8004202:	4649      	mov	r1, r9
 8004204:	414b      	adcs	r3, r1
 8004206:	637b      	str	r3, [r7, #52]	@ 0x34
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004214:	4659      	mov	r1, fp
 8004216:	00cb      	lsls	r3, r1, #3
 8004218:	4651      	mov	r1, sl
 800421a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800421e:	4651      	mov	r1, sl
 8004220:	00ca      	lsls	r2, r1, #3
 8004222:	4610      	mov	r0, r2
 8004224:	4619      	mov	r1, r3
 8004226:	4603      	mov	r3, r0
 8004228:	4642      	mov	r2, r8
 800422a:	189b      	adds	r3, r3, r2
 800422c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004230:	464b      	mov	r3, r9
 8004232:	460a      	mov	r2, r1
 8004234:	eb42 0303 	adc.w	r3, r2, r3
 8004238:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800423c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004248:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800424c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004250:	460b      	mov	r3, r1
 8004252:	18db      	adds	r3, r3, r3
 8004254:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004256:	4613      	mov	r3, r2
 8004258:	eb42 0303 	adc.w	r3, r2, r3
 800425c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800425e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004262:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004266:	f7fc f823 	bl	80002b0 <__aeabi_uldivmod>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4b0d      	ldr	r3, [pc, #52]	@ (80042a4 <UART_SetConfig+0x2d4>)
 8004270:	fba3 1302 	umull	r1, r3, r3, r2
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	2164      	movs	r1, #100	@ 0x64
 8004278:	fb01 f303 	mul.w	r3, r1, r3
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	3332      	adds	r3, #50	@ 0x32
 8004282:	4a08      	ldr	r2, [pc, #32]	@ (80042a4 <UART_SetConfig+0x2d4>)
 8004284:	fba2 2303 	umull	r2, r3, r2, r3
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	f003 0207 	and.w	r2, r3, #7
 800428e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4422      	add	r2, r4
 8004296:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004298:	e106      	b.n	80044a8 <UART_SetConfig+0x4d8>
 800429a:	bf00      	nop
 800429c:	40011000 	.word	0x40011000
 80042a0:	40011400 	.word	0x40011400
 80042a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042ac:	2200      	movs	r2, #0
 80042ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80042b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80042ba:	4642      	mov	r2, r8
 80042bc:	464b      	mov	r3, r9
 80042be:	1891      	adds	r1, r2, r2
 80042c0:	6239      	str	r1, [r7, #32]
 80042c2:	415b      	adcs	r3, r3
 80042c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042ca:	4641      	mov	r1, r8
 80042cc:	1854      	adds	r4, r2, r1
 80042ce:	4649      	mov	r1, r9
 80042d0:	eb43 0501 	adc.w	r5, r3, r1
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	00eb      	lsls	r3, r5, #3
 80042de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042e2:	00e2      	lsls	r2, r4, #3
 80042e4:	4614      	mov	r4, r2
 80042e6:	461d      	mov	r5, r3
 80042e8:	4643      	mov	r3, r8
 80042ea:	18e3      	adds	r3, r4, r3
 80042ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042f0:	464b      	mov	r3, r9
 80042f2:	eb45 0303 	adc.w	r3, r5, r3
 80042f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004306:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004316:	4629      	mov	r1, r5
 8004318:	008b      	lsls	r3, r1, #2
 800431a:	4621      	mov	r1, r4
 800431c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004320:	4621      	mov	r1, r4
 8004322:	008a      	lsls	r2, r1, #2
 8004324:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004328:	f7fb ffc2 	bl	80002b0 <__aeabi_uldivmod>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4b60      	ldr	r3, [pc, #384]	@ (80044b4 <UART_SetConfig+0x4e4>)
 8004332:	fba3 2302 	umull	r2, r3, r3, r2
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	011c      	lsls	r4, r3, #4
 800433a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800433e:	2200      	movs	r2, #0
 8004340:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004344:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004348:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800434c:	4642      	mov	r2, r8
 800434e:	464b      	mov	r3, r9
 8004350:	1891      	adds	r1, r2, r2
 8004352:	61b9      	str	r1, [r7, #24]
 8004354:	415b      	adcs	r3, r3
 8004356:	61fb      	str	r3, [r7, #28]
 8004358:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800435c:	4641      	mov	r1, r8
 800435e:	1851      	adds	r1, r2, r1
 8004360:	6139      	str	r1, [r7, #16]
 8004362:	4649      	mov	r1, r9
 8004364:	414b      	adcs	r3, r1
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004374:	4659      	mov	r1, fp
 8004376:	00cb      	lsls	r3, r1, #3
 8004378:	4651      	mov	r1, sl
 800437a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800437e:	4651      	mov	r1, sl
 8004380:	00ca      	lsls	r2, r1, #3
 8004382:	4610      	mov	r0, r2
 8004384:	4619      	mov	r1, r3
 8004386:	4603      	mov	r3, r0
 8004388:	4642      	mov	r2, r8
 800438a:	189b      	adds	r3, r3, r2
 800438c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004390:	464b      	mov	r3, r9
 8004392:	460a      	mov	r2, r1
 8004394:	eb42 0303 	adc.w	r3, r2, r3
 8004398:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800439c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80043b4:	4649      	mov	r1, r9
 80043b6:	008b      	lsls	r3, r1, #2
 80043b8:	4641      	mov	r1, r8
 80043ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043be:	4641      	mov	r1, r8
 80043c0:	008a      	lsls	r2, r1, #2
 80043c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80043c6:	f7fb ff73 	bl	80002b0 <__aeabi_uldivmod>
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4611      	mov	r1, r2
 80043d0:	4b38      	ldr	r3, [pc, #224]	@ (80044b4 <UART_SetConfig+0x4e4>)
 80043d2:	fba3 2301 	umull	r2, r3, r3, r1
 80043d6:	095b      	lsrs	r3, r3, #5
 80043d8:	2264      	movs	r2, #100	@ 0x64
 80043da:	fb02 f303 	mul.w	r3, r2, r3
 80043de:	1acb      	subs	r3, r1, r3
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	3332      	adds	r3, #50	@ 0x32
 80043e4:	4a33      	ldr	r2, [pc, #204]	@ (80044b4 <UART_SetConfig+0x4e4>)
 80043e6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043f0:	441c      	add	r4, r3
 80043f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043f6:	2200      	movs	r2, #0
 80043f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80043fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80043fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004400:	4642      	mov	r2, r8
 8004402:	464b      	mov	r3, r9
 8004404:	1891      	adds	r1, r2, r2
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	415b      	adcs	r3, r3
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004410:	4641      	mov	r1, r8
 8004412:	1851      	adds	r1, r2, r1
 8004414:	6039      	str	r1, [r7, #0]
 8004416:	4649      	mov	r1, r9
 8004418:	414b      	adcs	r3, r1
 800441a:	607b      	str	r3, [r7, #4]
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004428:	4659      	mov	r1, fp
 800442a:	00cb      	lsls	r3, r1, #3
 800442c:	4651      	mov	r1, sl
 800442e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004432:	4651      	mov	r1, sl
 8004434:	00ca      	lsls	r2, r1, #3
 8004436:	4610      	mov	r0, r2
 8004438:	4619      	mov	r1, r3
 800443a:	4603      	mov	r3, r0
 800443c:	4642      	mov	r2, r8
 800443e:	189b      	adds	r3, r3, r2
 8004440:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004442:	464b      	mov	r3, r9
 8004444:	460a      	mov	r2, r1
 8004446:	eb42 0303 	adc.w	r3, r2, r3
 800444a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	663b      	str	r3, [r7, #96]	@ 0x60
 8004456:	667a      	str	r2, [r7, #100]	@ 0x64
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004464:	4649      	mov	r1, r9
 8004466:	008b      	lsls	r3, r1, #2
 8004468:	4641      	mov	r1, r8
 800446a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800446e:	4641      	mov	r1, r8
 8004470:	008a      	lsls	r2, r1, #2
 8004472:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004476:	f7fb ff1b 	bl	80002b0 <__aeabi_uldivmod>
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	4b0d      	ldr	r3, [pc, #52]	@ (80044b4 <UART_SetConfig+0x4e4>)
 8004480:	fba3 1302 	umull	r1, r3, r3, r2
 8004484:	095b      	lsrs	r3, r3, #5
 8004486:	2164      	movs	r1, #100	@ 0x64
 8004488:	fb01 f303 	mul.w	r3, r1, r3
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	3332      	adds	r3, #50	@ 0x32
 8004492:	4a08      	ldr	r2, [pc, #32]	@ (80044b4 <UART_SetConfig+0x4e4>)
 8004494:	fba2 2303 	umull	r2, r3, r2, r3
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	f003 020f 	and.w	r2, r3, #15
 800449e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4422      	add	r2, r4
 80044a6:	609a      	str	r2, [r3, #8]
}
 80044a8:	bf00      	nop
 80044aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80044ae:	46bd      	mov	sp, r7
 80044b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044b4:	51eb851f 	.word	0x51eb851f

080044b8 <siprintf>:
 80044b8:	b40e      	push	{r1, r2, r3}
 80044ba:	b510      	push	{r4, lr}
 80044bc:	b09d      	sub	sp, #116	@ 0x74
 80044be:	ab1f      	add	r3, sp, #124	@ 0x7c
 80044c0:	9002      	str	r0, [sp, #8]
 80044c2:	9006      	str	r0, [sp, #24]
 80044c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80044c8:	480a      	ldr	r0, [pc, #40]	@ (80044f4 <siprintf+0x3c>)
 80044ca:	9107      	str	r1, [sp, #28]
 80044cc:	9104      	str	r1, [sp, #16]
 80044ce:	490a      	ldr	r1, [pc, #40]	@ (80044f8 <siprintf+0x40>)
 80044d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80044d4:	9105      	str	r1, [sp, #20]
 80044d6:	2400      	movs	r4, #0
 80044d8:	a902      	add	r1, sp, #8
 80044da:	6800      	ldr	r0, [r0, #0]
 80044dc:	9301      	str	r3, [sp, #4]
 80044de:	941b      	str	r4, [sp, #108]	@ 0x6c
 80044e0:	f000 f994 	bl	800480c <_svfiprintf_r>
 80044e4:	9b02      	ldr	r3, [sp, #8]
 80044e6:	701c      	strb	r4, [r3, #0]
 80044e8:	b01d      	add	sp, #116	@ 0x74
 80044ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044ee:	b003      	add	sp, #12
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	20000028 	.word	0x20000028
 80044f8:	ffff0208 	.word	0xffff0208

080044fc <memset>:
 80044fc:	4402      	add	r2, r0
 80044fe:	4603      	mov	r3, r0
 8004500:	4293      	cmp	r3, r2
 8004502:	d100      	bne.n	8004506 <memset+0xa>
 8004504:	4770      	bx	lr
 8004506:	f803 1b01 	strb.w	r1, [r3], #1
 800450a:	e7f9      	b.n	8004500 <memset+0x4>

0800450c <__errno>:
 800450c:	4b01      	ldr	r3, [pc, #4]	@ (8004514 <__errno+0x8>)
 800450e:	6818      	ldr	r0, [r3, #0]
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	20000028 	.word	0x20000028

08004518 <__libc_init_array>:
 8004518:	b570      	push	{r4, r5, r6, lr}
 800451a:	4d0d      	ldr	r5, [pc, #52]	@ (8004550 <__libc_init_array+0x38>)
 800451c:	4c0d      	ldr	r4, [pc, #52]	@ (8004554 <__libc_init_array+0x3c>)
 800451e:	1b64      	subs	r4, r4, r5
 8004520:	10a4      	asrs	r4, r4, #2
 8004522:	2600      	movs	r6, #0
 8004524:	42a6      	cmp	r6, r4
 8004526:	d109      	bne.n	800453c <__libc_init_array+0x24>
 8004528:	4d0b      	ldr	r5, [pc, #44]	@ (8004558 <__libc_init_array+0x40>)
 800452a:	4c0c      	ldr	r4, [pc, #48]	@ (800455c <__libc_init_array+0x44>)
 800452c:	f000 fc64 	bl	8004df8 <_init>
 8004530:	1b64      	subs	r4, r4, r5
 8004532:	10a4      	asrs	r4, r4, #2
 8004534:	2600      	movs	r6, #0
 8004536:	42a6      	cmp	r6, r4
 8004538:	d105      	bne.n	8004546 <__libc_init_array+0x2e>
 800453a:	bd70      	pop	{r4, r5, r6, pc}
 800453c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004540:	4798      	blx	r3
 8004542:	3601      	adds	r6, #1
 8004544:	e7ee      	b.n	8004524 <__libc_init_array+0xc>
 8004546:	f855 3b04 	ldr.w	r3, [r5], #4
 800454a:	4798      	blx	r3
 800454c:	3601      	adds	r6, #1
 800454e:	e7f2      	b.n	8004536 <__libc_init_array+0x1e>
 8004550:	08004f60 	.word	0x08004f60
 8004554:	08004f60 	.word	0x08004f60
 8004558:	08004f60 	.word	0x08004f60
 800455c:	08004f64 	.word	0x08004f64

08004560 <__retarget_lock_acquire_recursive>:
 8004560:	4770      	bx	lr

08004562 <__retarget_lock_release_recursive>:
 8004562:	4770      	bx	lr

08004564 <_free_r>:
 8004564:	b538      	push	{r3, r4, r5, lr}
 8004566:	4605      	mov	r5, r0
 8004568:	2900      	cmp	r1, #0
 800456a:	d041      	beq.n	80045f0 <_free_r+0x8c>
 800456c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004570:	1f0c      	subs	r4, r1, #4
 8004572:	2b00      	cmp	r3, #0
 8004574:	bfb8      	it	lt
 8004576:	18e4      	addlt	r4, r4, r3
 8004578:	f000 f8e0 	bl	800473c <__malloc_lock>
 800457c:	4a1d      	ldr	r2, [pc, #116]	@ (80045f4 <_free_r+0x90>)
 800457e:	6813      	ldr	r3, [r2, #0]
 8004580:	b933      	cbnz	r3, 8004590 <_free_r+0x2c>
 8004582:	6063      	str	r3, [r4, #4]
 8004584:	6014      	str	r4, [r2, #0]
 8004586:	4628      	mov	r0, r5
 8004588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800458c:	f000 b8dc 	b.w	8004748 <__malloc_unlock>
 8004590:	42a3      	cmp	r3, r4
 8004592:	d908      	bls.n	80045a6 <_free_r+0x42>
 8004594:	6820      	ldr	r0, [r4, #0]
 8004596:	1821      	adds	r1, r4, r0
 8004598:	428b      	cmp	r3, r1
 800459a:	bf01      	itttt	eq
 800459c:	6819      	ldreq	r1, [r3, #0]
 800459e:	685b      	ldreq	r3, [r3, #4]
 80045a0:	1809      	addeq	r1, r1, r0
 80045a2:	6021      	streq	r1, [r4, #0]
 80045a4:	e7ed      	b.n	8004582 <_free_r+0x1e>
 80045a6:	461a      	mov	r2, r3
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	b10b      	cbz	r3, 80045b0 <_free_r+0x4c>
 80045ac:	42a3      	cmp	r3, r4
 80045ae:	d9fa      	bls.n	80045a6 <_free_r+0x42>
 80045b0:	6811      	ldr	r1, [r2, #0]
 80045b2:	1850      	adds	r0, r2, r1
 80045b4:	42a0      	cmp	r0, r4
 80045b6:	d10b      	bne.n	80045d0 <_free_r+0x6c>
 80045b8:	6820      	ldr	r0, [r4, #0]
 80045ba:	4401      	add	r1, r0
 80045bc:	1850      	adds	r0, r2, r1
 80045be:	4283      	cmp	r3, r0
 80045c0:	6011      	str	r1, [r2, #0]
 80045c2:	d1e0      	bne.n	8004586 <_free_r+0x22>
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	6053      	str	r3, [r2, #4]
 80045ca:	4408      	add	r0, r1
 80045cc:	6010      	str	r0, [r2, #0]
 80045ce:	e7da      	b.n	8004586 <_free_r+0x22>
 80045d0:	d902      	bls.n	80045d8 <_free_r+0x74>
 80045d2:	230c      	movs	r3, #12
 80045d4:	602b      	str	r3, [r5, #0]
 80045d6:	e7d6      	b.n	8004586 <_free_r+0x22>
 80045d8:	6820      	ldr	r0, [r4, #0]
 80045da:	1821      	adds	r1, r4, r0
 80045dc:	428b      	cmp	r3, r1
 80045de:	bf04      	itt	eq
 80045e0:	6819      	ldreq	r1, [r3, #0]
 80045e2:	685b      	ldreq	r3, [r3, #4]
 80045e4:	6063      	str	r3, [r4, #4]
 80045e6:	bf04      	itt	eq
 80045e8:	1809      	addeq	r1, r1, r0
 80045ea:	6021      	streq	r1, [r4, #0]
 80045ec:	6054      	str	r4, [r2, #4]
 80045ee:	e7ca      	b.n	8004586 <_free_r+0x22>
 80045f0:	bd38      	pop	{r3, r4, r5, pc}
 80045f2:	bf00      	nop
 80045f4:	200003f4 	.word	0x200003f4

080045f8 <sbrk_aligned>:
 80045f8:	b570      	push	{r4, r5, r6, lr}
 80045fa:	4e0f      	ldr	r6, [pc, #60]	@ (8004638 <sbrk_aligned+0x40>)
 80045fc:	460c      	mov	r4, r1
 80045fe:	6831      	ldr	r1, [r6, #0]
 8004600:	4605      	mov	r5, r0
 8004602:	b911      	cbnz	r1, 800460a <sbrk_aligned+0x12>
 8004604:	f000 fba4 	bl	8004d50 <_sbrk_r>
 8004608:	6030      	str	r0, [r6, #0]
 800460a:	4621      	mov	r1, r4
 800460c:	4628      	mov	r0, r5
 800460e:	f000 fb9f 	bl	8004d50 <_sbrk_r>
 8004612:	1c43      	adds	r3, r0, #1
 8004614:	d103      	bne.n	800461e <sbrk_aligned+0x26>
 8004616:	f04f 34ff 	mov.w	r4, #4294967295
 800461a:	4620      	mov	r0, r4
 800461c:	bd70      	pop	{r4, r5, r6, pc}
 800461e:	1cc4      	adds	r4, r0, #3
 8004620:	f024 0403 	bic.w	r4, r4, #3
 8004624:	42a0      	cmp	r0, r4
 8004626:	d0f8      	beq.n	800461a <sbrk_aligned+0x22>
 8004628:	1a21      	subs	r1, r4, r0
 800462a:	4628      	mov	r0, r5
 800462c:	f000 fb90 	bl	8004d50 <_sbrk_r>
 8004630:	3001      	adds	r0, #1
 8004632:	d1f2      	bne.n	800461a <sbrk_aligned+0x22>
 8004634:	e7ef      	b.n	8004616 <sbrk_aligned+0x1e>
 8004636:	bf00      	nop
 8004638:	200003f0 	.word	0x200003f0

0800463c <_malloc_r>:
 800463c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004640:	1ccd      	adds	r5, r1, #3
 8004642:	f025 0503 	bic.w	r5, r5, #3
 8004646:	3508      	adds	r5, #8
 8004648:	2d0c      	cmp	r5, #12
 800464a:	bf38      	it	cc
 800464c:	250c      	movcc	r5, #12
 800464e:	2d00      	cmp	r5, #0
 8004650:	4606      	mov	r6, r0
 8004652:	db01      	blt.n	8004658 <_malloc_r+0x1c>
 8004654:	42a9      	cmp	r1, r5
 8004656:	d904      	bls.n	8004662 <_malloc_r+0x26>
 8004658:	230c      	movs	r3, #12
 800465a:	6033      	str	r3, [r6, #0]
 800465c:	2000      	movs	r0, #0
 800465e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004662:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004738 <_malloc_r+0xfc>
 8004666:	f000 f869 	bl	800473c <__malloc_lock>
 800466a:	f8d8 3000 	ldr.w	r3, [r8]
 800466e:	461c      	mov	r4, r3
 8004670:	bb44      	cbnz	r4, 80046c4 <_malloc_r+0x88>
 8004672:	4629      	mov	r1, r5
 8004674:	4630      	mov	r0, r6
 8004676:	f7ff ffbf 	bl	80045f8 <sbrk_aligned>
 800467a:	1c43      	adds	r3, r0, #1
 800467c:	4604      	mov	r4, r0
 800467e:	d158      	bne.n	8004732 <_malloc_r+0xf6>
 8004680:	f8d8 4000 	ldr.w	r4, [r8]
 8004684:	4627      	mov	r7, r4
 8004686:	2f00      	cmp	r7, #0
 8004688:	d143      	bne.n	8004712 <_malloc_r+0xd6>
 800468a:	2c00      	cmp	r4, #0
 800468c:	d04b      	beq.n	8004726 <_malloc_r+0xea>
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	4639      	mov	r1, r7
 8004692:	4630      	mov	r0, r6
 8004694:	eb04 0903 	add.w	r9, r4, r3
 8004698:	f000 fb5a 	bl	8004d50 <_sbrk_r>
 800469c:	4581      	cmp	r9, r0
 800469e:	d142      	bne.n	8004726 <_malloc_r+0xea>
 80046a0:	6821      	ldr	r1, [r4, #0]
 80046a2:	1a6d      	subs	r5, r5, r1
 80046a4:	4629      	mov	r1, r5
 80046a6:	4630      	mov	r0, r6
 80046a8:	f7ff ffa6 	bl	80045f8 <sbrk_aligned>
 80046ac:	3001      	adds	r0, #1
 80046ae:	d03a      	beq.n	8004726 <_malloc_r+0xea>
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	442b      	add	r3, r5
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	f8d8 3000 	ldr.w	r3, [r8]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	bb62      	cbnz	r2, 8004718 <_malloc_r+0xdc>
 80046be:	f8c8 7000 	str.w	r7, [r8]
 80046c2:	e00f      	b.n	80046e4 <_malloc_r+0xa8>
 80046c4:	6822      	ldr	r2, [r4, #0]
 80046c6:	1b52      	subs	r2, r2, r5
 80046c8:	d420      	bmi.n	800470c <_malloc_r+0xd0>
 80046ca:	2a0b      	cmp	r2, #11
 80046cc:	d917      	bls.n	80046fe <_malloc_r+0xc2>
 80046ce:	1961      	adds	r1, r4, r5
 80046d0:	42a3      	cmp	r3, r4
 80046d2:	6025      	str	r5, [r4, #0]
 80046d4:	bf18      	it	ne
 80046d6:	6059      	strne	r1, [r3, #4]
 80046d8:	6863      	ldr	r3, [r4, #4]
 80046da:	bf08      	it	eq
 80046dc:	f8c8 1000 	streq.w	r1, [r8]
 80046e0:	5162      	str	r2, [r4, r5]
 80046e2:	604b      	str	r3, [r1, #4]
 80046e4:	4630      	mov	r0, r6
 80046e6:	f000 f82f 	bl	8004748 <__malloc_unlock>
 80046ea:	f104 000b 	add.w	r0, r4, #11
 80046ee:	1d23      	adds	r3, r4, #4
 80046f0:	f020 0007 	bic.w	r0, r0, #7
 80046f4:	1ac2      	subs	r2, r0, r3
 80046f6:	bf1c      	itt	ne
 80046f8:	1a1b      	subne	r3, r3, r0
 80046fa:	50a3      	strne	r3, [r4, r2]
 80046fc:	e7af      	b.n	800465e <_malloc_r+0x22>
 80046fe:	6862      	ldr	r2, [r4, #4]
 8004700:	42a3      	cmp	r3, r4
 8004702:	bf0c      	ite	eq
 8004704:	f8c8 2000 	streq.w	r2, [r8]
 8004708:	605a      	strne	r2, [r3, #4]
 800470a:	e7eb      	b.n	80046e4 <_malloc_r+0xa8>
 800470c:	4623      	mov	r3, r4
 800470e:	6864      	ldr	r4, [r4, #4]
 8004710:	e7ae      	b.n	8004670 <_malloc_r+0x34>
 8004712:	463c      	mov	r4, r7
 8004714:	687f      	ldr	r7, [r7, #4]
 8004716:	e7b6      	b.n	8004686 <_malloc_r+0x4a>
 8004718:	461a      	mov	r2, r3
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	42a3      	cmp	r3, r4
 800471e:	d1fb      	bne.n	8004718 <_malloc_r+0xdc>
 8004720:	2300      	movs	r3, #0
 8004722:	6053      	str	r3, [r2, #4]
 8004724:	e7de      	b.n	80046e4 <_malloc_r+0xa8>
 8004726:	230c      	movs	r3, #12
 8004728:	6033      	str	r3, [r6, #0]
 800472a:	4630      	mov	r0, r6
 800472c:	f000 f80c 	bl	8004748 <__malloc_unlock>
 8004730:	e794      	b.n	800465c <_malloc_r+0x20>
 8004732:	6005      	str	r5, [r0, #0]
 8004734:	e7d6      	b.n	80046e4 <_malloc_r+0xa8>
 8004736:	bf00      	nop
 8004738:	200003f4 	.word	0x200003f4

0800473c <__malloc_lock>:
 800473c:	4801      	ldr	r0, [pc, #4]	@ (8004744 <__malloc_lock+0x8>)
 800473e:	f7ff bf0f 	b.w	8004560 <__retarget_lock_acquire_recursive>
 8004742:	bf00      	nop
 8004744:	200003ec 	.word	0x200003ec

08004748 <__malloc_unlock>:
 8004748:	4801      	ldr	r0, [pc, #4]	@ (8004750 <__malloc_unlock+0x8>)
 800474a:	f7ff bf0a 	b.w	8004562 <__retarget_lock_release_recursive>
 800474e:	bf00      	nop
 8004750:	200003ec 	.word	0x200003ec

08004754 <__ssputs_r>:
 8004754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004758:	688e      	ldr	r6, [r1, #8]
 800475a:	461f      	mov	r7, r3
 800475c:	42be      	cmp	r6, r7
 800475e:	680b      	ldr	r3, [r1, #0]
 8004760:	4682      	mov	sl, r0
 8004762:	460c      	mov	r4, r1
 8004764:	4690      	mov	r8, r2
 8004766:	d82d      	bhi.n	80047c4 <__ssputs_r+0x70>
 8004768:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800476c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004770:	d026      	beq.n	80047c0 <__ssputs_r+0x6c>
 8004772:	6965      	ldr	r5, [r4, #20]
 8004774:	6909      	ldr	r1, [r1, #16]
 8004776:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800477a:	eba3 0901 	sub.w	r9, r3, r1
 800477e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004782:	1c7b      	adds	r3, r7, #1
 8004784:	444b      	add	r3, r9
 8004786:	106d      	asrs	r5, r5, #1
 8004788:	429d      	cmp	r5, r3
 800478a:	bf38      	it	cc
 800478c:	461d      	movcc	r5, r3
 800478e:	0553      	lsls	r3, r2, #21
 8004790:	d527      	bpl.n	80047e2 <__ssputs_r+0x8e>
 8004792:	4629      	mov	r1, r5
 8004794:	f7ff ff52 	bl	800463c <_malloc_r>
 8004798:	4606      	mov	r6, r0
 800479a:	b360      	cbz	r0, 80047f6 <__ssputs_r+0xa2>
 800479c:	6921      	ldr	r1, [r4, #16]
 800479e:	464a      	mov	r2, r9
 80047a0:	f000 fae6 	bl	8004d70 <memcpy>
 80047a4:	89a3      	ldrh	r3, [r4, #12]
 80047a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80047aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047ae:	81a3      	strh	r3, [r4, #12]
 80047b0:	6126      	str	r6, [r4, #16]
 80047b2:	6165      	str	r5, [r4, #20]
 80047b4:	444e      	add	r6, r9
 80047b6:	eba5 0509 	sub.w	r5, r5, r9
 80047ba:	6026      	str	r6, [r4, #0]
 80047bc:	60a5      	str	r5, [r4, #8]
 80047be:	463e      	mov	r6, r7
 80047c0:	42be      	cmp	r6, r7
 80047c2:	d900      	bls.n	80047c6 <__ssputs_r+0x72>
 80047c4:	463e      	mov	r6, r7
 80047c6:	6820      	ldr	r0, [r4, #0]
 80047c8:	4632      	mov	r2, r6
 80047ca:	4641      	mov	r1, r8
 80047cc:	f000 faa6 	bl	8004d1c <memmove>
 80047d0:	68a3      	ldr	r3, [r4, #8]
 80047d2:	1b9b      	subs	r3, r3, r6
 80047d4:	60a3      	str	r3, [r4, #8]
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	4433      	add	r3, r6
 80047da:	6023      	str	r3, [r4, #0]
 80047dc:	2000      	movs	r0, #0
 80047de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e2:	462a      	mov	r2, r5
 80047e4:	f000 fad2 	bl	8004d8c <_realloc_r>
 80047e8:	4606      	mov	r6, r0
 80047ea:	2800      	cmp	r0, #0
 80047ec:	d1e0      	bne.n	80047b0 <__ssputs_r+0x5c>
 80047ee:	6921      	ldr	r1, [r4, #16]
 80047f0:	4650      	mov	r0, sl
 80047f2:	f7ff feb7 	bl	8004564 <_free_r>
 80047f6:	230c      	movs	r3, #12
 80047f8:	f8ca 3000 	str.w	r3, [sl]
 80047fc:	89a3      	ldrh	r3, [r4, #12]
 80047fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004802:	81a3      	strh	r3, [r4, #12]
 8004804:	f04f 30ff 	mov.w	r0, #4294967295
 8004808:	e7e9      	b.n	80047de <__ssputs_r+0x8a>
	...

0800480c <_svfiprintf_r>:
 800480c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004810:	4698      	mov	r8, r3
 8004812:	898b      	ldrh	r3, [r1, #12]
 8004814:	061b      	lsls	r3, r3, #24
 8004816:	b09d      	sub	sp, #116	@ 0x74
 8004818:	4607      	mov	r7, r0
 800481a:	460d      	mov	r5, r1
 800481c:	4614      	mov	r4, r2
 800481e:	d510      	bpl.n	8004842 <_svfiprintf_r+0x36>
 8004820:	690b      	ldr	r3, [r1, #16]
 8004822:	b973      	cbnz	r3, 8004842 <_svfiprintf_r+0x36>
 8004824:	2140      	movs	r1, #64	@ 0x40
 8004826:	f7ff ff09 	bl	800463c <_malloc_r>
 800482a:	6028      	str	r0, [r5, #0]
 800482c:	6128      	str	r0, [r5, #16]
 800482e:	b930      	cbnz	r0, 800483e <_svfiprintf_r+0x32>
 8004830:	230c      	movs	r3, #12
 8004832:	603b      	str	r3, [r7, #0]
 8004834:	f04f 30ff 	mov.w	r0, #4294967295
 8004838:	b01d      	add	sp, #116	@ 0x74
 800483a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800483e:	2340      	movs	r3, #64	@ 0x40
 8004840:	616b      	str	r3, [r5, #20]
 8004842:	2300      	movs	r3, #0
 8004844:	9309      	str	r3, [sp, #36]	@ 0x24
 8004846:	2320      	movs	r3, #32
 8004848:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800484c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004850:	2330      	movs	r3, #48	@ 0x30
 8004852:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80049f0 <_svfiprintf_r+0x1e4>
 8004856:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800485a:	f04f 0901 	mov.w	r9, #1
 800485e:	4623      	mov	r3, r4
 8004860:	469a      	mov	sl, r3
 8004862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004866:	b10a      	cbz	r2, 800486c <_svfiprintf_r+0x60>
 8004868:	2a25      	cmp	r2, #37	@ 0x25
 800486a:	d1f9      	bne.n	8004860 <_svfiprintf_r+0x54>
 800486c:	ebba 0b04 	subs.w	fp, sl, r4
 8004870:	d00b      	beq.n	800488a <_svfiprintf_r+0x7e>
 8004872:	465b      	mov	r3, fp
 8004874:	4622      	mov	r2, r4
 8004876:	4629      	mov	r1, r5
 8004878:	4638      	mov	r0, r7
 800487a:	f7ff ff6b 	bl	8004754 <__ssputs_r>
 800487e:	3001      	adds	r0, #1
 8004880:	f000 80a7 	beq.w	80049d2 <_svfiprintf_r+0x1c6>
 8004884:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004886:	445a      	add	r2, fp
 8004888:	9209      	str	r2, [sp, #36]	@ 0x24
 800488a:	f89a 3000 	ldrb.w	r3, [sl]
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 809f 	beq.w	80049d2 <_svfiprintf_r+0x1c6>
 8004894:	2300      	movs	r3, #0
 8004896:	f04f 32ff 	mov.w	r2, #4294967295
 800489a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800489e:	f10a 0a01 	add.w	sl, sl, #1
 80048a2:	9304      	str	r3, [sp, #16]
 80048a4:	9307      	str	r3, [sp, #28]
 80048a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80048aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80048ac:	4654      	mov	r4, sl
 80048ae:	2205      	movs	r2, #5
 80048b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048b4:	484e      	ldr	r0, [pc, #312]	@ (80049f0 <_svfiprintf_r+0x1e4>)
 80048b6:	f7fb fcab 	bl	8000210 <memchr>
 80048ba:	9a04      	ldr	r2, [sp, #16]
 80048bc:	b9d8      	cbnz	r0, 80048f6 <_svfiprintf_r+0xea>
 80048be:	06d0      	lsls	r0, r2, #27
 80048c0:	bf44      	itt	mi
 80048c2:	2320      	movmi	r3, #32
 80048c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048c8:	0711      	lsls	r1, r2, #28
 80048ca:	bf44      	itt	mi
 80048cc:	232b      	movmi	r3, #43	@ 0x2b
 80048ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048d2:	f89a 3000 	ldrb.w	r3, [sl]
 80048d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80048d8:	d015      	beq.n	8004906 <_svfiprintf_r+0xfa>
 80048da:	9a07      	ldr	r2, [sp, #28]
 80048dc:	4654      	mov	r4, sl
 80048de:	2000      	movs	r0, #0
 80048e0:	f04f 0c0a 	mov.w	ip, #10
 80048e4:	4621      	mov	r1, r4
 80048e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048ea:	3b30      	subs	r3, #48	@ 0x30
 80048ec:	2b09      	cmp	r3, #9
 80048ee:	d94b      	bls.n	8004988 <_svfiprintf_r+0x17c>
 80048f0:	b1b0      	cbz	r0, 8004920 <_svfiprintf_r+0x114>
 80048f2:	9207      	str	r2, [sp, #28]
 80048f4:	e014      	b.n	8004920 <_svfiprintf_r+0x114>
 80048f6:	eba0 0308 	sub.w	r3, r0, r8
 80048fa:	fa09 f303 	lsl.w	r3, r9, r3
 80048fe:	4313      	orrs	r3, r2
 8004900:	9304      	str	r3, [sp, #16]
 8004902:	46a2      	mov	sl, r4
 8004904:	e7d2      	b.n	80048ac <_svfiprintf_r+0xa0>
 8004906:	9b03      	ldr	r3, [sp, #12]
 8004908:	1d19      	adds	r1, r3, #4
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	9103      	str	r1, [sp, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	bfbb      	ittet	lt
 8004912:	425b      	neglt	r3, r3
 8004914:	f042 0202 	orrlt.w	r2, r2, #2
 8004918:	9307      	strge	r3, [sp, #28]
 800491a:	9307      	strlt	r3, [sp, #28]
 800491c:	bfb8      	it	lt
 800491e:	9204      	strlt	r2, [sp, #16]
 8004920:	7823      	ldrb	r3, [r4, #0]
 8004922:	2b2e      	cmp	r3, #46	@ 0x2e
 8004924:	d10a      	bne.n	800493c <_svfiprintf_r+0x130>
 8004926:	7863      	ldrb	r3, [r4, #1]
 8004928:	2b2a      	cmp	r3, #42	@ 0x2a
 800492a:	d132      	bne.n	8004992 <_svfiprintf_r+0x186>
 800492c:	9b03      	ldr	r3, [sp, #12]
 800492e:	1d1a      	adds	r2, r3, #4
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	9203      	str	r2, [sp, #12]
 8004934:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004938:	3402      	adds	r4, #2
 800493a:	9305      	str	r3, [sp, #20]
 800493c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004a00 <_svfiprintf_r+0x1f4>
 8004940:	7821      	ldrb	r1, [r4, #0]
 8004942:	2203      	movs	r2, #3
 8004944:	4650      	mov	r0, sl
 8004946:	f7fb fc63 	bl	8000210 <memchr>
 800494a:	b138      	cbz	r0, 800495c <_svfiprintf_r+0x150>
 800494c:	9b04      	ldr	r3, [sp, #16]
 800494e:	eba0 000a 	sub.w	r0, r0, sl
 8004952:	2240      	movs	r2, #64	@ 0x40
 8004954:	4082      	lsls	r2, r0
 8004956:	4313      	orrs	r3, r2
 8004958:	3401      	adds	r4, #1
 800495a:	9304      	str	r3, [sp, #16]
 800495c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004960:	4824      	ldr	r0, [pc, #144]	@ (80049f4 <_svfiprintf_r+0x1e8>)
 8004962:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004966:	2206      	movs	r2, #6
 8004968:	f7fb fc52 	bl	8000210 <memchr>
 800496c:	2800      	cmp	r0, #0
 800496e:	d036      	beq.n	80049de <_svfiprintf_r+0x1d2>
 8004970:	4b21      	ldr	r3, [pc, #132]	@ (80049f8 <_svfiprintf_r+0x1ec>)
 8004972:	bb1b      	cbnz	r3, 80049bc <_svfiprintf_r+0x1b0>
 8004974:	9b03      	ldr	r3, [sp, #12]
 8004976:	3307      	adds	r3, #7
 8004978:	f023 0307 	bic.w	r3, r3, #7
 800497c:	3308      	adds	r3, #8
 800497e:	9303      	str	r3, [sp, #12]
 8004980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004982:	4433      	add	r3, r6
 8004984:	9309      	str	r3, [sp, #36]	@ 0x24
 8004986:	e76a      	b.n	800485e <_svfiprintf_r+0x52>
 8004988:	fb0c 3202 	mla	r2, ip, r2, r3
 800498c:	460c      	mov	r4, r1
 800498e:	2001      	movs	r0, #1
 8004990:	e7a8      	b.n	80048e4 <_svfiprintf_r+0xd8>
 8004992:	2300      	movs	r3, #0
 8004994:	3401      	adds	r4, #1
 8004996:	9305      	str	r3, [sp, #20]
 8004998:	4619      	mov	r1, r3
 800499a:	f04f 0c0a 	mov.w	ip, #10
 800499e:	4620      	mov	r0, r4
 80049a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049a4:	3a30      	subs	r2, #48	@ 0x30
 80049a6:	2a09      	cmp	r2, #9
 80049a8:	d903      	bls.n	80049b2 <_svfiprintf_r+0x1a6>
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0c6      	beq.n	800493c <_svfiprintf_r+0x130>
 80049ae:	9105      	str	r1, [sp, #20]
 80049b0:	e7c4      	b.n	800493c <_svfiprintf_r+0x130>
 80049b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80049b6:	4604      	mov	r4, r0
 80049b8:	2301      	movs	r3, #1
 80049ba:	e7f0      	b.n	800499e <_svfiprintf_r+0x192>
 80049bc:	ab03      	add	r3, sp, #12
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	462a      	mov	r2, r5
 80049c2:	4b0e      	ldr	r3, [pc, #56]	@ (80049fc <_svfiprintf_r+0x1f0>)
 80049c4:	a904      	add	r1, sp, #16
 80049c6:	4638      	mov	r0, r7
 80049c8:	f3af 8000 	nop.w
 80049cc:	1c42      	adds	r2, r0, #1
 80049ce:	4606      	mov	r6, r0
 80049d0:	d1d6      	bne.n	8004980 <_svfiprintf_r+0x174>
 80049d2:	89ab      	ldrh	r3, [r5, #12]
 80049d4:	065b      	lsls	r3, r3, #25
 80049d6:	f53f af2d 	bmi.w	8004834 <_svfiprintf_r+0x28>
 80049da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80049dc:	e72c      	b.n	8004838 <_svfiprintf_r+0x2c>
 80049de:	ab03      	add	r3, sp, #12
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	462a      	mov	r2, r5
 80049e4:	4b05      	ldr	r3, [pc, #20]	@ (80049fc <_svfiprintf_r+0x1f0>)
 80049e6:	a904      	add	r1, sp, #16
 80049e8:	4638      	mov	r0, r7
 80049ea:	f000 f879 	bl	8004ae0 <_printf_i>
 80049ee:	e7ed      	b.n	80049cc <_svfiprintf_r+0x1c0>
 80049f0:	08004f24 	.word	0x08004f24
 80049f4:	08004f2e 	.word	0x08004f2e
 80049f8:	00000000 	.word	0x00000000
 80049fc:	08004755 	.word	0x08004755
 8004a00:	08004f2a 	.word	0x08004f2a

08004a04 <_printf_common>:
 8004a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a08:	4616      	mov	r6, r2
 8004a0a:	4698      	mov	r8, r3
 8004a0c:	688a      	ldr	r2, [r1, #8]
 8004a0e:	690b      	ldr	r3, [r1, #16]
 8004a10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a14:	4293      	cmp	r3, r2
 8004a16:	bfb8      	it	lt
 8004a18:	4613      	movlt	r3, r2
 8004a1a:	6033      	str	r3, [r6, #0]
 8004a1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a20:	4607      	mov	r7, r0
 8004a22:	460c      	mov	r4, r1
 8004a24:	b10a      	cbz	r2, 8004a2a <_printf_common+0x26>
 8004a26:	3301      	adds	r3, #1
 8004a28:	6033      	str	r3, [r6, #0]
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	0699      	lsls	r1, r3, #26
 8004a2e:	bf42      	ittt	mi
 8004a30:	6833      	ldrmi	r3, [r6, #0]
 8004a32:	3302      	addmi	r3, #2
 8004a34:	6033      	strmi	r3, [r6, #0]
 8004a36:	6825      	ldr	r5, [r4, #0]
 8004a38:	f015 0506 	ands.w	r5, r5, #6
 8004a3c:	d106      	bne.n	8004a4c <_printf_common+0x48>
 8004a3e:	f104 0a19 	add.w	sl, r4, #25
 8004a42:	68e3      	ldr	r3, [r4, #12]
 8004a44:	6832      	ldr	r2, [r6, #0]
 8004a46:	1a9b      	subs	r3, r3, r2
 8004a48:	42ab      	cmp	r3, r5
 8004a4a:	dc26      	bgt.n	8004a9a <_printf_common+0x96>
 8004a4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a50:	6822      	ldr	r2, [r4, #0]
 8004a52:	3b00      	subs	r3, #0
 8004a54:	bf18      	it	ne
 8004a56:	2301      	movne	r3, #1
 8004a58:	0692      	lsls	r2, r2, #26
 8004a5a:	d42b      	bmi.n	8004ab4 <_printf_common+0xb0>
 8004a5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a60:	4641      	mov	r1, r8
 8004a62:	4638      	mov	r0, r7
 8004a64:	47c8      	blx	r9
 8004a66:	3001      	adds	r0, #1
 8004a68:	d01e      	beq.n	8004aa8 <_printf_common+0xa4>
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	6922      	ldr	r2, [r4, #16]
 8004a6e:	f003 0306 	and.w	r3, r3, #6
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	bf02      	ittt	eq
 8004a76:	68e5      	ldreq	r5, [r4, #12]
 8004a78:	6833      	ldreq	r3, [r6, #0]
 8004a7a:	1aed      	subeq	r5, r5, r3
 8004a7c:	68a3      	ldr	r3, [r4, #8]
 8004a7e:	bf0c      	ite	eq
 8004a80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a84:	2500      	movne	r5, #0
 8004a86:	4293      	cmp	r3, r2
 8004a88:	bfc4      	itt	gt
 8004a8a:	1a9b      	subgt	r3, r3, r2
 8004a8c:	18ed      	addgt	r5, r5, r3
 8004a8e:	2600      	movs	r6, #0
 8004a90:	341a      	adds	r4, #26
 8004a92:	42b5      	cmp	r5, r6
 8004a94:	d11a      	bne.n	8004acc <_printf_common+0xc8>
 8004a96:	2000      	movs	r0, #0
 8004a98:	e008      	b.n	8004aac <_printf_common+0xa8>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	4652      	mov	r2, sl
 8004a9e:	4641      	mov	r1, r8
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	47c8      	blx	r9
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	d103      	bne.n	8004ab0 <_printf_common+0xac>
 8004aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ab0:	3501      	adds	r5, #1
 8004ab2:	e7c6      	b.n	8004a42 <_printf_common+0x3e>
 8004ab4:	18e1      	adds	r1, r4, r3
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	2030      	movs	r0, #48	@ 0x30
 8004aba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004abe:	4422      	add	r2, r4
 8004ac0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ac4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ac8:	3302      	adds	r3, #2
 8004aca:	e7c7      	b.n	8004a5c <_printf_common+0x58>
 8004acc:	2301      	movs	r3, #1
 8004ace:	4622      	mov	r2, r4
 8004ad0:	4641      	mov	r1, r8
 8004ad2:	4638      	mov	r0, r7
 8004ad4:	47c8      	blx	r9
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	d0e6      	beq.n	8004aa8 <_printf_common+0xa4>
 8004ada:	3601      	adds	r6, #1
 8004adc:	e7d9      	b.n	8004a92 <_printf_common+0x8e>
	...

08004ae0 <_printf_i>:
 8004ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae4:	7e0f      	ldrb	r7, [r1, #24]
 8004ae6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ae8:	2f78      	cmp	r7, #120	@ 0x78
 8004aea:	4691      	mov	r9, r2
 8004aec:	4680      	mov	r8, r0
 8004aee:	460c      	mov	r4, r1
 8004af0:	469a      	mov	sl, r3
 8004af2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004af6:	d807      	bhi.n	8004b08 <_printf_i+0x28>
 8004af8:	2f62      	cmp	r7, #98	@ 0x62
 8004afa:	d80a      	bhi.n	8004b12 <_printf_i+0x32>
 8004afc:	2f00      	cmp	r7, #0
 8004afe:	f000 80d1 	beq.w	8004ca4 <_printf_i+0x1c4>
 8004b02:	2f58      	cmp	r7, #88	@ 0x58
 8004b04:	f000 80b8 	beq.w	8004c78 <_printf_i+0x198>
 8004b08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b10:	e03a      	b.n	8004b88 <_printf_i+0xa8>
 8004b12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b16:	2b15      	cmp	r3, #21
 8004b18:	d8f6      	bhi.n	8004b08 <_printf_i+0x28>
 8004b1a:	a101      	add	r1, pc, #4	@ (adr r1, 8004b20 <_printf_i+0x40>)
 8004b1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b20:	08004b79 	.word	0x08004b79
 8004b24:	08004b8d 	.word	0x08004b8d
 8004b28:	08004b09 	.word	0x08004b09
 8004b2c:	08004b09 	.word	0x08004b09
 8004b30:	08004b09 	.word	0x08004b09
 8004b34:	08004b09 	.word	0x08004b09
 8004b38:	08004b8d 	.word	0x08004b8d
 8004b3c:	08004b09 	.word	0x08004b09
 8004b40:	08004b09 	.word	0x08004b09
 8004b44:	08004b09 	.word	0x08004b09
 8004b48:	08004b09 	.word	0x08004b09
 8004b4c:	08004c8b 	.word	0x08004c8b
 8004b50:	08004bb7 	.word	0x08004bb7
 8004b54:	08004c45 	.word	0x08004c45
 8004b58:	08004b09 	.word	0x08004b09
 8004b5c:	08004b09 	.word	0x08004b09
 8004b60:	08004cad 	.word	0x08004cad
 8004b64:	08004b09 	.word	0x08004b09
 8004b68:	08004bb7 	.word	0x08004bb7
 8004b6c:	08004b09 	.word	0x08004b09
 8004b70:	08004b09 	.word	0x08004b09
 8004b74:	08004c4d 	.word	0x08004c4d
 8004b78:	6833      	ldr	r3, [r6, #0]
 8004b7a:	1d1a      	adds	r2, r3, #4
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6032      	str	r2, [r6, #0]
 8004b80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e09c      	b.n	8004cc6 <_printf_i+0x1e6>
 8004b8c:	6833      	ldr	r3, [r6, #0]
 8004b8e:	6820      	ldr	r0, [r4, #0]
 8004b90:	1d19      	adds	r1, r3, #4
 8004b92:	6031      	str	r1, [r6, #0]
 8004b94:	0606      	lsls	r6, r0, #24
 8004b96:	d501      	bpl.n	8004b9c <_printf_i+0xbc>
 8004b98:	681d      	ldr	r5, [r3, #0]
 8004b9a:	e003      	b.n	8004ba4 <_printf_i+0xc4>
 8004b9c:	0645      	lsls	r5, r0, #25
 8004b9e:	d5fb      	bpl.n	8004b98 <_printf_i+0xb8>
 8004ba0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ba4:	2d00      	cmp	r5, #0
 8004ba6:	da03      	bge.n	8004bb0 <_printf_i+0xd0>
 8004ba8:	232d      	movs	r3, #45	@ 0x2d
 8004baa:	426d      	negs	r5, r5
 8004bac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bb0:	4858      	ldr	r0, [pc, #352]	@ (8004d14 <_printf_i+0x234>)
 8004bb2:	230a      	movs	r3, #10
 8004bb4:	e011      	b.n	8004bda <_printf_i+0xfa>
 8004bb6:	6821      	ldr	r1, [r4, #0]
 8004bb8:	6833      	ldr	r3, [r6, #0]
 8004bba:	0608      	lsls	r0, r1, #24
 8004bbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004bc0:	d402      	bmi.n	8004bc8 <_printf_i+0xe8>
 8004bc2:	0649      	lsls	r1, r1, #25
 8004bc4:	bf48      	it	mi
 8004bc6:	b2ad      	uxthmi	r5, r5
 8004bc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004bca:	4852      	ldr	r0, [pc, #328]	@ (8004d14 <_printf_i+0x234>)
 8004bcc:	6033      	str	r3, [r6, #0]
 8004bce:	bf14      	ite	ne
 8004bd0:	230a      	movne	r3, #10
 8004bd2:	2308      	moveq	r3, #8
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004bda:	6866      	ldr	r6, [r4, #4]
 8004bdc:	60a6      	str	r6, [r4, #8]
 8004bde:	2e00      	cmp	r6, #0
 8004be0:	db05      	blt.n	8004bee <_printf_i+0x10e>
 8004be2:	6821      	ldr	r1, [r4, #0]
 8004be4:	432e      	orrs	r6, r5
 8004be6:	f021 0104 	bic.w	r1, r1, #4
 8004bea:	6021      	str	r1, [r4, #0]
 8004bec:	d04b      	beq.n	8004c86 <_printf_i+0x1a6>
 8004bee:	4616      	mov	r6, r2
 8004bf0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004bf4:	fb03 5711 	mls	r7, r3, r1, r5
 8004bf8:	5dc7      	ldrb	r7, [r0, r7]
 8004bfa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004bfe:	462f      	mov	r7, r5
 8004c00:	42bb      	cmp	r3, r7
 8004c02:	460d      	mov	r5, r1
 8004c04:	d9f4      	bls.n	8004bf0 <_printf_i+0x110>
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d10b      	bne.n	8004c22 <_printf_i+0x142>
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	07df      	lsls	r7, r3, #31
 8004c0e:	d508      	bpl.n	8004c22 <_printf_i+0x142>
 8004c10:	6923      	ldr	r3, [r4, #16]
 8004c12:	6861      	ldr	r1, [r4, #4]
 8004c14:	4299      	cmp	r1, r3
 8004c16:	bfde      	ittt	le
 8004c18:	2330      	movle	r3, #48	@ 0x30
 8004c1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c22:	1b92      	subs	r2, r2, r6
 8004c24:	6122      	str	r2, [r4, #16]
 8004c26:	f8cd a000 	str.w	sl, [sp]
 8004c2a:	464b      	mov	r3, r9
 8004c2c:	aa03      	add	r2, sp, #12
 8004c2e:	4621      	mov	r1, r4
 8004c30:	4640      	mov	r0, r8
 8004c32:	f7ff fee7 	bl	8004a04 <_printf_common>
 8004c36:	3001      	adds	r0, #1
 8004c38:	d14a      	bne.n	8004cd0 <_printf_i+0x1f0>
 8004c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3e:	b004      	add	sp, #16
 8004c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	f043 0320 	orr.w	r3, r3, #32
 8004c4a:	6023      	str	r3, [r4, #0]
 8004c4c:	4832      	ldr	r0, [pc, #200]	@ (8004d18 <_printf_i+0x238>)
 8004c4e:	2778      	movs	r7, #120	@ 0x78
 8004c50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	6831      	ldr	r1, [r6, #0]
 8004c58:	061f      	lsls	r7, r3, #24
 8004c5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c5e:	d402      	bmi.n	8004c66 <_printf_i+0x186>
 8004c60:	065f      	lsls	r7, r3, #25
 8004c62:	bf48      	it	mi
 8004c64:	b2ad      	uxthmi	r5, r5
 8004c66:	6031      	str	r1, [r6, #0]
 8004c68:	07d9      	lsls	r1, r3, #31
 8004c6a:	bf44      	itt	mi
 8004c6c:	f043 0320 	orrmi.w	r3, r3, #32
 8004c70:	6023      	strmi	r3, [r4, #0]
 8004c72:	b11d      	cbz	r5, 8004c7c <_printf_i+0x19c>
 8004c74:	2310      	movs	r3, #16
 8004c76:	e7ad      	b.n	8004bd4 <_printf_i+0xf4>
 8004c78:	4826      	ldr	r0, [pc, #152]	@ (8004d14 <_printf_i+0x234>)
 8004c7a:	e7e9      	b.n	8004c50 <_printf_i+0x170>
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	f023 0320 	bic.w	r3, r3, #32
 8004c82:	6023      	str	r3, [r4, #0]
 8004c84:	e7f6      	b.n	8004c74 <_printf_i+0x194>
 8004c86:	4616      	mov	r6, r2
 8004c88:	e7bd      	b.n	8004c06 <_printf_i+0x126>
 8004c8a:	6833      	ldr	r3, [r6, #0]
 8004c8c:	6825      	ldr	r5, [r4, #0]
 8004c8e:	6961      	ldr	r1, [r4, #20]
 8004c90:	1d18      	adds	r0, r3, #4
 8004c92:	6030      	str	r0, [r6, #0]
 8004c94:	062e      	lsls	r6, r5, #24
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	d501      	bpl.n	8004c9e <_printf_i+0x1be>
 8004c9a:	6019      	str	r1, [r3, #0]
 8004c9c:	e002      	b.n	8004ca4 <_printf_i+0x1c4>
 8004c9e:	0668      	lsls	r0, r5, #25
 8004ca0:	d5fb      	bpl.n	8004c9a <_printf_i+0x1ba>
 8004ca2:	8019      	strh	r1, [r3, #0]
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	6123      	str	r3, [r4, #16]
 8004ca8:	4616      	mov	r6, r2
 8004caa:	e7bc      	b.n	8004c26 <_printf_i+0x146>
 8004cac:	6833      	ldr	r3, [r6, #0]
 8004cae:	1d1a      	adds	r2, r3, #4
 8004cb0:	6032      	str	r2, [r6, #0]
 8004cb2:	681e      	ldr	r6, [r3, #0]
 8004cb4:	6862      	ldr	r2, [r4, #4]
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	4630      	mov	r0, r6
 8004cba:	f7fb faa9 	bl	8000210 <memchr>
 8004cbe:	b108      	cbz	r0, 8004cc4 <_printf_i+0x1e4>
 8004cc0:	1b80      	subs	r0, r0, r6
 8004cc2:	6060      	str	r0, [r4, #4]
 8004cc4:	6863      	ldr	r3, [r4, #4]
 8004cc6:	6123      	str	r3, [r4, #16]
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cce:	e7aa      	b.n	8004c26 <_printf_i+0x146>
 8004cd0:	6923      	ldr	r3, [r4, #16]
 8004cd2:	4632      	mov	r2, r6
 8004cd4:	4649      	mov	r1, r9
 8004cd6:	4640      	mov	r0, r8
 8004cd8:	47d0      	blx	sl
 8004cda:	3001      	adds	r0, #1
 8004cdc:	d0ad      	beq.n	8004c3a <_printf_i+0x15a>
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	079b      	lsls	r3, r3, #30
 8004ce2:	d413      	bmi.n	8004d0c <_printf_i+0x22c>
 8004ce4:	68e0      	ldr	r0, [r4, #12]
 8004ce6:	9b03      	ldr	r3, [sp, #12]
 8004ce8:	4298      	cmp	r0, r3
 8004cea:	bfb8      	it	lt
 8004cec:	4618      	movlt	r0, r3
 8004cee:	e7a6      	b.n	8004c3e <_printf_i+0x15e>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	4632      	mov	r2, r6
 8004cf4:	4649      	mov	r1, r9
 8004cf6:	4640      	mov	r0, r8
 8004cf8:	47d0      	blx	sl
 8004cfa:	3001      	adds	r0, #1
 8004cfc:	d09d      	beq.n	8004c3a <_printf_i+0x15a>
 8004cfe:	3501      	adds	r5, #1
 8004d00:	68e3      	ldr	r3, [r4, #12]
 8004d02:	9903      	ldr	r1, [sp, #12]
 8004d04:	1a5b      	subs	r3, r3, r1
 8004d06:	42ab      	cmp	r3, r5
 8004d08:	dcf2      	bgt.n	8004cf0 <_printf_i+0x210>
 8004d0a:	e7eb      	b.n	8004ce4 <_printf_i+0x204>
 8004d0c:	2500      	movs	r5, #0
 8004d0e:	f104 0619 	add.w	r6, r4, #25
 8004d12:	e7f5      	b.n	8004d00 <_printf_i+0x220>
 8004d14:	08004f35 	.word	0x08004f35
 8004d18:	08004f46 	.word	0x08004f46

08004d1c <memmove>:
 8004d1c:	4288      	cmp	r0, r1
 8004d1e:	b510      	push	{r4, lr}
 8004d20:	eb01 0402 	add.w	r4, r1, r2
 8004d24:	d902      	bls.n	8004d2c <memmove+0x10>
 8004d26:	4284      	cmp	r4, r0
 8004d28:	4623      	mov	r3, r4
 8004d2a:	d807      	bhi.n	8004d3c <memmove+0x20>
 8004d2c:	1e43      	subs	r3, r0, #1
 8004d2e:	42a1      	cmp	r1, r4
 8004d30:	d008      	beq.n	8004d44 <memmove+0x28>
 8004d32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d3a:	e7f8      	b.n	8004d2e <memmove+0x12>
 8004d3c:	4402      	add	r2, r0
 8004d3e:	4601      	mov	r1, r0
 8004d40:	428a      	cmp	r2, r1
 8004d42:	d100      	bne.n	8004d46 <memmove+0x2a>
 8004d44:	bd10      	pop	{r4, pc}
 8004d46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d4e:	e7f7      	b.n	8004d40 <memmove+0x24>

08004d50 <_sbrk_r>:
 8004d50:	b538      	push	{r3, r4, r5, lr}
 8004d52:	4d06      	ldr	r5, [pc, #24]	@ (8004d6c <_sbrk_r+0x1c>)
 8004d54:	2300      	movs	r3, #0
 8004d56:	4604      	mov	r4, r0
 8004d58:	4608      	mov	r0, r1
 8004d5a:	602b      	str	r3, [r5, #0]
 8004d5c:	f7fb fdea 	bl	8000934 <_sbrk>
 8004d60:	1c43      	adds	r3, r0, #1
 8004d62:	d102      	bne.n	8004d6a <_sbrk_r+0x1a>
 8004d64:	682b      	ldr	r3, [r5, #0]
 8004d66:	b103      	cbz	r3, 8004d6a <_sbrk_r+0x1a>
 8004d68:	6023      	str	r3, [r4, #0]
 8004d6a:	bd38      	pop	{r3, r4, r5, pc}
 8004d6c:	200003e8 	.word	0x200003e8

08004d70 <memcpy>:
 8004d70:	440a      	add	r2, r1
 8004d72:	4291      	cmp	r1, r2
 8004d74:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d78:	d100      	bne.n	8004d7c <memcpy+0xc>
 8004d7a:	4770      	bx	lr
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d86:	4291      	cmp	r1, r2
 8004d88:	d1f9      	bne.n	8004d7e <memcpy+0xe>
 8004d8a:	bd10      	pop	{r4, pc}

08004d8c <_realloc_r>:
 8004d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d90:	4607      	mov	r7, r0
 8004d92:	4614      	mov	r4, r2
 8004d94:	460d      	mov	r5, r1
 8004d96:	b921      	cbnz	r1, 8004da2 <_realloc_r+0x16>
 8004d98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	f7ff bc4d 	b.w	800463c <_malloc_r>
 8004da2:	b92a      	cbnz	r2, 8004db0 <_realloc_r+0x24>
 8004da4:	f7ff fbde 	bl	8004564 <_free_r>
 8004da8:	4625      	mov	r5, r4
 8004daa:	4628      	mov	r0, r5
 8004dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004db0:	f000 f81a 	bl	8004de8 <_malloc_usable_size_r>
 8004db4:	4284      	cmp	r4, r0
 8004db6:	4606      	mov	r6, r0
 8004db8:	d802      	bhi.n	8004dc0 <_realloc_r+0x34>
 8004dba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004dbe:	d8f4      	bhi.n	8004daa <_realloc_r+0x1e>
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	f7ff fc3a 	bl	800463c <_malloc_r>
 8004dc8:	4680      	mov	r8, r0
 8004dca:	b908      	cbnz	r0, 8004dd0 <_realloc_r+0x44>
 8004dcc:	4645      	mov	r5, r8
 8004dce:	e7ec      	b.n	8004daa <_realloc_r+0x1e>
 8004dd0:	42b4      	cmp	r4, r6
 8004dd2:	4622      	mov	r2, r4
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	bf28      	it	cs
 8004dd8:	4632      	movcs	r2, r6
 8004dda:	f7ff ffc9 	bl	8004d70 <memcpy>
 8004dde:	4629      	mov	r1, r5
 8004de0:	4638      	mov	r0, r7
 8004de2:	f7ff fbbf 	bl	8004564 <_free_r>
 8004de6:	e7f1      	b.n	8004dcc <_realloc_r+0x40>

08004de8 <_malloc_usable_size_r>:
 8004de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dec:	1f18      	subs	r0, r3, #4
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	bfbc      	itt	lt
 8004df2:	580b      	ldrlt	r3, [r1, r0]
 8004df4:	18c0      	addlt	r0, r0, r3
 8004df6:	4770      	bx	lr

08004df8 <_init>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	bf00      	nop
 8004dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfe:	bc08      	pop	{r3}
 8004e00:	469e      	mov	lr, r3
 8004e02:	4770      	bx	lr

08004e04 <_fini>:
 8004e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e06:	bf00      	nop
 8004e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e0a:	bc08      	pop	{r3}
 8004e0c:	469e      	mov	lr, r3
 8004e0e:	4770      	bx	lr
